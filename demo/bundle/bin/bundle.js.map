{
"version":3,
"file":"bundle.js",
"sourceRoot":"file:///",
"sources":["C:/HaxeToolkit/haxe/std/js/_std/HxOverrides.hx","C:/HaxeToolkit/haxe/lib/perf,js/1,1,8/src/Perf.hx","C:/HaxeToolkit/haxe/std/js/_std/Reflect.hx","C:/HaxeToolkit/haxe/std/js/_std/Std.hx","C:/HaxeToolkit/haxe/std/js/_std/Type.hx","C:/HaxeToolkit/haxe/std/UInt.hx","C:/Users/m.anthoine/Documents/GitHub/PixiGAFPlayer/gaf/src/com/github/haxePixiGAF/core/GAFLoader.hx","C:/Users/m.anthoine/Documents/GitHub/PixiGAFPlayer/gaf/src/com/github/haxePixiGAF/core/ZipToGAFAssetConverter.hx","C:/Users/m.anthoine/Documents/GitHub/PixiGAFPlayer/gaf/src/com/github/haxePixiGAF/data/GAF.hx","C:/Users/m.anthoine/Documents/GitHub/PixiGAFPlayer/gaf/src/com/github/haxePixiGAF/data/GAFAsset.hx","C:/Users/m.anthoine/Documents/GitHub/PixiGAFPlayer/gaf/src/com/github/haxePixiGAF/data/GAFAssetConfig.hx","C:/Users/m.anthoine/Documents/GitHub/PixiGAFPlayer/gaf/src/com/github/haxePixiGAF/data/GAFBundle.hx","C:/Users/m.anthoine/Documents/GitHub/PixiGAFPlayer/gaf/src/com/github/haxePixiGAF/data/GAFDebugInformation.hx","C:/Users/m.anthoine/Documents/GitHub/PixiGAFPlayer/gaf/src/com/github/haxePixiGAF/data/GAFGFXData.hx","C:/Users/m.anthoine/Documents/GitHub/PixiGAFPlayer/gaf/src/com/github/haxePixiGAF/data/GAFTimeline.hx","C:/Users/m.anthoine/Documents/GitHub/PixiGAFPlayer/gaf/src/com/github/haxePixiGAF/data/GAFTimelineConfig.hx","C:/Users/m.anthoine/Documents/GitHub/PixiGAFPlayer/gaf/src/com/github/haxePixiGAF/data/config/CAnimationFrame.hx","C:/Users/m.anthoine/Documents/GitHub/PixiGAFPlayer/gaf/src/com/github/haxePixiGAF/data/config/CAnimationFrameInstance.hx","C:/Users/m.anthoine/Documents/GitHub/PixiGAFPlayer/gaf/src/com/github/haxePixiGAF/data/config/CAnimationFrames.hx","C:/Users/m.anthoine/Documents/GitHub/PixiGAFPlayer/gaf/src/com/github/haxePixiGAF/data/config/CAnimationObject.hx","C:/Users/m.anthoine/Documents/GitHub/PixiGAFPlayer/gaf/src/com/github/haxePixiGAF/data/config/CAnimationObjects.hx","C:/Users/m.anthoine/Documents/GitHub/PixiGAFPlayer/gaf/src/com/github/haxePixiGAF/data/config/CAnimationSequence.hx","C:/Users/m.anthoine/Documents/GitHub/PixiGAFPlayer/gaf/src/com/github/haxePixiGAF/data/config/CAnimationSequences.hx","C:/Users/m.anthoine/Documents/GitHub/PixiGAFPlayer/gaf/src/com/github/haxePixiGAF/data/config/CBlurFilterData.hx","C:/Users/m.anthoine/Documents/GitHub/PixiGAFPlayer/gaf/src/com/github/haxePixiGAF/data/config/CColorMatrixFilterData.hx","C:/Users/m.anthoine/Documents/GitHub/PixiGAFPlayer/gaf/src/com/github/haxePixiGAF/utils/VectorUtility.hx","C:/Users/m.anthoine/Documents/GitHub/PixiGAFPlayer/gaf/src/com/github/haxePixiGAF/data/config/CFilter.hx","C:/Users/m.anthoine/Documents/GitHub/PixiGAFPlayer/gaf/src/com/github/haxePixiGAF/data/config/CFrameAction.hx","C:/Users/m.anthoine/Documents/GitHub/PixiGAFPlayer/gaf/src/com/github/haxePixiGAF/data/config/CSound.hx","C:/Users/m.anthoine/Documents/GitHub/PixiGAFPlayer/gaf/src/com/github/haxePixiGAF/data/config/CStage.hx","C:/Users/m.anthoine/Documents/GitHub/PixiGAFPlayer/gaf/src/com/github/haxePixiGAF/data/config/CTextFieldObject.hx","C:/Users/m.anthoine/Documents/GitHub/PixiGAFPlayer/gaf/src/com/github/haxePixiGAF/data/config/CTextFieldObjects.hx","C:/Users/m.anthoine/Documents/GitHub/PixiGAFPlayer/gaf/src/com/github/haxePixiGAF/data/config/CTextureAtlas.hx","C:/Users/m.anthoine/Documents/GitHub/PixiGAFPlayer/gaf/src/com/github/haxePixiGAF/data/config/CTextureAtlasCSF.hx","C:/Users/m.anthoine/Documents/GitHub/PixiGAFPlayer/gaf/src/com/github/haxePixiGAF/data/config/CTextureAtlasElement.hx","C:/Users/m.anthoine/Documents/GitHub/PixiGAFPlayer/gaf/src/com/github/haxePixiGAF/data/config/CTextureAtlasElements.hx","C:/Users/m.anthoine/Documents/GitHub/PixiGAFPlayer/gaf/src/com/github/haxePixiGAF/data/config/CTextureAtlasScale.hx","C:/Users/m.anthoine/Documents/GitHub/PixiGAFPlayer/gaf/src/com/github/haxePixiGAF/data/config/CTextureAtlasSource.hx","C:/Users/m.anthoine/Documents/GitHub/PixiGAFPlayer/gaf/src/com/github/haxePixiGAF/data/converters/BinGAFAssetConfigConverter.hx","C:/Users/m.anthoine/Documents/GitHub/PixiGAFPlayer/gaf/src/com/github/haxePixiGAF/data/tagfx/TAGFXBase.hx","C:/Users/m.anthoine/Documents/GitHub/PixiGAFPlayer/gaf/src/com/github/haxePixiGAF/data/tagfx/TAGFXsourcePixi.hx","C:/Users/m.anthoine/Documents/GitHub/PixiGAFPlayer/gaf/src/com/github/haxePixiGAF/data/textures/TextureWrapper.hx","C:/Users/m.anthoine/Documents/GitHub/PixiGAFPlayer/gaf/src/com/github/haxePixiGAF/data/textures/SubTexture.hx","C:/Users/m.anthoine/Documents/GitHub/PixiGAFPlayer/gaf/src/com/github/haxePixiGAF/data/textures/TextureAtlas.hx","C:/Users/m.anthoine/Documents/GitHub/PixiGAFPlayer/gaf/src/com/github/haxePixiGAF/display/GAFContainer.hx","C:/Users/m.anthoine/Documents/GitHub/PixiGAFPlayer/gaf/src/com/github/haxePixiGAF/display/GAFImage.hx","C:/Users/m.anthoine/Documents/GitHub/PixiGAFPlayer/gaf/src/com/github/haxePixiGAF/display/GAFMovieClip.hx","C:/Users/m.anthoine/Documents/GitHub/PixiGAFPlayer/gaf/src/com/github/haxePixiGAF/display/GAFScale9Texture.hx","C:/Users/m.anthoine/Documents/GitHub/PixiGAFPlayer/gaf/src/com/github/haxePixiGAF/display/GAFTextField.hx","C:/Users/m.anthoine/Documents/GitHub/PixiGAFPlayer/gaf/src/com/github/haxePixiGAF/display/GAFTexture.hx","C:/Users/m.anthoine/Documents/GitHub/PixiGAFPlayer/gaf/src/com/github/haxePixiGAF/sound/GAFSoundData.hx","C:/Users/m.anthoine/Documents/GitHub/PixiGAFPlayer/gaf/src/com/github/haxePixiGAF/utils/DebugUtility.hx","C:/Users/m.anthoine/Documents/GitHub/PixiGAFPlayer/gaf/src/com/github/haxePixiGAF/utils/EventEmitterUtility.hx","C:/HaxeToolkit/haxe/std/haxe/io/Input.hx","C:/HaxeToolkit/haxe/std/haxe/io/BytesInput.hx","C:/Users/m.anthoine/Documents/GitHub/PixiGAFPlayer/gaf/src/com/github/haxePixiGAF/utils/GAFBytesInput.hx","C:/Users/m.anthoine/Documents/GitHub/PixiGAFPlayer/gaf/src/com/github/haxePixiGAF/utils/MathUtility.hx","C:/Users/m.anthoine/Documents/GitHub/PixiGAFPlayer/gaf/src/com/github/haxePixiGAF/utils/MatrixUtility.hx","C:/Users/m.anthoine/Documents/GitHub/PixiGAFPlayer/gaf/src/com/github/haxePixiGAF/utils/RectangleUtility.hx","C:/Users/m.anthoine/Documents/GitHub/PixiGAFPlayer/demo/bundle/src/com/github/mathieuanthoine/gaf/Main.hx","C:/HaxeToolkit/haxe/std/haxe/Log.hx","C:/HaxeToolkit/haxe/std/js/_std/haxe/ds/ObjectMap.hx","C:/HaxeToolkit/haxe/std/js/_std/haxe/ds/StringMap.hx","C:/HaxeToolkit/haxe/std/js/_std/haxe/io/Bytes.hx","C:/HaxeToolkit/haxe/std/haxe/io/Eof.hx","C:/HaxeToolkit/haxe/std/haxe/io/FPHelper.hx","C:/HaxeToolkit/haxe/std/js/Boot.hx","C:/HaxeToolkit/haxe/std/js/html/compat/ArrayBuffer.hx","C:/HaxeToolkit/haxe/std/js/html/compat/Uint8Array.hx","C:/Users/m.anthoine/Documents/GitHub/PixiGAFPlayer/gaf/src/com/github/haxePixiGAF/data/converters/ErrorConstants.hx","C:/Users/m.anthoine/Documents/GitHub/PixiGAFPlayer/gaf/src/com/github/haxePixiGAF/data/converters/WarningConstants.hx","C:/Users/m.anthoine/Documents/GitHub/PixiGAFPlayer/gaf/src/com/github/haxePixiGAF/events/GAFEvent.hx","C:/Users/m.anthoine/Documents/GitHub/PixiGAFPlayer/gaf/src/com/github/haxePixiGAF/text/TextFormatAlign.hx"],
"sourcesContent":["/*\n * Copyright (C)2005-2017 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n@:noDoc\nclass HxOverrides {\n\n\tstatic function dateStr( date :Date ) : String {\n\t\tvar m = date.getMonth() + 1;\n\t\tvar d = date.getDate();\n\t\tvar h = date.getHours();\n\t\tvar mi = date.getMinutes();\n\t\tvar s = date.getSeconds();\n\t\treturn date.getFullYear()\n\t\t\t+\"-\"+(if( m < 10 ) \"0\"+m else \"\"+m)\n\t\t\t+\"-\"+(if( d < 10 ) \"0\"+d else \"\"+d)\n\t\t\t+\" \"+(if( h < 10 ) \"0\"+h else \"\"+h)\n\t\t\t+\":\"+(if( mi < 10 ) \"0\"+mi else \"\"+mi)\n\t\t\t+\":\"+(if( s < 10 ) \"0\"+s else \"\"+s);\n\t}\n\n\tstatic function strDate( s : String ) : Date {\n\t\tswitch( s.length ) {\n\t\tcase 8: // hh:mm:ss\n\t\t\tvar k = s.split(\":\");\n\t\t\tvar d : Date = untyped __new__(Date);\n\t\t\tuntyped d[\"setTime\"](0);\n\t\t\tuntyped d[\"setUTCHours\"](k[0]);\n\t\t\tuntyped d[\"setUTCMinutes\"](k[1]);\n\t\t\tuntyped d[\"setUTCSeconds\"](k[2]);\n\t\t\treturn d;\n\t\tcase 10: // YYYY-MM-DD\n\t\t\tvar k = s.split(\"-\");\n\t\t\treturn new Date(cast k[0],cast untyped k[1] - 1,cast k[2],0,0,0);\n\t\tcase 19: // YYYY-MM-DD hh:mm:ss\n\t\t\tvar k = s.split(\" \");\n\t\t\tvar y = k[0].split(\"-\");\n\t\t\tvar t = k[1].split(\":\");\n\t\t\treturn new Date(cast y[0],cast untyped y[1] - 1,cast y[2],cast t[0],cast t[1],cast t[2]);\n\t\tdefault:\n\t\t\tthrow \"Invalid date format : \" + s;\n\t\t}\n\t}\n\n\tstatic function cca( s : String, index : Int ) : Null<Int> {\n\t\tvar x = (cast s).charCodeAt(index);\n\t\tif( x != x ) // fast isNaN\n\t\t\treturn js.Lib.undefined; // isNaN will still return true\n\t\treturn x;\n\t}\n\n\tstatic function substr( s : String, pos : Int, ?len : Int ) : String {\n\t\tif (len == null) {\n\t\t\tlen = s.length;\n\t\t} else if (len < 0) {\n\t\t\tif (pos == 0)\n\t\t\t\tlen = s.length + len;\n\t\t\telse\n\t\t\t\treturn \"\";\n\t\t}\n\n\t\t#if (js_es < 5)\n\t\tif (pos < 0) {\n\t\t\tpos = s.length + pos;\n\t\t\tif (pos < 0)\n\t\t\t\tpos = 0;\n\t\t}\n\t\t#end\n\n\t\treturn (untyped s).substr(pos, len);\n\t}\n\n\tstatic function indexOf<T>( a : Array<T>, obj : T, i : Int) {\n\t\tvar len = a.length;\n\t\tif (i < 0) {\n\t\t\ti += len;\n\t\t\tif (i < 0) i = 0;\n\t\t}\n\t\twhile (i < len)\n\t\t{\n\t\t\tif (untyped __js__(\"a[i] === obj\"))\n\t\t\t\treturn i;\n\t\t\ti++;\n\t\t}\n\t\treturn -1;\n\t}\n\n\tstatic function lastIndexOf<T>( a : Array<T>, obj : T, i : Int) {\n\t\tvar len = a.length;\n\t\tif (i >= len)\n\t\t\ti = len - 1;\n\t\telse if (i < 0)\n\t\t\ti += len;\n\t\twhile (i >= 0)\n\t\t{\n\t\t\tif (untyped __js__(\"a[i] === obj\"))\n\t\t\t\treturn i;\n\t\t\ti--;\n\t\t}\n\t\treturn -1;\n\t}\n\n\tstatic function remove<T>( a : Array<T>, obj : T ) {\n\t\tvar i = a.indexOf(obj);\n\t\tif( i == -1 ) return false;\n\t\ta.splice(i,1);\n\t\treturn true;\n\t}\n\n\tstatic function iter<T>( a : Array<T> ) : Iterator<T> untyped {\n\t\treturn {\n\t\t\tcur : 0,\n\t\t\tarr : a,\n\t\t\thasNext : function() {\n\t\t\t\treturn __this__.cur < __this__.arr.length;\n\t\t\t},\n\t\t\tnext : function() {\n\t\t\t\treturn __this__.arr[__this__.cur++];\n\t\t\t}\n\t\t};\n\t}\n\n\tstatic function __init__() untyped {\n#if (js_es < 5)\n\t\t__feature__('HxOverrides.indexOf', if( Array.prototype.indexOf ) __js__(\"HxOverrides\").indexOf = function(a,o,i) return Array.prototype.indexOf.call(a, o, i));\n\t\t__feature__('HxOverrides.lastIndexOf', if( Array.prototype.lastIndexOf ) __js__(\"HxOverrides\").lastIndexOf = function(a,o,i) return Array.prototype.lastIndexOf.call(a, o, i));\n#end\n\t}\n\n}\n","import js.html.Performance;\nimport js.html.DivElement;\nimport js.Browser;\n\n@:expose class Perf {\n\n\tpublic static var MEASUREMENT_INTERVAL:Int = 1000;\n\n\tpublic static var FONT_FAMILY:String = \"Helvetica,Arial\";\n\n\tpublic static var FPS_BG_CLR:String = \"#00FF00\";\n\tpublic static var FPS_WARN_BG_CLR:String = \"#FF8000\";\n\tpublic static var FPS_PROB_BG_CLR:String = \"#FF0000\";\n\n\tpublic static var MS_BG_CLR:String = \"#FFFF00\";\n\tpublic static var MEM_BG_CLR:String = \"#086A87\";\n\tpublic static var INFO_BG_CLR:String = \"#00FFFF\";\n\tpublic static var FPS_TXT_CLR:String = \"#000000\";\n\tpublic static var MS_TXT_CLR:String = \"#000000\";\n\tpublic static var MEM_TXT_CLR:String = \"#FFFFFF\";\n\tpublic static var INFO_TXT_CLR:String = \"#000000\";\n\n\tpublic static var TOP_LEFT:String = \"TL\";\n\tpublic static var TOP_RIGHT:String = \"TR\";\n\tpublic static var BOTTOM_LEFT:String = \"BL\";\n\tpublic static var BOTTOM_RIGHT:String = \"BR\";\n\n\tstatic var DELAY_TIME:Int = 4000;\n\n\tpublic var fps:DivElement;\n\tpublic var ms:DivElement;\n\tpublic var memory:DivElement;\n\tpublic var info:DivElement;\n\n\tpublic var lowFps:Float;\n\tpublic var avgFps:Float;\n\tpublic var currentFps:Float;\n\tpublic var currentMs:Float;\n\tpublic var currentMem:String;\n\n\tvar _time:Float;\n\tvar _startTime:Float;\n\tvar _prevTime:Float;\n\tvar _ticks:Int;\n\tvar _fpsMin:Float;\n\tvar _fpsMax:Float;\n\tvar _memCheck:Bool;\n\tvar _pos:String;\n\tvar _offset:Float;\n\tvar _measureCount:Int;\n\tvar _totalFps:Float;\n\n\tvar _perfObj:Performance;\n\tvar _memoryObj:Memory;\n\tvar _raf:Int;\n\n\tvar RAF:Dynamic;\n\tvar CAF:Dynamic;\n\n\tpublic function new(?pos = \"TR\", ?offset:Float = 0) {\n\t\t_perfObj = Browser.window.performance;\n\t\tif (Reflect.field(_perfObj, \"memory\") != null) _memoryObj = Reflect.field(_perfObj, \"memory\");\n\t\t_memCheck = (_perfObj != null && _memoryObj != null && _memoryObj.totalJSHeapSize > 0);\n\n\t\t_pos = pos;\n\t\t_offset = offset;\n\n\t\t_init();\n\t\t_createFpsDom();\n\t\t_createMsDom();\n\t\tif (_memCheck) _createMemoryDom();\n\n\t\tif (Browser.window.requestAnimationFrame != null) RAF = Browser.window.requestAnimationFrame;\n\t\telse if (untyped __js__(\"window\").mozRequestAnimationFrame != null) RAF = untyped __js__(\"window\").mozRequestAnimationFrame;\n\t\telse if (untyped __js__(\"window\").webkitRequestAnimationFrame != null) RAF = untyped __js__(\"window\").webkitRequestAnimationFrame;\n\t\telse if (untyped __js__(\"window\").msRequestAnimationFrame != null) RAF = untyped __js__(\"window\").msRequestAnimationFrame;\n\n\t\tif (Browser.window.cancelAnimationFrame != null) CAF = Browser.window.cancelAnimationFrame;\n\t\telse if (untyped __js__(\"window\").mozCancelAnimationFrame != null) CAF = untyped __js__(\"window\").mozCancelAnimationFrame;\n\t\telse if (untyped __js__(\"window\").webkitCancelAnimationFrame != null) CAF = untyped __js__(\"window\").webkitCancelAnimationFrame;\n\t\telse if (untyped __js__(\"window\").msCancelAnimationFrame != null) CAF = untyped __js__(\"window\").msCancelAnimationFrame;\n\n\t\tif (RAF != null) _raf = Reflect.callMethod(Browser.window, RAF, [_tick]);\n\t}\n\n\tinline function _init() {\n\t\tcurrentFps = 60;\n\t\tcurrentMs = 0;\n\t\tcurrentMem = \"0\";\n\n\t\tlowFps = 60;\n\t\tavgFps = 60;\n\n\t\t_measureCount = 0;\n\t\t_totalFps = 0;\n\t\t_time = 0;\n\t\t_ticks = 0;\n\t\t_fpsMin = 60;\n\t\t_fpsMax = 60;\n\t\t_startTime = _now();\n\t\t_prevTime = -MEASUREMENT_INTERVAL;\n\t}\n\n\tinline function _now():Float {\n\t\treturn (_perfObj != null && _perfObj.now != null) ? _perfObj.now() : Date.now().getTime();\n\t}\n\n\tfunction _tick(val:Float) {\n\t\tvar time = _now();\n\t\t_ticks++;\n\n\t\tif (_raf != null && time > _prevTime + MEASUREMENT_INTERVAL) {\n\t\t\tcurrentMs = Math.round(time - _startTime);\n\t\t\tms.innerHTML = \"MS: \" + currentMs;\n\n\t\t\tcurrentFps = Math.round((_ticks * 1000) / (time - _prevTime));\n\t\t\tif (currentFps > 0 && val > DELAY_TIME) {\n\t\t\t\t_measureCount++;\n\t\t\t\t_totalFps += currentFps;\n\t\t\t\tlowFps = _fpsMin = Math.min(_fpsMin, currentFps);\n\t\t\t\t_fpsMax = Math.max(_fpsMax, currentFps);\n\t\t\t\tavgFps = Math.round(_totalFps / _measureCount);\n\t\t\t}\n\n\t\t\tfps.innerHTML =  \"FPS: \" + currentFps + \" (\" + _fpsMin + \"-\" + _fpsMax + \")\";\n\n\t\t\tif (currentFps >= 30) fps.style.backgroundColor = FPS_BG_CLR;\n\t\t\telse if (currentFps >= 15) fps.style.backgroundColor = FPS_WARN_BG_CLR;\n\t\t\telse fps.style.backgroundColor = FPS_PROB_BG_CLR;\n\n\t\t\t_prevTime = time;\n\t\t\t_ticks = 0;\n\n\t\t\tif (_memCheck) {\n\t\t\t\tcurrentMem = _getFormattedSize(_memoryObj.usedJSHeapSize, 2);\n\t\t\t\tmemory.innerHTML = \"MEM: \" + currentMem;\n\t\t\t}\n\t\t}\n\t\t_startTime =  time;\n\n\t\tif (_raf != null) _raf = Reflect.callMethod(Browser.window, RAF, [_tick]);\n\t}\n\n\tfunction _createDiv(id:String, ?top:Float = 0):DivElement {\n\t\tvar div:DivElement = Browser.document.createDivElement();\n\t\tdiv.id = id;\n\t\tdiv.className = id;\n\t\tdiv.style.position = \"absolute\";\n\n\t\tswitch (_pos) {\n\t\t\tcase \"TL\":\n\t\t\t\tdiv.style.left = _offset + \"px\";\n\t\t\t\tdiv.style.top = top + \"px\";\n\t\t\tcase \"TR\":\n\t\t\t\tdiv.style.right = _offset + \"px\";\n\t\t\t\tdiv.style.top = top + \"px\";\n\t\t\tcase \"BL\":\n\t\t\t\tdiv.style.left = _offset + \"px\";\n\t\t\t\tdiv.style.bottom = ((_memCheck) ? 48 : 32) - top + \"px\";\n\t\t\tcase \"BR\":\n\t\t\t\tdiv.style.right = _offset + \"px\";\n\t\t\t\tdiv.style.bottom = ((_memCheck) ? 48 : 32) - top + \"px\";\n\t\t}\n\n\t\tdiv.style.width = \"80px\";\n\t\tdiv.style.height = \"12px\";\n\t\tdiv.style.lineHeight = \"12px\";\n\t\tdiv.style.padding = \"2px\";\n\t\tdiv.style.fontFamily = FONT_FAMILY;\n\t\tdiv.style.fontSize = \"9px\";\n\t\tdiv.style.fontWeight = \"bold\";\n\t\tdiv.style.textAlign = \"center\";\n\t\tBrowser.document.body.appendChild(div);\n\t\treturn div;\n\t}\n\n\tfunction _createFpsDom() {\n\t\tfps = _createDiv(\"fps\");\n\t\tfps.style.backgroundColor = FPS_BG_CLR;\n\t\tfps.style.zIndex = \"995\";\n\t\tfps.style.color = FPS_TXT_CLR;\n\t\tfps.innerHTML = \"FPS: 0\";\n\t}\n\n\tfunction _createMsDom() {\n\t\tms = _createDiv(\"ms\", 16);\n\t\tms.style.backgroundColor = MS_BG_CLR;\n\t\tms.style.zIndex = \"996\";\n\t\tms.style.color = MS_TXT_CLR;\n\t\tms.innerHTML = \"MS: 0\";\n\t}\n\n\tfunction _createMemoryDom() {\n\t\tmemory = _createDiv(\"memory\", 32);\n\t\tmemory.style.backgroundColor = MEM_BG_CLR;\n\t\tmemory.style.color = MEM_TXT_CLR;\n\t\tmemory.style.zIndex = \"997\";\n\t\tmemory.innerHTML = \"MEM: 0\";\n\t}\n\n\tfunction _getFormattedSize(bytes:Float, ?frac:Int = 0):String {\n\t\tvar sizes = [\"Bytes\", \"KB\", \"MB\", \"GB\", \"TB\"];\n\t\tif (bytes == 0) return \"0\";\n\t\tvar precision = Math.pow(10, frac);\n\t\tvar i = Math.floor(Math.log(bytes) / Math.log(1024));\n\t\treturn Math.round(bytes * precision / Math.pow(1024, i)) / precision + \" \" + sizes[i];\n\t}\n\n\tpublic function addInfo(val:String) {\n\t\tinfo = _createDiv(\"info\", (_memCheck) ? 48 : 32);\n\t\tinfo.style.backgroundColor = INFO_BG_CLR;\n\t\tinfo.style.color = INFO_TXT_CLR;\n\t\tinfo.style.zIndex = \"998\";\n\t\tinfo.innerHTML = val;\n\t}\n\n\tpublic function clearInfo() {\n\t\tif (info != null) {\n\t\t\tBrowser.document.body.removeChild(info);\n\t\t\tinfo = null;\n\t\t}\n\t}\n\n\tpublic function destroy() {\n\t\t_cancelRAF();\n\t\t_perfObj = null;\n\t\t_memoryObj = null;\n\t\tif (fps != null) {\n\t\t\tBrowser.document.body.removeChild(fps);\n\t\t\tfps = null;\n\t\t}\n\t\tif (ms != null) {\n\t\t\tBrowser.document.body.removeChild(ms);\n\t\t\tms = null;\n\t\t}\n\t\tif (memory != null) {\n\t\t\tBrowser.document.body.removeChild(memory);\n\t\t\tmemory = null;\n\t\t}\n\t\tclearInfo();\n\t\t_init();\n\t}\n\n\tinline function _cancelRAF() {\n\t\tReflect.callMethod(Browser.window, CAF, [_raf]);\n\t\t_raf = null;\n\t}\n}\n\ntypedef Memory = {\n\tvar usedJSHeapSize:Float;\n\tvar totalJSHeapSize:Float;\n\tvar jsHeapSizeLimit:Float;\n}","/*\n * Copyright (C)2005-2017 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n@:coreApi class Reflect {\n\n\t@:pure\n\tpublic inline static function hasField( o : Dynamic, field : String ) : Bool {\n\t\treturn untyped __js__('Object').prototype.hasOwnProperty.call(o, field);\n\t}\n\n\tpublic static function field( o : Dynamic, field : String ) : Dynamic {\n\t\ttry return untyped o[field] catch( e : Dynamic ) return null;\n\t}\n\n\tpublic inline static function setField( o : Dynamic, field : String, value : Dynamic ) : Void untyped {\n\t\to[field] = value;\n\t}\n\n\tpublic static function getProperty( o : Dynamic, field : String ) : Dynamic untyped {\n\t\tvar tmp;\n\t\treturn if( o == null ) __define_feature__(\"Reflect.getProperty\",null) else if( o.__properties__ && (tmp=o.__properties__[\"get_\"+field]) ) o[tmp]() else o[field];\n\t}\n\n\tpublic static function setProperty( o : Dynamic, field : String, value : Dynamic ) : Void untyped {\n\t\tvar tmp;\n\t\tif( o.__properties__ && (tmp=o.__properties__[\"set_\"+field]) ) o[tmp](value) else o[field] = __define_feature__(\"Reflect.setProperty\",value);\n\t}\n\n\tpublic inline static function callMethod( o : Dynamic, func : haxe.Constraints.Function, args : Array<Dynamic> ) : Dynamic untyped {\n\t\treturn func.apply(o,args);\n\t}\n\n\tpublic static function fields( o : Dynamic ) : Array<String> {\n\t\tvar a = [];\n\t\tif (o != null) untyped {\n\t\t\tvar hasOwnProperty = __js__('Object').prototype.hasOwnProperty;\n\t\t\t__js__(\"for( var f in o ) {\");\n\t\t\tif( f != \"__id__\" && f != \"hx__closures__\" && hasOwnProperty.call(o, f) ) a.push(f);\n\t\t\t__js__(\"}\");\n\t\t}\n\t\treturn a;\n\t}\n\n\tpublic static function isFunction( f : Dynamic ) : Bool untyped {\n\t\treturn __js__(\"typeof(f)\") == \"function\" && !(js.Boot.isClass(f) || js.Boot.isEnum(f));\n\t}\n\n\tpublic static function compare<T>( a : T, b : T ) : Int {\n\t\treturn ( a == b ) ? 0 : (((cast a) > (cast b)) ? 1 : -1);\n\t}\n\n\tpublic static function compareMethods( f1 : Dynamic, f2 : Dynamic ) : Bool {\n\t\tif( f1 == f2 )\n\t\t\treturn true;\n\t\tif( !isFunction(f1) || !isFunction(f2) )\n\t\t\treturn false;\n\t\treturn f1.scope == f2.scope && f1.method == f2.method && f1.method != null;\n\t}\n\n\tpublic static function isObject( v : Dynamic ) : Bool untyped {\n\t\tif( v == null )\n\t\t\treturn false;\n\t\tvar t = __js__(\"typeof(v)\");\n\t\treturn (t == \"string\" || (t == \"object\" && v.__enum__ == null)) || (t == \"function\" && (js.Boot.isClass(v) || js.Boot.isEnum(v)) != null);\n\t}\n\n\tpublic static function isEnumValue( v : Dynamic ) : Bool {\n\t\treturn v != null && v.__enum__ != null;\n\t}\n\n\tpublic static function deleteField( o : Dynamic, field : String ) : Bool untyped {\n\t\tif( !hasField(o,field) ) return false;\n\t\t__js__(\"delete\")(o[field]);\n\t\treturn true;\n\t}\n\n\tpublic static function copy<T>( o : T ) : T {\n\t\tvar o2 : Dynamic = {};\n\t\tfor( f in Reflect.fields(o) )\n\t\t\tReflect.setField(o2,f,Reflect.field(o,f));\n\t\treturn o2;\n\t}\n\n\t@:overload(function( f : Array<Dynamic> -> Void ) : Dynamic {})\n\tpublic static function makeVarArgs( f : Array<Dynamic> -> Dynamic ) : Dynamic {\n\t\treturn function() {\n\t\t\tvar a = untyped Array.prototype.slice.call(__js__(\"arguments\"));\n\t\t\treturn f(a);\n\t\t};\n\t}\n\n}\n","/*\n * Copyright (C)2005-2017 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\nimport js.Boot;\n\n@:keepInit\n@:coreApi class Std {\n\n\tpublic static inline function is( v : Dynamic, t : Dynamic ) : Bool {\n\t\treturn untyped js.Boot.__instanceof(v,t);\n\t}\n\n\tpublic static inline function instance<T:{},S:T>( value : T, c : Class<S> ) : S {\n\t\treturn untyped __instanceof__(value, c) ? cast value : null;\n\t}\n\n\t@:pure\n\tpublic static function string( s : Dynamic ) : String {\n\t\treturn untyped js.Boot.__string_rec(s,\"\");\n\t}\n\n\tpublic static inline function int( x : Float ) : Int {\n\t\treturn (cast x) | 0;\n\t}\n\n\t@:pure\n\tpublic static function parseInt( x : String ) : Null<Int> {\n\t\tvar v = untyped __js__(\"parseInt\")(x, 10);\n\t\t// parse again if hexadecimal\n\t\tif( v == 0 && (x.charCodeAt(1) == 'x'.code || x.charCodeAt(1) == 'X'.code) )\n\t\t\tv = untyped __js__(\"parseInt\")(x);\n\t\tif( untyped __js__(\"isNaN\")(v) )\n\t\t\treturn null;\n\t\treturn cast v;\n\t}\n\n\tpublic static inline function parseFloat( x : String ) : Float {\n\t\treturn untyped __js__(\"parseFloat\")(x);\n\t}\n\n\tpublic static function random( x : Int ) : Int {\n\t\treturn x <= 0 ? 0 : Math.floor(Math.random()*x);\n\t}\n\n\tstatic function __init__() : Void untyped {\n\t\t__feature__(\"js.Boot.getClass\",String.prototype.__class__ = __feature__(\"Type.resolveClass\",$hxClasses[\"String\"] = String,String));\n\t\t__feature__(\"js.Boot.isClass\",String.__name__ = __feature__(\"Type.getClassName\",[\"String\"],true));\n\t\t__feature__(\"Type.resolveClass\",$hxClasses[\"Array\"] = Array);\n\t\t__feature__(\"js.Boot.isClass\",Array.__name__ = __feature__(\"Type.getClassName\",[\"Array\"],true));\n\t\t__feature__(\"Date.*\", {\n\t\t\t__feature__(\"js.Boot.getClass\",__js__('Date').prototype.__class__ = __feature__(\"Type.resolveClass\",$hxClasses[\"Date\"] = __js__('Date'),__js__('Date')));\n\t\t\t__feature__(\"js.Boot.isClass\",__js__('Date').__name__ = [\"Date\"]);\n\t\t});\n\t\t__feature__(\"Int.*\",{\n\t\t\tvar Int = __feature__(\"Type.resolveClass\", $hxClasses[\"Int\"] = { __name__ : [\"Int\"] }, { __name__ : [\"Int\"] });\n\t\t});\n\t\t__feature__(\"Dynamic.*\",{\n\t\t\tvar Dynamic = __feature__(\"Type.resolveClass\", $hxClasses[\"Dynamic\"] = { __name__ : [\"Dynamic\"] }, { __name__ : [\"Dynamic\"] });\n\t\t});\n\t\t__feature__(\"Float.*\",{\n\t\t\tvar Float = __feature__(\"Type.resolveClass\", $hxClasses[\"Float\"] = __js__(\"Number\"), __js__(\"Number\"));\n\t\t\tFloat.__name__ = [\"Float\"];\n\t\t});\n\t\t__feature__(\"Bool.*\",{\n\t\t\tvar Bool = __feature__(\"Type.resolveEnum\",$hxClasses[\"Bool\"] = __js__(\"Boolean\"), __js__(\"Boolean\"));\n\t\t\tBool.__ename__ = [\"Bool\"];\n\t\t});\n\t\t__feature__(\"Class.*\",{\n\t\t\tvar Class = __feature__(\"Type.resolveClass\", $hxClasses[\"Class\"] = { __name__ : [\"Class\"] }, { __name__ : [\"Class\"] });\n\t\t});\n\t\t__feature__(\"Enum.*\",{\n\t\t\tvar Enum = {};\n\t\t});\n\t\t__feature__(\"Void.*\",{\n\t\t\tvar Void = __feature__(\"Type.resolveEnum\", $hxClasses[\"Void\"] = { __ename__ : [\"Void\"] }, { __ename__ : [\"Void\"] });\n\t\t});\n\n#if (js_es < 5)\n\t\t__feature__(\"Array.map\",\n\t\t\tif( Array.prototype.map == null )\n\t\t\t\tArray.prototype.map = function(f) {\n\t\t\t\t\tvar a = [];\n\t\t\t\t\tfor( i in 0...__this__.length )\n\t\t\t\t\t\ta[i] = f(__this__[i]);\n\t\t\t\t\treturn a;\n\t\t\t\t}\n\t\t);\n\t\t__feature__(\"Array.filter\",\n\t\t\tif( Array.prototype.filter == null )\n\t\t\t\tArray.prototype.filter = function(f) {\n\t\t\t\t\tvar a = [];\n\t\t\t\t\tfor( i in 0...__this__.length ) {\n\t\t\t\t\t\tvar e = __this__[i];\n\t\t\t\t\t\tif( f(e) ) a.push(e);\n\t\t\t\t\t}\n\t\t\t\t\treturn a;\n\t\t\t\t}\n\t\t);\n#end\n\t}\n\n}\n","/*\n * Copyright (C)2005-2017 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nenum ValueType {\n\tTNull;\n\tTInt;\n\tTFloat;\n\tTBool;\n\tTObject;\n\tTFunction;\n\tTClass( c : Class<Dynamic> );\n\tTEnum( e : Enum<Dynamic> );\n\tTUnknown;\n}\n\n@:coreApi class Type {\n\n\tpublic static inline function getClass<T>( o : T ) : Class<T> {\n\t\treturn if (o == null) null else @:privateAccess js.Boot.getClass(o);\n\t}\n\n\tpublic static function getEnum( o : EnumValue ) : Enum<Dynamic> untyped {\n\t\tif( o == null )\n\t\t\treturn null;\n\t\treturn o.__enum__;\n\t}\n\n\tpublic static function getSuperClass( c : Class<Dynamic> ) : Class<Dynamic> untyped {\n\t\treturn c.__super__;\n\t}\n\n\n\tpublic static function getClassName( c : Class<Dynamic> ) : String {\n\t\tvar a : Array<String> = untyped c.__name__;\n\t\tif (a == null)\n\t\t\treturn null;\n\t\treturn a.join(\".\");\n\t}\n\n\tpublic static function getEnumName( e : Enum<Dynamic> ) : String {\n\t\tvar a : Array<String> = untyped e.__ename__;\n\t\treturn a.join(\".\");\n\t}\n\n\tpublic static function resolveClass( name : String ) : Class<Dynamic> untyped {\n\t\tvar cl : Class<Dynamic> = $hxClasses[name];\n\t\t// ensure that this is a class\n\t\tif( cl == null || !js.Boot.isClass(cl) )\n\t\t\treturn null;\n\t\treturn cl;\n\t}\n\n\tpublic static function resolveEnum( name : String ) : Enum<Dynamic> untyped {\n\t\tvar e : Dynamic = $hxClasses[name];\n\t\t// ensure that this is an enum\n\t\tif( e == null || !js.Boot.isEnum(e) )\n\t\t\treturn null;\n\t\treturn e;\n\t}\n\n\tpublic static function createInstance<T>( cl : Class<T>, args : Array<Dynamic> ) : T untyped {\n\t\tswitch( args.length ) {\n\t\tcase 0:\n\t\t\treturn __new__(cl);\n\t\tcase 1:\n\t\t\treturn __new__(cl,args[0]);\n\t\tcase 2:\n\t\t\treturn __new__(cl,args[0],args[1]);\n\t\tcase 3:\n\t\t\treturn __new__(cl,args[0],args[1],args[2]);\n\t\tcase 4:\n\t\t\treturn __new__(cl,args[0],args[1],args[2],args[3]);\n\t\tcase 5:\n\t\t\treturn __new__(cl,args[0],args[1],args[2],args[3],args[4]);\n\t\tcase 6:\n\t\t\treturn __new__(cl,args[0],args[1],args[2],args[3],args[4],args[5]);\n\t\tcase 7:\n\t\t\treturn __new__(cl,args[0],args[1],args[2],args[3],args[4],args[5],args[6]);\n\t\tcase 8:\n\t\t\treturn __new__(cl,args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7]);\n\t\tcase 9:\n\t\t\treturn __new__(cl,args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8]);\n\t\tcase 10:\n\t\t\treturn __new__(cl,args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9]);\n\t\tcase 11:\n\t\t\treturn __new__(cl,args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10]);\n\t\tcase 12:\n\t\t\treturn __new__(cl,args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11]);\n\t\tcase 13:\n\t\t\treturn __new__(cl,args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11],args[12]);\n\t\tcase 14:\n\t\t\treturn __new__(cl,args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11],args[12],args[13]);\n\t\tdefault:\n\t\t\tthrow \"Too many arguments\";\n\t\t}\n\t}\n\n\tpublic static function createEmptyInstance<T>( cl : Class<T> ) : T untyped {\n\t\t__js__(\"function empty() {}; empty.prototype = cl.prototype\");\n\t\treturn __js__(\"new empty()\");\n\t}\n\n\tpublic static function createEnum<T>( e : Enum<T>, constr : String, ?params : Array<Dynamic> ) : T {\n\t\tvar f:Dynamic = Reflect.field(e,constr);\n\t\tif( f == null ) throw \"No such constructor \"+constr;\n\t\tif( Reflect.isFunction(f) ) {\n\t\t\tif( params == null ) throw \"Constructor \"+constr+\" need parameters\";\n\t\t\treturn Reflect.callMethod(e,f,params);\n\t\t}\n\t\tif( params != null && params.length != 0 )\n\t\t\tthrow \"Constructor \"+constr+\" does not need parameters\";\n\t\treturn f;\n\t}\n\n\tpublic static function createEnumIndex<T>( e : Enum<T>, index : Int, ?params : Array<Dynamic> ) : T {\n\t\tvar c : String = (untyped e.__constructs__)[index];\n\t\tif( c == null ) throw index+\" is not a valid enum constructor index\";\n\t\treturn createEnum(e,c,params);\n\t}\n\n\tpublic static function getInstanceFields( c : Class<Dynamic> ) : Array<String> {\n\t\tvar a = [];\n\t\tuntyped __js__(\"for(var i in c.prototype) a.push(i)\");\n\t\ta.remove(\"__class__\");\n\t\ta.remove(\"__properties__\");\n\t\treturn a;\n\t}\n\n\tpublic static function getClassFields( c : Class<Dynamic> ) : Array<String> {\n\t\tvar a = Reflect.fields(c);\n\t\ta.remove(\"__name__\");\n\t\ta.remove(\"__interfaces__\");\n\t\ta.remove(\"__properties__\");\n\t\ta.remove(\"__super__\");\n\t\ta.remove(\"__meta__\");\n\t\ta.remove(\"prototype\");\n\t\treturn a;\n\t}\n\n\tpublic static inline function getEnumConstructs( e : Enum<Dynamic> ) : Array<String> {\n\t\treturn ((cast e).__constructs__ : Array<String>).copy();\n\t}\n\n\tpublic static function typeof( v : Dynamic ) : ValueType untyped {\n\t\tswitch( __js__(\"typeof\")(v) ) {\n\t\tcase \"boolean\": return TBool;\n\t\tcase \"string\": return TClass(String);\n\t\tcase \"number\":\n\t\t\t// this should handle all cases : NaN, +/-Inf and Floats outside range\n\t\t\tif( Math.ceil(v) == v%2147483648.0 )\n\t\t\t\treturn TInt;\n\t\t\treturn TFloat;\n\t\tcase \"object\":\n\t\t\tif( v == null )\n\t\t\t\treturn TNull;\n\t\t\tvar e = v.__enum__;\n\t\t\tif( e != null )\n\t\t\t\treturn TEnum(e);\n\t\t\tvar c = js.Boot.getClass(v);\n\t\t\tif( c != null )\n\t\t\t\treturn TClass(c);\n\t\t\treturn TObject;\n\t\tcase \"function\":\n\t\t\tif( js.Boot.isClass(v) || js.Boot.isEnum(v) )\n\t\t\t\treturn TObject;\n\t\t\treturn TFunction;\n\t\tcase \"undefined\":\n\t\t\treturn TNull;\n\t\tdefault:\n\t\t\treturn TUnknown;\n\t\t}\n\t}\n\n\tpublic static function enumEq<T>( a : T, b : T ) : Bool untyped {\n\t\tif( a == b )\n\t\t\treturn true;\n\t\ttry {\n\t\t\tif( a[0] != b[0] )\n\t\t\t\treturn false;\n\t\t\tfor( i in 2...a.length )\n\t\t\t\tif( !enumEq(a[i],b[i]) )\n\t\t\t\t\treturn false;\n\t\t\tvar e = a.__enum__;\n\t\t\tif( e != b.__enum__ || e == null )\n\t\t\t\treturn false;\n\t\t} catch( e : Dynamic ) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\tpublic inline static function enumConstructor( e : EnumValue ) : String {\n\t\treturn untyped e[0];\n\t}\n\n\tpublic inline static function enumParameters( e : EnumValue ) : Array<Dynamic> {\n\t\treturn untyped e.slice(2);\n\t}\n\n\tpublic inline static function enumIndex( e : EnumValue ) : Int {\n\t\treturn untyped e[1];\n\t}\n\n\tpublic inline static function allEnums<T>( e : Enum<T> ) : Array<T> {\n\t\treturn untyped __define_feature__(\"Type.allEnums\", e.__empty_constructs__);\n\t}\n\n}\n\n","/*\n * Copyright (C)2005-2017 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n#if ((flash || flash9doc || cs || hl) && !doc_gen)\n/**\n\tThe unsigned `Int` type is only defined for Flash and C#. It's currently\n\thandled the same as a normal Int.\n\n\t@see https://haxe.org/manual/types-basic-types.html\n**/\n@:coreType\n@:notNull\n@:runtimeValue\n@:analyzer(no_const_propagation)\nabstract UInt to Int from Int\n{\n\t@:commutative @:op(A+B) private static function addI(lhs:UInt, rhs:Int):UInt;\n\t@:commutative @:op(A+B) private static function addF(lhs:UInt, rhs:Float):Float;\n\t@:op(A+B) private static function add(lhs:UInt, rhs:UInt):UInt;\n\n\t@:commutative @:op(A*B) private static function mulI(lhs:UInt, rhs:Int):UInt;\n\t@:commutative @:op(A*B) private static function mulF(lhs:UInt, rhs:Float):Float;\n\t@:op(A*B) private static function mul(lhs:UInt, rhs:UInt):UInt;\n\n\t@:op(A%B) private static function modI(lhs:UInt, rhs:Int):UInt;\n\t@:op(A%B) private static function modF(lhs:UInt, rhs:Float):Float;\n\t@:op(A%B) private static function mod(lhs:UInt, rhs:UInt):UInt;\n\n\t@:op(A-B) private static function subI(lhs:UInt, rhs:Int):UInt;\n\t@:op(A-B) private static function subF(lhs:UInt, rhs:Float):Float;\n\t@:op(A-B) private static function sub(lhs:UInt, rhs:UInt):UInt;\n\n\t@:op(A/B) private static function divI(lhs:UInt, rhs:Int):Float;\n\t@:op(A/B) private static function divF(lhs:UInt, rhs:Float):Float;\n\t@:op(A/B) private static function div(lhs:UInt, rhs:UInt):Float;\n\n\t@:commutative @:op(A|B) private static function orI(lhs:UInt, rhs:Int):UInt;\n\t@:op(A|B) private static function or(lhs:UInt, rhs:UInt):UInt;\n\n\t@:commutative @:op(A^B) private static function xorI(lhs:UInt, rhs:Int):UInt;\n\t@:op(A^B) private static function xor(lhs:UInt, rhs:UInt):UInt;\n\n\t@:commutative @:op(A&B) private static function andI(lhs:UInt, rhs:Int):UInt;\n\t@:op(A&B) private static function and(lhs:UInt, rhs:UInt):UInt;\n\n\t@:op(A<<B) private static function shl(lhs:UInt, rhs:Int):UInt;\n\t@:op(A>>B) private static inline function shr(lhs:UInt, rhs:Int):UInt return lhs >>> rhs;\n\t@:op(A>>>B) private static function ushr(lhs:UInt, rhs:Int):UInt;\n\n\t@:op(A>B) private static function gt(lhs:UInt, rhs:UInt):Bool;\n\t@:op(A>=B) private static function gte(lhs:UInt, rhs:UInt):Bool;\n\t@:op(A<B) private static function lt(lhs:UInt, rhs:UInt):Bool;\n\t@:op(A<=B) private static function lte(lhs:UInt, rhs:UInt):Bool;\n\n\t@:op(A>B) private static function gtf(lhs:UInt, rhs:Float):Bool;\n\t@:op(A>B) private static function gtf2(lhs:Float, rhs:UInt):Bool;\n\t@:op(A>=B) private static function gtef(lhs:UInt, rhs:Float):Bool;\n\t@:op(A>=B) private static function gtef2(lhs:Float, rhs:UInt):Bool;\n\t@:op(A<B) private static function ltf(lhs:UInt, rhs:Float):Bool;\n\t@:op(A<B) private static function ltf2(lhs:Float, rhs:UInt):Bool;\n\t@:op(A<=B) private static function ltef(lhs:UInt, rhs:Float):Bool;\n\t@:op(A<=B) private static function ltef2(lhs:Float, rhs:UInt):Bool;\n\n\t@:op(~A) private static function bneg(t:UInt):UInt;\n\n\t@:commutative @:op(A == B) private static function equalsInt<T:Int>(a:UInt, b:T):Bool;\n\t@:commutative @:op(A != B) private static function notEqualsInt<T:Int>(a:UInt, b:T):Bool;\n\t@:commutative @:op(A == B) private static function equalsFloat<T:Float>(a:UInt, b:T):Bool;\n\t@:commutative @:op(A != B) private static function notEqualsFloat<T:Float>(a:UInt, b:T):Bool;\n\n\t@:op(++A) private function prefixIncrement():UInt;\n\t@:op(A++) private function postfixIncrement():UInt;\n\t@:op(--A) private function prefixDecrement():UInt;\n\t@:op(A--) private function postfixDecrement():UInt;\n}\n#else\n/**\n\tThe unsigned `Int` type is only defined for Flash and C#.\n\tSimulate it for other platforms.\n\n\t@see https://haxe.org/manual/types-basic-types.html\n**/\nabstract UInt(Int) from Int to Int {\n\n\t@:op(A + B) private static inline function add(a:UInt, b:UInt):UInt {\n\t\treturn a.toInt() + b.toInt();\n\t}\n\n\t@:op(A / B) private static inline function div(a:UInt, b:UInt):Float {\n\t\treturn a.toFloat() / b.toFloat();\n\t}\n\n\t@:op(A * B) private static inline function mul(a:UInt, b:UInt):UInt {\n\t\treturn a.toInt() * b.toInt();\n\t}\n\n\t@:op(A - B) private static inline function sub(a:UInt, b:UInt):UInt {\n\t\treturn a.toInt() - b.toInt();\n\t}\n\n\t@:op(A > B) private static #if !js inline #end function gt(a:UInt, b:UInt):Bool {\n\t\tvar aNeg = a.toInt() < 0;\n\t\tvar bNeg = b.toInt() < 0;\n\t\treturn\n\t\t\tif( aNeg != bNeg ) aNeg;\n\t\t\telse a.toInt() > b.toInt();\n\t}\n\n\t@:op(A >= B) private static #if !js inline #end function gte(a:UInt, b:UInt):Bool {\n\t\tvar aNeg = a.toInt() < 0;\n\t\tvar bNeg = b.toInt() < 0;\n\t\treturn\n\t\t\tif( aNeg != bNeg ) aNeg;\n\t\t\telse a.toInt() >= b.toInt();\n\t}\n\n\t@:op(A < B) private static inline function lt(a:UInt, b:UInt):Bool {\n\t\treturn gt(b, a);\n\t}\n\n\t@:op(A <= B) private static inline function lte(a:UInt, b:UInt):Bool {\n\t\treturn gte(b, a);\n\t}\n\n\t@:op(A & B) private static inline function and(a:UInt, b:UInt):UInt {\n\t\treturn a.toInt() & b.toInt();\n\t}\n\n\t@:op(A | B) private static inline function or(a:UInt, b:UInt):UInt {\n\t\treturn a.toInt() | b.toInt();\n\t}\n\n\t@:op(A ^ B) private static inline function xor(a:UInt, b:UInt):UInt {\n\t\treturn a.toInt() ^ b.toInt();\n\t}\n\n\t@:op(A << B) private static inline function shl(a:UInt, b:Int):UInt {\n\t\treturn a.toInt() << b;\n\t}\n\n\t@:op(A >> B) private static inline function shr(a:UInt, b:Int):UInt {\n\t\treturn a.toInt() >>> b;\n\t}\n\n\t@:op(A >>> B) private static inline function ushr(a:UInt, b:Int):UInt {\n\t\treturn a.toInt() >>> b;\n\t}\n\n\t@:op(A % B) private static inline function mod(a:UInt, b:UInt):UInt {\n\t\treturn Std.int( a.toFloat() % b.toFloat() );\n\t}\n\n\t@:commutative @:op(A + B) private static inline function addWithFloat(a:UInt, b:Float):Float {\n\t\treturn a.toFloat() + b;\n\t}\n\n\t@:commutative @:op(A * B) private static inline function mulWithFloat(a:UInt, b:Float):Float {\n\t\treturn a.toFloat() * b;\n\t}\n\n\t@:op(A / B) private static inline function divFloat(a:UInt, b:Float):Float {\n\t\treturn a.toFloat() / b;\n\t}\n\n\t@:op(A / B) private static inline function floatDiv(a:Float, b:UInt):Float {\n\t\treturn a / b.toFloat();\n\t}\n\n\t@:op(A - B) private static inline function subFloat(a:UInt, b:Float):Float {\n\t\treturn a.toFloat() - b;\n\t}\n\n\t@:op(A - B) private static inline function floatSub(a:Float, b:UInt):Float {\n\t\treturn a - b.toFloat();\n\t}\n\n\t@:op(A > B) private static inline function gtFloat(a:UInt, b:Float):Bool {\n\t\treturn a.toFloat() > b;\n\t}\n\n\t@:commutative @:op(A == B) private static inline function equalsInt<T:Int>(a:UInt, b:T):Bool {\n\t\treturn a.toInt() == b;\n\t}\n\n\t@:commutative @:op(A != B) private static inline function notEqualsInt<T:Int>(a:UInt, b:T):Bool {\n\t\treturn a.toInt() != b;\n\t}\n\n\t@:commutative @:op(A == B) private static inline function equalsFloat<T:Float>(a:UInt, b:T):Bool {\n\t\treturn a.toFloat() == b;\n\t}\n\n\t@:commutative @:op(A != B) private static inline function notEqualsFloat<T:Float>(a:UInt, b:T):Bool {\n\t\treturn a.toFloat() != b;\n\t}\n\n\t@:op(A >= B) private static inline function gteFloat(a:UInt, b:Float):Bool {\n\t\treturn a.toFloat() >= b;\n\t}\n\n\n\t@:op(A > B) private static inline function floatGt(a:Float, b:UInt):Bool {\n\t\treturn a > b.toFloat();\n\t}\n\n\t@:op(A >= B) private static inline function floatGte(a:Float, b:UInt):Bool {\n\t\treturn a >= b.toFloat();\n\t}\n\n\t@:op(A < B) private static inline function ltFloat(a:UInt, b:Float):Bool {\n\t\treturn a.toFloat() < b;\n\t}\n\n\t@:op(A <= B) private static inline function lteFloat(a:UInt, b:Float):Bool {\n\t\treturn a.toFloat() <= b;\n\t}\n\n\t@:op(A < B) private static inline function floatLt(a:Float, b:UInt):Bool {\n\t\treturn a < b.toFloat();\n\t}\n\n\t@:op(A <= B) private static inline function floatLte(a:Float, b:UInt):Bool {\n\t\treturn a <= b.toFloat();\n\t}\n\n\t@:op(A % B) private static inline function modFloat(a:UInt, b:Float):Float {\n\t\treturn a.toFloat() % b;\n\t}\n\n\t@:op(A % B) private static inline function floatMod(a:Float, b:UInt):Float {\n\t\treturn a % b.toFloat();\n\t}\n\n\t@:op(~A) private inline function negBits():UInt {\n\t\treturn ~this;\n\t}\n\n\t@:op(++A) private inline function prefixIncrement():UInt {\n\t\treturn ++this;\n\t}\n\n\t@:op(A++) private inline function postfixIncrement():UInt {\n\t\treturn this++;\n\t}\n\n\t@:op(--A) private inline function prefixDecrement():UInt {\n\t\treturn --this;\n\t}\n\n\t@:op(A--) private inline function postfixDecrement():UInt {\n\t\treturn this--;\n\t}\n\n\t// TODO: radix is just defined to deal with doc_gen issues\n\tprivate inline function toString(?radix:Int):String {\n\t\treturn Std.string(toFloat());\n\t}\n\n\tprivate inline function toInt():Int {\n\t\treturn this;\n\t}\n\n\t@:to private #if (!js || analyzer) inline #end function toFloat():Float {\n\t\tvar int = toInt();\n\t\tif (int < 0) {\n\t\t\treturn 4294967296.0 + int;\n\t\t}\n\t\telse {\n\t\t\t// + 0.0 here to make sure we promote to Float on some platforms\n\t\t\t// In particular, PHP was having issues when comparing to Int in the == op.\n\t\t\treturn int + 0.0;\n\t\t}\n\t}\n}\n#end\n","package com.github.haxePixiGAF.core;\n\nimport com.github.haxePixiGAF.utils.GAFBytesInput;\nimport haxe.io.Bytes;\nimport pixi.loaders.Loader;\nimport pixi.loaders.LoaderOptions;\nimport pixi.loaders.Resource;\nimport pixi.loaders.ResourceLoader;\n\n/**\n * Loader of GAF resources\n * @author Mathieu Anthoine\n */\n@:expose(\"GAF.GAFLoader\")\nclass GAFLoader extends Loader\n{\n\n\tpublic var names:Array<String>=[];\n\tpublic var contents:Array<GAFBytesInput>=[];\n\n\n\tpublic function new()\n\t{\n\t\tsuper();\n\t}\n\n\tpublic function addGAFFile (pUrl:String):Void\n\t{\n\t\tif (pUrl.substring(pUrl.length-4) != \".gaf\") throw \"GAFLoader supports only .gaf files\";\n\t\tadd(pUrl,{loadType: 1/*LOAD_TYPE.XHR*/,xhrType:'arraybuffer'/*XHR_RESPONSE_TYPE.BUFFER*/});\n\t}\n\n\toverride public function load (?cb:Dynamic):ResourceLoader\n\t{\n\t\tuse(parseData);\n\t\treturn super.load();\n\t}\n\n\tprivate function parseData (pResource:Resource, pNext:Void->Void): Void\n\t{\n\t\tnames.push(pResource.url);\n\t\tvar lBytes:Bytes = Bytes.ofData(pResource.data);\n\t\tcontents.push(new GAFBytesInput(lBytes, 0, lBytes.length));\n\t\tpNext();\n\t}\n\n}","package com.github.haxePixiGAF.core;\nimport com.github.haxePixiGAF.data.GAFAsset;\nimport com.github.haxePixiGAF.data.GAFAssetConfig;\nimport com.github.haxePixiGAF.data.GAFBundle;\nimport com.github.haxePixiGAF.data.GAFGFXData;\nimport com.github.haxePixiGAF.data.GAFTimeline;\nimport com.github.haxePixiGAF.data.GAFTimelineConfig;\nimport com.github.haxePixiGAF.data.config.CSound;\nimport com.github.haxePixiGAF.data.converters.BinGAFAssetConfigConverter;\nimport com.github.haxePixiGAF.data.tagfx.TAGFXBase;\nimport com.github.haxePixiGAF.data.tagfx.TAGFXsourcePixi;\nimport com.github.haxePixiGAF.events.GAFEvent;\nimport com.github.haxePixiGAF.sound.GAFSoundData;\nimport com.github.haxePixiGAF.utils.GAFBytesInput;\nimport com.github.haxePixiGAF.utils.MathUtility;\nimport js.Lib;\nimport pixi.interaction.EventEmitter;\nimport pixi.loaders.Loader;\n\nusing com.github.haxePixiGAF.utils.EventEmitterUtility;\n\n/**\n * TODO\n * @author Mathieu Anthoine\n */\n\ntypedef Array_String = Array<String>; \n\n@:expose(\"GAF.ZipToGAFAssetConverter\")\nclass ZipToGAFAssetConverter extends EventEmitter\n{\n\t\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PUBLIC VARIABLES\n\t//\n\t//--------------------------------------------------------------------------\n\n\t/**\n\t * In process of conversion doesn't create textures (doesn't load in GPU memory).\n\t * Be sure to set up <code>Starling.handleLostContext = true</code> when using this action, otherwise Error will occur\n\t */\n\tpublic static inline var ACTION_DONT_LOAD_IN_GPU_MEMORY: String = \"actionDontLoadInGPUMemory\";\n\n\t/**\n\t * In process of conversion create textures (load in GPU memory).\n\t */\n\tpublic static inline var ACTION_LOAD_ALL_IN_GPU_MEMORY: String = \"actionLoadAllInGPUMemory\";\n\n\t/**\n\t * In process of conversion create textures (load in GPU memory) only atlases for default scale and csf\n\t */\n\tpublic static inline var ACTION_LOAD_IN_GPU_MEMORY_ONLY_DEFAULT: String = \"actionLoadInGPUMemoryOnlyDefault\";\n\t\n\t/**\n\t * Action that should be applied to atlases in process of conversion. Possible values are action constants.\n\t * By default loads in GPU memory only atlases for default scale and csf\n\t */\n\tpublic static var actionWithAtlases: String = ACTION_LOAD_IN_GPU_MEMORY_ONLY_DEFAULT;\n\t\n\t\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PRIVATE VARIABLES\n\t//\n\t//--------------------------------------------------------------------------\t\n\tprivate var _id:String;\n\n\t//private var _zip:FZip;\n\t//private var _zipLoader:FZipLibrary;\n\n\tprivate var _currentConfigIndex:Int=0;\n\tprivate var _configConvertTimeout:Float;\n\n\tprivate var _gafAssetsIDs:Array<String>;\n\tprivate var _gafAssetConfigs:Map<String,GAFAssetConfig>;\n\tprivate var _gafAssetConfigSources:Map<String,GAFBytesInput>;\n\n\tprivate var _sounds:Array<CSound>;\n\t//private var _taGFXs:Map<String,TAGFXSourcePNGBA>;\n\tprivate var _taGFXs:Map<String,TAGFXBase>;\n\n\tprivate var _gfxData:GAFGFXData;\n\tprivate var _soundData:GAFSoundData;\n\n\tprivate var _gafBundle:GAFBundle;\n\n\tprivate var _defaultScale:Float;\n\tprivate var _defaultContentScaleFactor:Float;\n\n\tprivate var _parseConfigAsync:Bool=false;\n\tprivate var _ignoreSounds:Bool=false;\n\n\t///////////////////////////////////\n\n\tprivate var _gafAssetsConfigURLs:Array<Dynamic>;\n\tprivate var _gafAssetsConfigIndex:Int=0;\n\n\tprivate var _atlasSourceURLs:Array<Dynamic>;\n\t//private var _atlasSourceIndex:Int;\n\t\n\t//////////////////////////////////\n\t\n\tprivate var _loader:Loader;\n\t\n\t//--------------------------------------------------------------------------\n\t//\n\t//  CONSTRUCTOR\n\t//\n\t//--------------------------------------------------------------------------\n\t\t\n\t/** Creates a new<code>ZipToGAFAssetConverter</code>instance.\n\t * @param id The id of the converter.\n\t * If it is not empty<code>ZipToGAFAssetConverter</code>sets the<code>name</code>of produced bundle equal to this id.\n\t */\n\tpublic function new(id:String=null)\n\t{\n\t\tsuper();\n\t\t_id=id;\n\t}\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PUBLIC METHODS\n\t//\n\t//--------------------------------------------------------------------------\n\t\n\t/**\n\t * Converts GAF file(*.zip)into<code>GAFTimeline</code>or<code>GAFBundle</code>depending on file content.\n\t * Because conversion process is asynchronous use<code>Event.COMPLETE</code>listener to trigger successful conversion.\n\t * Use<code>ErrorEvent.ERROR</code>listener to trigger any conversion fail.\n\t *\n\t * @param data *.zip file binary or File object represents a path to a *.gaf file or directory with *.gaf config files\n\t * @param defaultScale Scale value for<code>GAFTimeline</code>that will be set by default\n\t * @param defaultContentScaleFactor Content scale factor(csf)value for<code>GAFTimeline</code>that will be set by default\n\t */\n\tpublic function convert(data:Dynamic, ?defaultScale:Float, ?defaultContentScaleFactor:Float):Void\n\t{\n\t\t/*\n\t\tif(ZipToGAFAssetConverter.actionWithAtlases==ZipToGAFAssetConverter.ACTION_DONT_LOAD_IN_GPU_MEMORY)\n\t\t{\n\t\t\tthrow new Dynamic(\"Impossible parameters combination! Starling.handleLostContext=false and actionWithAtlases=ACTION_DONT_LOAD_ALL_IN_VIDEO_MEMORY One of the parameters must be changed!\");\n\t\t}\n\t\t*/\n\n\t\treset();\n\t\n\t\tif (defaultScale!=null) _defaultScale=defaultScale;\n\t\tif (_defaultContentScaleFactor!=null) _defaultContentScaleFactor=defaultContentScaleFactor;\n\n\t\tif(_id!=null && _id.length>0)\n\t\t{\n\t\t\t_gafBundle.name=_id;\n\t\t}\n\t\t\n\t\t//TODO if (Std.is(data, ZipFile)) ; else\n\t\tif (Std.is(data, String)) loadUrls([data]);\n\t\telse if (Std.is(data, Array_String)) loadUrls(data);\n\t\telse if(Std.is(data, GAFLoader)) parseLoader(data);\n\t\telse\n\t\t{\n\t\t\ttrace(\"ERROR\");\n\t\t\t//zipProcessError(ErrorConstants.UNKNOWN_FORMAT, 6);\n\t\t}\n\t\t\n\t}\n\t\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PRIVATE METHODS\n\t//\n\t//--------------------------------------------------------------------------\n\n\tprivate function reset():Void\n\t{\n\t\t//_zip=null;\n\t\t//_zipLoader=null;\n\t\t_currentConfigIndex=0;\n\t\t_configConvertTimeout=0;\n\n\t\t_sounds=new Array<CSound>();\n\t\t_taGFXs=new Map<String,TAGFXBase>();\n\n\t\t_gfxData=new GAFGFXData();\n\t\t//_soundData=new GAFSoundData();\n\t\t_gafBundle=new GAFBundle();\n\t\t_gafBundle.soundData=_soundData;\n\n\t\t_gafAssetsIDs=[];\n\t\t_gafAssetConfigs=new Map<String,GAFAssetConfig>();\n\t\t_gafAssetConfigSources=new Map<String,GAFBytesInput>();\n\n\t\t_gafAssetsConfigURLs=[];\n\t\t_gafAssetsConfigIndex=0;\n\n\t\t_atlasSourceURLs=[];\n\t\t//_atlasSourceIndex=0;\n\t}\t\n\t\n\tprivate function findAllAtlasURLs():Void\n\t{\n\t\t\n\t\t_atlasSourceURLs=[];\n\n\t\tvar url:String;\n\t\tvar gafTimelineConfigs:Array<GAFTimelineConfig>;\n\n\t\tfor(id in _gafAssetConfigs.keys())\n\t\t{\n\t\t\tgafTimelineConfigs=_gafAssetConfigs[id].timelines;\n\n\t\t\tfor(config in gafTimelineConfigs)\n\t\t\t{\n\t\t\t\tvar folderURL:String=getFolderURL(id);\n\n\t\t\t\tfor(scale in config.allTextureAtlases)\n\t\t\t\t{\n\t\t\t\t\tif(Math.Math.isNaN(_defaultScale)|| MathUtility.equals(scale.scale, _defaultScale))\n\t\t\t\t\t{\n\t\t\t\t\t\tfor(csf in scale.allContentScaleFactors)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(Math.Math.isNaN(_defaultContentScaleFactor)|| MathUtility.equals(csf.csf, _defaultContentScaleFactor))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tfor(source in csf.sources)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\turl=folderURL + source.source;\n\n\t\t\t\t\t\t\t\t\tif(source.source !=\"no_atlas\"\n\t\t\t\t\t\t\t\t\t\t\t&& _atlasSourceURLs.indexOf(url)==-1)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t_atlasSourceURLs.push(url);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif(_atlasSourceURLs.length>0)\n\t\t{\n\t\t\t_loader = new Loader();\n\t\t\t_loader.on(GAFEvent.COMPLETE, createGAFTimelines);\n\t\t\t\n\t\t\tvar url:String;\n\t\t\tvar fileName:String;\n\t\t\t//var taGFX:TAGFXBase;\n\t\t\t\n\t\t\tfor (_atlasSourceIndex in 0..._atlasSourceURLs.length) {\n\t\t\t\turl=_atlasSourceURLs[_atlasSourceIndex];\n\t\t\t\tfileName = url.substring(url.lastIndexOf(\"/\") + 1);\n\t\t\t\t// TODO: verifier s'il ne faut pas plutot le faire à la fin\n\t\t\t\t//taGFX = new TAGFXsourcePixi(url);\n\t\t\t\t_taGFXs[fileName] = new TAGFXsourcePixi(url);//; taGFX;\n\t\t\t\t_loader.add(url);\n\t\t\t\t\n\t\t\t}\n\t\t\t_loader.load();\n\t\t}\n\t\t//else\n\t\t//{\n\t\t\t//createGAFTimelines();\n\t\t//}\n\t}\n\t\n\tprivate static function getFolderURL(url:String):String\n\t{\n\t\tvar cutURL:String=url.split(\"?\")[0];\n\n\t\tvar lastIndex:Int=cutURL.lastIndexOf(\"/\");\n\t\t\n\t\treturn cutURL.substring(0, lastIndex + 1);\n\t}\n\t\n\tprivate function loadUrls(pData:Array<String>):Void {\n\t\tvar lLoader:GAFLoader = new GAFLoader();\n\t\tfor (i in 0...pData.length) lLoader.addGAFFile(pData[i]);\n\t\tlLoader.once(\"complete\", onLoadUrls);\n\t\tlLoader.load();\n\t}\n\t\n\tprivate function onLoadUrls (pLoader:GAFLoader):Void {\n\t\tparseLoader(pLoader);\n\t}\n\t\n\tprivate function parseLoader(pData:GAFLoader):Void\n\t{\n\t\tvar length:Int = pData.contents.length;\n\t\t\n\t\tvar fileName:String;\n\t\t//var taGFX:TAGFXBase;\n\n\t\t//_taGFXs=new Map<TAGFXSourcePNGBA>();\n\n\t\t_gafAssetConfigSources=new Map<String,GAFBytesInput>();\n\t\t_gafAssetsIDs=[];\n\n\t\tfor(i in 0...length)\n\t\t{\n\t\t\tfileName=pData.names[i];\n\t\t\t_gafAssetsIDs.push(fileName);\n\t\t\t_gafAssetConfigSources[fileName]=pData.contents[i];\n\t\t}\n\n\t\tconvertConfig();\n\t}\n\n\tprivate function convertConfig():Void\n\t{\n\t\t//clearTimeout(_configConvertTimeout);\n\t\t//_configConvertTimeout=null;\n\n\t\tvar configID:String = _gafAssetsIDs[_currentConfigIndex];\t\t\n\t\tvar configSource:GAFBytesInput=_gafAssetConfigSources[configID];\n\t\tvar gafAssetID:String=getAssetId(_gafAssetsIDs[_currentConfigIndex]);\n\t\t\n\t\tif(Std.is(configSource, GAFBytesInput))\n\t\t{\n\t\t\tvar converter:BinGAFAssetConfigConverter=new BinGAFAssetConfigConverter(gafAssetID, cast(configSource,GAFBytesInput));\n\t\t\tconverter.defaultScale=_defaultScale;\n\t\t\tconverter.defaultCSF=_defaultContentScaleFactor;\n\t\t\tconverter.ignoreSounds = _ignoreSounds;\n\t\t\tconverter.on(GAFEvent.COMPLETE, onConverted);\n\t\t\tconverter.on(GAFEvent.ERROR, onConvertError);\n\t\t\tconverter.convert(_parseConfigAsync);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthrow \"Error\";\n\t\t}\n\t}\n\t\n\tprivate function createGAFTimelines(event:Dynamic=null):Void\n\t{\n\t\tif (event != null) {\n\t\t\t_loader.off(GAFEvent.COMPLETE, createGAFTimelines);\n\t\t}\n\n\t\tvar gafTimelineConfigs:Array<GAFTimelineConfig>;\n\t\tvar gafAssetConfigID:String;\n\t\tvar gafAssetConfig:GAFAssetConfig=null;\n\t\tvar gafAsset:GAFAsset=null;\n\t\tvar i:Int=0;\n\n\t\t//for(taGFX in _taGFXs)\n\t\t//{\n\t\t\t//taGFX.clearSourceAfterTextureCreated=false;\n\t\t//}\n\t\t\n\t\tfor(i in 0..._gafAssetsIDs.length)\n\t\t{\n\t\t\tgafAssetConfigID = _gafAssetsIDs[i];\n\t\t\t\n\t\t\tgafAssetConfig=_gafAssetConfigs[gafAssetConfigID];\n\t\t\tgafTimelineConfigs=gafAssetConfig.timelines;\n\n\t\t\tgafAsset=new GAFAsset(gafAssetConfig);\n\t\t\tfor(config in gafTimelineConfigs)\n\t\t\t{\t\n\t\t\t\tgafAsset.addGAFTimeline(createTimeline(config, gafAsset));\n\t\t\t}\n\t\t\t\n\t\t\t_gafBundle.addGAFAsset(gafAsset);\n\t\t}\n\n\t\tif(gafAsset==null || gafAsset.timelines.length==0)\n\t\t{\n\t\t\t//zipProcessError(ErrorConstants.TIMELINES_NOT_FOUND);\n\t\t\treturn;\n\t\t}\n\n\t\tif(_gafAssetsIDs.length==1)\n\t\t{\n\t\t\tif (_gafBundle.name==null) _gafBundle.name =gafAssetConfig.id;\n\t\t}\n\n\t\t//if(_soundData.hasSoundsToLoad && !_ignoreSounds)\n\t\t//{\n\t\t\t//_soundData.loadSounds(finalizeParsing, onSoundLoadIOError);\n\t\t//}\n\t\t//else\n\t\t//{\n\t\t\tfinalizeParsing();\n\t\t//}\n\t}\n\t\n\tprivate function finalizeParsing():Void\n\t{\n\t\t_taGFXs=null;\n\t\t_sounds=null;\n\n\t\temit(GAFEvent.COMPLETE,{target:this});\n\t\t\n\t\treturn;\n\t\t\n\t\t//TODO: a supprimer si ca marche\n\t\t\n\t\t//if(_zip && !ZipToGAFAssetConverter.keepZipInRAM)\n\t\t//{\n\t\t\t//var file:FZipFile;\n\t\t\t//var count:Int=_zip.getFileCount();\n\t\t\t//for(i in 0...count)\n\t\t\t//{\n\t\t\t\t//file=_zip.getFileAt(i);\n\t\t\t\t//if(file.filename.toLowerCase().indexOf(\".atf\")==-1\n\t\t\t\t\t\t//&& file.filename.toLowerCase().indexOf(\".png\")==-1)\n\t\t\t\t//{\n\t\t\t\t\t//file.content.clear();\n\t\t\t\t//}\n\t\t\t//}\n\t\t\t//_zip.close();\n\t\t\t//_zip=null;\n\t\t//}\n\n\t\tif(_gfxData.isTexturesReady)\n\t\t{\n\t\t\t//TODO: isTextureready utile ?\n\t\t\temit(GAFEvent.COMPLETE,{target: this});\n\t\t}\n\t\telse\n\t\t{\n\t\t\t_gfxData.on(GAFGFXData.EVENT_TYPE_TEXTURES_READY, onTexturesReady);\n\t\t}\n\t}\n\t\n\tprivate function createTimeline(config:GAFTimelineConfig, asset:GAFAsset):GAFTimeline\n\t{\n\t\tfor(cScale in config.allTextureAtlases)\n\t\t{\n\t\t\t\n\t\t\tif(_defaultScale==null || MathUtility.equals(_defaultScale, cScale.scale))\n\t\t\t{\n\t\t\t\tfor(cCSF in cScale.allContentScaleFactors)\n\t\t\t\t{\n\t\t\t\t\t\n\t\t\t\t\tif(_defaultContentScaleFactor==null || MathUtility.equals(_defaultContentScaleFactor, cCSF.csf))\n\t\t\t\t\t{\n\t\t\t\t\t\tfor(taSource in cCSF.sources)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(taSource.source==\"no_atlas\")\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif(_taGFXs[taSource.source]!=null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar taGFX:TAGFXBase=_taGFXs[taSource.source];\n\t\t\t\t\t\t\t\ttaGFX.textureScale = cCSF.csf;\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t_gfxData.addTAGFX(cScale.scale, cCSF.csf, taSource.id, taGFX);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t//zipProcessError(ErrorConstants.ATLAS_NOT_FOUND + taSource.source + \"' in zip\", 3);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvar timeline:GAFTimeline=new GAFTimeline(config);\n\t\t\n\t\ttimeline.gafgfxData=_gfxData;\n\t\ttimeline.gafSoundData=_soundData;\n\t\ttimeline.gafAsset=asset;\n\t\t\n\t\tswitch(ZipToGAFAssetConverter.actionWithAtlases)\n\t\t{\n\t\t\tcase ZipToGAFAssetConverter.ACTION_LOAD_ALL_IN_GPU_MEMORY:\n\t\t\t\ttimeline.loadInVideoMemory(GAFTimeline.CONTENT_ALL);\n\t\t\tcase ZipToGAFAssetConverter.ACTION_LOAD_IN_GPU_MEMORY_ONLY_DEFAULT:\n\t\t\t\ttimeline.loadInVideoMemory(GAFTimeline.CONTENT_DEFAULT);\n\t\t}\n\n\t\treturn timeline;\n\t}\n\t\n\tprivate function getAssetId(configName:String):String\n\t{\n\t\tvar startIndex:Int=configName.lastIndexOf(\"/\");\n\n\t\tif(startIndex<0)\n\t\t{\n\t\t\tstartIndex=0;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstartIndex++;\n\t\t}\n\n\t\tvar endIndex:Int=configName.lastIndexOf(\".\");\n\n\t\tif(endIndex<0)\n\t\t{\n\t\t\tendIndex=0x7fffffff;\n\t\t}\n\n\t\treturn configName.substring(startIndex, endIndex);\n\t}\n\t\n\t//--------------------------------------------------------------------------\n\t//\n\t// OVERRIDDEN METHODS\n\t//\n\t//--------------------------------------------------------------------------\t\n\t\n\t//--------------------------------------------------------------------------\n\t//\n\t//  EVENT HANDLERS\n\t//\n\t//--------------------------------------------------------------------------\n\n\tprivate function onConvertError(event:Dynamic):Void\n\t{\n\t\tthrow \"ZipToGAFAssetConverter: \" + event.type;\n\t\t\n\t\tif(hasEventListener(GAFEvent.ERROR))\n\t\t{\n\t\t\temit(event);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthrow event.text;\n\t\t}\n\t}\n\n\tprivate function onConverted(event:Dynamic):Void\n\t{\n\n\t\tvar configID:String=_gafAssetsIDs[_currentConfigIndex];\n\t\tvar folderURL:String=getFolderURL(configID);\n\t\t\n\t\tvar converter:BinGAFAssetConfigConverter=cast(event.target,BinGAFAssetConfigConverter);\n\t\t\n\t\tconverter.off(GAFEvent.COMPLETE, onConverted);\n\t\tconverter.off(GAFEvent.ERROR, onConvertError);\n\n\t\t_gafAssetConfigs[configID]=converter.config;\n\t\t\n\t\tvar sounds:Array<CSound>=converter.config.sounds;\n\t\tif(sounds!=null && !_ignoreSounds)\n\t\t{\n\t\t\tfor(i in 0...sounds.length)\n\t\t\t{\n\t\t\t\tsounds[i].source=folderURL + sounds[i].source;\n\t\t\t\t//_soundData.addSound(sounds[i], converter.config.id, _sounds[Std.parseInt(sounds[i].source)]);\n\t\t\t}\n\t\t}\n\n\t\t_currentConfigIndex++;\n\t\t\n\t\tif(_currentConfigIndex>=_gafAssetsIDs.length)\n\t\t{\n\t\t\t\n\t\t\tfindAllAtlasURLs();\n\t\t\t\n\t\t\treturn;\n\t\t\t\n\t\t\t// TODO ? Version AS3\n\t\t\t//if(_gafAssetsConfigURLs!=null && _gafAssetsConfigURLs.length>0)\n\t\t\t//{\n\t\t\t\t//findAllAtlasURLs();\n\t\t\t//}\n\t\t\t//else\n\t\t\t//{\n\t\t\t\t//createGAFTimelines();\n\t\t\t//}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tconvertConfig();\n\t\t\t// TODO ? Version AS3\n\t\t\t//_configConvertTimeout=setTimeout(convertConfig, 40);\n\t\t}\n\t}\n\t\n\tprivate function onTexturesReady(event:Dynamic):Void\n\t{\n\t\t_gfxData.off(GAFGFXData.EVENT_TYPE_TEXTURES_READY, onTexturesReady);\n\n\t\t//TODO: onTextureReady utilisé ?\n\t\temit(GAFEvent.COMPLETE,{target:this});\n\t}\n\t\n\t//--------------------------------------------------------------------------\n\t//\n\t//  GETTERS AND SETTERS\n\t//\n\t//--------------------------------------------------------------------------\t\n\t\n\t/**\n\t * Return converted<code>GAFBundle</code>. If GAF asset file created as single animation - returns null.\n\t */\n\tpublic var gafBundle(get_gafBundle, null):GAFBundle;\n \t\n\t@:keep\n\tprivate function get_gafBundle():GAFBundle\n\t{\n\t\treturn _gafBundle;\n\t}\n\t\n\tstatic function __init__():Void {\n        #if js\n        untyped Object.defineProperty(ZipToGAFAssetConverter.prototype, \"gafBundle\", { get: ZipToGAFAssetConverter.prototype.get_gafBundle });\n        #end\n    }\n\t\n\t\n}","package com.github.haxePixiGAF.data;\n\n/**\n * AS3 Conversion\n * @author Mathieu Anthoine\n * The GAF class defines global GAF library settings\n */\n@:expose\nclass GAF\n{\n\t/**\n\t * Optimize draw calls when animation contain mixed objects with alpha &lt;1 and with alpha=1.\n\t * This is done by setting alpha=0.99 for all objects that has alpha=1.\n\t * In this case all objects will be rendered by one draw call.\n\t * When use99alpha=false the number of draw call may be much more\n\t *(the number of draw calls depends on objects order in display list)\n\t */\n\tpublic static var use99alpha:Bool=false;\n\n\t/**\n\t * Play sounds, triggered by the event \"gafPlaySound\" in a frame of the GAFMovieClip.\n\t */\n\tpublic static var autoPlaySounds:Bool=true;\n\n\t/**\n\t * Indicates if mipMaps will be created for PNG textures(or enabled for ATF textures).\n\t */\n\tpublic static var useMipMaps:Bool=false;\n\n\tpublic static var useDeviceFonts:Bool=false;\n\n\tpublic static var maxAlpha(get_maxAlpha, null):Float;\n \tprivate static function get_maxAlpha():Float\n\t{\n\t\treturn GAF.use99alpha ? 0.99:1;\n\t}\n}","package com.github.haxePixiGAF.data;\n\nimport com.github.haxePixiGAF.data.config.CTextureAtlasCSF;\nimport com.github.haxePixiGAF.data.config.CTextureAtlasElement;\nimport com.github.haxePixiGAF.data.config.CTextureAtlasScale;\nimport com.github.haxePixiGAF.data.textures.TextureWrapper;\nimport com.github.haxePixiGAF.display.GAFScale9Texture;\nimport com.github.haxePixiGAF.display.GAFTexture;\nimport com.github.haxePixiGAF.display.IGAFTexture;\nimport com.github.haxePixiGAF.utils.MathUtility;\nimport pixi.core.math.Matrix;\n\n/**\n * TODO\n * @author Mathieu Anthoine\n * \n */\nclass GAFAsset\n{\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PUBLIC VARIABLES\n\t//\n\t//--------------------------------------------------------------------------\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PRIVATE VARIABLES\n\t//\n\t//--------------------------------------------------------------------------\n\n\tprivate var _config:GAFAssetConfig;\n\n\tprivate var _timelines:Array<GAFTimeline>;\n\tprivate var _timelinesDictionary:Map<String,GAFTimeline>=new Map<String,GAFTimeline>();\n\tprivate var _timelinesByLinkage:Map<String,GAFTimeline>=new Map<String,GAFTimeline>();\n\n\tprivate var _scale:Float;\n\tprivate var _csf:Float;\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  CONSTRUCTOR\n\t//\n\t//--------------------------------------------------------------------------\n\n\tpublic function new(config:GAFAssetConfig)\n\t{\n\t\t_config=config;\n\n\t\t_scale=config.defaultScale;\n\t\t_csf=config.defaultContentScaleFactor;\n\n\t\t_timelines=new Array<GAFTimeline>();\n\t}\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PUBLIC METHODS\n\t//\n\t//--------------------------------------------------------------------------\n\n\t/**\n\t * Disposes all assets in bundle\n\t */\n\tpublic function dispose():Void\n\t{\n\t\tif(_timelines.length>0)\n\t\t{\n\t\t\tfor(timeline in _timelines)\n\t\t\t{\n\t\t\t\ttimeline.dispose();\n\t\t\t}\n\t\t}\n\t\t_timelines=null;\n\n\t\t_config.dispose();\n\t\t_config=null;\n\t}\n\n\t/**  */\n\tpublic function addGAFTimeline(timeline:GAFTimeline):Void\n\t{\n\t\tif(_timelinesDictionary[timeline.id]==null)\n\t\t{\n\t\t\t_timelinesDictionary[timeline.id]=timeline;\n\t\t\t_timelines.push(timeline);\n\n\t\t\tif(timeline.config.linkage!=null)\n\t\t\t{\n\t\t\t\t_timelinesByLinkage[timeline.linkage]=timeline;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthrow \"Bundle error. More then one timeline use id:'\" + timeline.id + \"'\";\n\t\t}\n\t}\n\n\t/**\n\t * Returns<code>GAFTimeline</code>from gaf asset by linkage\n\t * @param linkage linkage in a *.fla file library\n\t * @return<code>GAFTimeline</code>from gaf asset\n\t */\n\tpublic function getGAFTimelineByLinkage(linkage:String):GAFTimeline\n\t{\n\t\tvar gafTimeline:GAFTimeline=_timelinesByLinkage[linkage];\n\n\t\treturn gafTimeline;\n\t}\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PRIVATE METHODS\n\t//\n\t//--------------------------------------------------------------------------\n\n\t/** \n\t * Returns<code>GAFTimeline</code>from gaf asset by ID\n\t * @param id Internal timeline id\n\t * @return<code>GAFTimeline</code>from gaf asset\n\t */\n\t//gaf_private function getGAFTimelineByID(id:String):GAFTimeline\n\tpublic function getGAFTimelineByID(id:String):GAFTimeline\n\t{\n\t\treturn _timelinesDictionary[id];\n\t}\n\n\t/** \n\t * Returns<code>GAFTimeline</code>from gaf asset bundle by linkage\n\t * @param linkage linkage in a *.fla file library\n\t * @return<code>GAFTimeline</code>from gaf asset\n\t */\n\t///*gaf_private*/ function gaf_private_getGAFTimelineByLinkage(linkage:String):GAFTimeline\n\t//{\n\t\t//return _timelinesByLinkage[linkage];\n\t//}\n\n\tpublic function getCustomRegion(linkage:String, ?scale:Float, ?csf:Float):IGAFTexture\n\t{\n\t\tif(scale==null)scale=_scale;\n\t\tif(csf==null) csf=_csf;\n\n\t\tvar gafTexture:IGAFTexture=null;\n\t\tvar atlasScale:CTextureAtlasScale;\n\t\tvar atlasCSF:CTextureAtlasCSF;\n\t\tvar element:CTextureAtlasElement;\n\t\t\n\t\tvar tasl:Int = _config.allTextureAtlases.length;\n\t\t\n\t\tfor(i in 0...tasl)\n\t\t{\n\t\t\tatlasScale=_config.allTextureAtlases[i];\n\t\t\tif(atlasScale.scale==scale)\n\t\t\t{\n\t\t\t\tvar tacsfl:Int = atlasScale.allContentScaleFactors.length;\n\t\t\t\tfor(j in 0...tacsfl)\n\t\t\t\t{\n\t\t\t\t\tatlasCSF=atlasScale.allContentScaleFactors[j];\n\t\t\t\t\tif(atlasCSF.csf==csf)\n\t\t\t\t\t{\n\t\t\t\t\t\telement=atlasCSF.elements.getElementByLinkage(linkage);\n\n\t\t\t\t\t\tif(element!=null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar texture:TextureWrapper=atlasCSF.atlas.getTextureByIDAndAtlasID(element.id, element.atlasID);\n\t\t\t\t\t\t\tvar pivotMatrix:Matrix=element.pivotMatrix;\n\t\t\t\t\t\t\tif(element.scale9Grid !=null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgafTexture=new GAFScale9Texture(id, texture, pivotMatrix, element.scale9Grid);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgafTexture=new GAFTexture(id, texture, pivotMatrix);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn gafTexture;\n\t}\n\n\tpublic function getValidScale(value:Float):Float\n\t{\n\t\tvar index:Int=MathUtility.getItemIndex(_config.scaleValues, value);\n\t\tif(index !=-1)\n\t\t{\n\t\t\treturn _config.scaleValues[index];\n\t\t}\n\t\treturn Math.NaN;\n\t}\n\n\tpublic function hasCSF(value:Float):Bool\n\t{\n\t\treturn MathUtility.getItemIndex(_config.csfValues, value)>=0;\n\t}\n\n\t//--------------------------------------------------------------------------\n\t//\n\t// OVERRIDDEN METHODS\n\t//\n\t//--------------------------------------------------------------------------\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  EVENT HANDLERS\n\t//\n\t//--------------------------------------------------------------------------\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  GETTERS AND SETTERS\n\t//\n\t//--------------------------------------------------------------------------\n\n\t/**\n\t * Returns all<code>GAFTimeline's</code>from gaf asset as<code>Vector</code>\n\t * @return<code>GAFTimeline's</code>from gaf asset\n\t */\n\tpublic var timelines(get_timelines, null):Array<GAFTimeline>;\n \tprivate function get_timelines():Array<GAFTimeline>\n\t{\n\t\treturn _timelines;\n\t}\n\n\tpublic var id(get_id, null):String;\n \tprivate function get_id():String\n\t{\n\t\treturn _config.id;\n\t}\n\n\tpublic var scale(get_scale, set_scale):Float;\n \tprivate function get_scale():Float\n\t{\n\t\treturn _scale;\n\t}\n\n\tprivate function set_scale(value:Float):Float\n\t{\n\t\treturn _scale=value;\n\t}\n\n\tpublic var csf(get_csf, set_csf):Float;\n \tprivate function get_csf():Float\n\t{\n\t\treturn _csf;\n\t}\n\n\tprivate function set_csf(value:Float):Float\n\t{\n\t\treturn _csf=value;\n\t}\n}","package com.github.haxePixiGAF.data;\n\nimport com.github.haxePixiGAF.data.config.CSound;\nimport com.github.haxePixiGAF.data.config.CStage;\nimport com.github.haxePixiGAF.data.config.CTextureAtlasScale;\n\n\n/**\n * AS3 conversion\n * @author Mathieu Anthoine\n */\nclass GAFAssetConfig\n{\n\tpublic static inline var MAX_VERSION:Int=5;\n\n\tprivate var _id:String;\n\tprivate var _compression:Int=0;\n\tprivate var _versionMajor:Int=0;\n\tprivate var _versionMinor:Int=0;\n\tprivate var _fileLength:Int=0;\n\tprivate var _scaleValues:Array<Float>;\n\tprivate var _csfValues:Array<Float>;\n\tprivate var _defaultScale:Float;\n\tprivate var _defaultContentScaleFactor:Float;\n\n\tprivate var _stageConfig:CStage;\n\n\tprivate var _timelines:Array<GAFTimelineConfig>;\n\tprivate var _allTextureAtlases:Array<CTextureAtlasScale>;\n\tprivate var _sounds:Array<CSound>;\n\n\tpublic function new(id:String)\n\t{\n\t\t_id=id;\n\t\t_scaleValues=new Array<Float>();\n\t\t_csfValues=new Array<Float>();\n\n\t\t_timelines=new Array<GAFTimelineConfig>();\n\t\t_allTextureAtlases=new Array<CTextureAtlasScale>();\n\t}\n\n\tpublic function addSound(soundData:CSound):Void\n\t{\n\t\tif (_sounds==null) _sounds =new Array<CSound>();\n\t\t_sounds.push(soundData);\n\t}\n\n\tpublic function dispose():Void\n\t{\n\t\t_allTextureAtlases=null;\n\t\t_stageConfig=null;\n\t\t_scaleValues=null;\n\t\t_csfValues=null;\n\t\t_timelines=null;\n\t\t_sounds=null;\n\t}\n\n\tpublic var compression(get_compression, set_compression):Int;\n \tprivate function get_compression():Int\n\t{\n\t\treturn _compression;\n\t}\n\n\tprivate function set_compression(value:Int):Int\n\t{\n\t\treturn _compression=value;\n\t}\n\n\tpublic var versionMajor(get_versionMajor, set_versionMajor):Int;\n \tprivate function get_versionMajor():Int\n\t{\n\t\treturn _versionMajor;\n\t}\n\n\tprivate function set_versionMajor(value:Int):Int\n\t{\n\t\treturn _versionMajor=value;\n\t}\n\n\tpublic var versionMinor(get_versionMinor, set_versionMinor):Int;\n \tprivate function get_versionMinor():Int\n\t{\n\t\treturn _versionMinor;\n\t}\n\n\tprivate function set_versionMinor(value:Int):Int\n\t{\n\t\treturn _versionMinor=value;\n\t}\n\n\tpublic var fileLength(get_fileLength, set_fileLength):Int;\n \tprivate function get_fileLength():Int\n\t{\n\t\treturn _fileLength;\n\t}\n\n\tprivate function set_fileLength(value:Int):Int\n\t{\n\t\treturn _fileLength=value;\n\t}\n\n\tpublic var scaleValues(get_scaleValues, null):Array<Float>;\n \tprivate function get_scaleValues():Array<Float>\n\t{\n\t\treturn _scaleValues;\n\t}\n\n\tpublic var csfValues(get_csfValues, null):Array<Float>;\n \tprivate function get_csfValues():Array<Float>\n\t{\n\t\treturn _csfValues;\n\t}\n\n\tpublic var defaultScale(get_defaultScale, set_defaultScale):Float;\n \tprivate function get_defaultScale():Float\n\t{\n\t\treturn _defaultScale;\n\t}\n\n\tprivate function set_defaultScale(value:Float):Float\n\t{\n\t\treturn _defaultScale=value;\n\t}\n\n\tpublic var defaultContentScaleFactor(get_defaultContentScaleFactor, set_defaultContentScaleFactor):Float;\n \tprivate function get_defaultContentScaleFactor():Float\n\t{\n\t\treturn _defaultContentScaleFactor;\n\t}\n\n\tprivate function set_defaultContentScaleFactor(value:Float):Float\n\t{\n\t\treturn _defaultContentScaleFactor=value;\n\t}\n\n\tpublic var timelines(get_timelines, null):Array<GAFTimelineConfig>;\n \tprivate function get_timelines():Array<GAFTimelineConfig>\n\t{\n\t\treturn _timelines;\n\t}\n\n\tpublic var allTextureAtlases(get_allTextureAtlases, null):Array<CTextureAtlasScale>;\n \tprivate function get_allTextureAtlases():Array<CTextureAtlasScale>\n\t{\n\t\treturn _allTextureAtlases;\n\t}\n\n\tpublic var stageConfig(get_stageConfig, set_stageConfig):CStage;\n \tprivate function get_stageConfig():CStage\n\t{\n\t\treturn _stageConfig;\n\t}\n\n\tprivate function set_stageConfig(value:CStage):CStage\n\t{\n\t\treturn _stageConfig=value;\n\t}\n\n\tpublic var id(get_id, null):String;\n \tprivate function get_id():String\n\t{\n\t\treturn _id;\n\t}\n\n\tpublic var sounds(get_sounds, null):Array<CSound>;\n \tprivate function get_sounds():Array<CSound>\n\t{\n\t\treturn _sounds;\n\t}\n}","package com.github.haxePixiGAF.data;\nimport com.github.haxePixiGAF.display.IGAFTexture;\nimport com.github.haxePixiGAF.sound.GAFSoundData;\n\n/**\n * GAFBundle is utility class that used to save all converted GAFTimelines from bundle in one place with easy access after conversion complete\n */\n/**\n * TODO\n * @author Mathieu Anthoine\n */\n@:expose(\"GAF.GAFBundle\")\n class GAFBundle\n{\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PUBLIC VARIABLES\n\t//\n\t//--------------------------------------------------------------------------\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PRIVATE VARIABLES\n\t//\n\t//--------------------------------------------------------------------------\n\n\tprivate var _name:String;\n\tprivate var _soundData:GAFSoundData;\n\tprivate var _gafAssets:Array<GAFAsset>;\n\tprivate var _gafAssetsDictionary:Map<String,GAFAsset>;// GAFAsset by SWF name\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  CONSTRUCTOR\n\t//\n\t//--------------------------------------------------------------------------\n\t\n\tpublic function new()\n\t{\n\t\t_gafAssets=new Array<GAFAsset>();\n\t\t_gafAssetsDictionary=new Map<String,GAFAsset>();\n\t}\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PUBLIC METHODS\n\t//\n\t//--------------------------------------------------------------------------\n\n\t/**\n\t * Disposes all assets in bundle\n\t */\n\tpublic function dispose():Void\n\t{\n\t\tif(_gafAssets!=null)\n\t\t{\n\t\t\t//GAFSoundManager.getInstance().stopAll();\n\t\t\t//_soundData.dispose();\n\t\t\t_soundData=null;\n\n\t\t\tfor (gafAsset in _gafAssets)\n\t\t\t{\n\t\t\t\tgafAsset.dispose();\n\t\t\t}\n\t\t\t_gafAssets=null;\n\t\t\t_gafAssetsDictionary=null;\n\t\t}\n\t}\n\n\t/**\n\t * Returns<code>GAFTimeline</code>from bundle by<code>swfName</code>and<code>linkage</code>.\n\t * @param swfName is the name of SWF file where original timeline was located(or the name of the *.gaf config file where it is located).\n\t * @param linkage is the linkage name of the timeline. If you need to get the Main Timeline from SWF use the \"rootTimeline\" linkage name.\n\t * @return<code>GAFTimeline</code>from bundle\n\t */\n\tpublic function getGAFTimeline(swfName:String, linkage:String=\"rootTimeline\"):GAFTimeline\n\t{\n\n\t\tvar gafTimeline:GAFTimeline=null;\n\t\tvar gafAsset:GAFAsset = _gafAssetsDictionary[swfName];\n\t\t\n\t\tif(gafAsset!=null)\n\t\t{\n\t\t\tgafTimeline=gafAsset.getGAFTimelineByLinkage(linkage);\n\t\t}\n\t\t\n\t\treturn gafTimeline;\n\t}\n\n\t/**\n\t * Returns<code>IGAFTexture</code>(custom image)from bundle by<code>swfName</code>and<code>linkage</code>.\n\t * Then it can be used to replace animation parts or create new animation parts.\n\t * @param swfName is the name of SWF file where original Bitmap/Sprite was located(or the name of the *.gaf config file where it is located)\n\t * @param linkage is the linkage name of the Bitmap/Sprite\n\t * @param scale Texture atlas Scale that will be used for<code>IGAFTexture</code>creation. Possible values are values from converted animation config.\n\t * @param csf Texture atlas content scale factor(CSF)that will be used for<code>IGAFTexture</code>creation. Possible values are values from converted animation config.\n\t * @return<code>IGAFTexture</code>(custom image)from bundle.\n\t * @see com.catalystapps.gaf.display.GAFImage\n\t * @see com.catalystapps.gaf.display.GAFImage#changeTexture()\n\t */\n\tpublic function getCustomRegion(swfName:String, linkage:String, ?scale:Float, ?csf:Float):IGAFTexture\n\t{\n\t\t\n\t\tvar gafTexture:IGAFTexture=null;\n\t\tvar gafAsset:GAFAsset = _gafAssetsDictionary[swfName];\n\t\tif(gafAsset!=null)\n\t\t{\n\t\t\tgafTexture = gafAsset.getCustomRegion(linkage, scale, csf);\n\t\t}\n\n\t\treturn gafTexture;\n\t}\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PRIVATE METHODS\n\t//\n\t//--------------------------------------------------------------------------\n\n\tprivate function getGAFTimelineBySWFNameAndID(swfName:String, id:String):GAFTimeline\n\t{\n\t\tvar gafTimeline:GAFTimeline=null;\n\t\tvar gafAsset:GAFAsset=_gafAssetsDictionary[swfName];\n\t\tif(gafAsset!=null)\n\t\t{\n\t\t\tgafTimeline=gafAsset.getGAFTimelineByID(id);\n\t\t}\n\n\t\treturn gafTimeline;\n\t}\n\n\tpublic function addGAFAsset(gafAsset:GAFAsset):Void\n\t{\n\t\t\n\t\tif(_gafAssetsDictionary[gafAsset.id]==null)\n\t\t{\n\t\t\t_gafAssetsDictionary[gafAsset.id]=gafAsset;\n\t\t\t_gafAssets.push(gafAsset);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthrow \"Bundle error. More then one gaf asset use id:'\" + gafAsset.id + \"'\";\n\t\t}\n\t}\n\n\t//--------------------------------------------------------------------------\n\t//\n\t// OVERRIDDEN METHODS\n\t//\n\t//--------------------------------------------------------------------------\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  EVENT HANDLERS\n\t//\n\t//--------------------------------------------------------------------------\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  GETTERS AND SETTERS\n\t//\n\t//--------------------------------------------------------------------------\n\n\tpublic var soundData(get_soundData, set_soundData):GAFSoundData;\n\t\n \tprivate function get_soundData():GAFSoundData\n\t{\n\t\treturn _soundData;\n\t}\n\n\t/**\n\t * \n\t * @param soundData\n\t */\n\tprivate function set_soundData(soundData:GAFSoundData):GAFSoundData\n\t{\n\t\treturn _soundData=soundData;\n\t}\n\n\tpublic var gafAssets(get_gafAssets, null):Array<GAFAsset>;\n \tprivate function get_gafAssets():Array<GAFAsset>\n\t{\n\t\treturn _gafAssets;\n\t}\n\n\t/**\n\t * The name of the bundle. Used in GAFTimelinesManager to identify specific bundle.\n\t * Should be specified by user using corresponding setter or by passing the name as second parameter in GAFTimelinesManager.addGAFBundle().\n\t * The name can be auto-setted by ZipToGAFAssetConverter in two cases:\n\t * 1)If ZipToGAFAssetConverter.id is not empty ZipToGAFAssetConverter sets the bundle name equal to it's id;\n\t * 2)If ZipToGAFAssetConverter.id is empty, but gaf package(zip or folder)contain only one *.gaf config file,\n\t * ZipToGAFAssetConverter sets the bundle name equal to the name of the *.gaf config file.\n\t */\n\tpublic var name(get_name, set_name):String;\n \t\n\t//@:keep\n\tprivate function get_name():String\n\t{\n\t\treturn _name;\n\t}\n\n\t//@:keep\n\tprivate function set_name(name:String):String\n\t{\n\t\treturn _name=name;\n\t}\n\t\n\tstatic function __init__():Void {\n        #if js\n        untyped Object.defineProperty(GAFBundle.prototype, \"name\", { get: untyped GAFBundle.prototype.get_name, set: GAFBundle.prototype.set_name });\n        #end\n    }\n}","package com.github.haxePixiGAF.data;\nimport pixi.core.math.Point;\nimport pixi.core.math.shapes.Rectangle;\n\n/**\n * AS3 Conversion\n * @author Mathieu Anthoine\n * \n */\nclass GAFDebugInformation\n{\n\tpublic static inline var TYPE_POINT:Int=0;\n\tpublic static inline var TYPE_RECT:Int=1;\n\n\tpublic var type:Int=0;\n\tpublic var point:Point;\n\tpublic var rect:Rectangle;\n\tpublic var color:Int=0;\n\tpublic var alpha:Float;\n}","package com.github.haxePixiGAF.data;\nimport com.github.haxePixiGAF.data.tagfx.ITAGFX;\nimport com.github.haxePixiGAF.data.tagfx.TAGFXBase;\nimport com.github.haxePixiGAF.data.textures.TextureWrapper;\nimport com.github.haxePixiGAF.utils.DebugUtility;\nimport pixi.interaction.EventEmitter;\n\n/**\n * Dispatched when he texture is decoded. It can only be used when the callback has been executed.\n */\n//[Event(name=\"texturesReady\", type=\"flash.events.Event\")]\n\n/**\n * Graphical data storage that used by<code>GAFTimeline</code>. It contain all created textures and all\n * saved images as<code>BitmapData</code>.\n * Used as shared graphical data storage between several GAFTimelines if they are used the same texture atlas(bundle created using \"Create bundle\" option)\n */\n\n/**\n * TODO vu le système de chargement, les onReady et autre test de chargement ne servent a rien, a simplifier\n * @author Mathieu Anthoine\n * \n */ \nclass GAFGFXData extends EventEmitter\n{\n\tpublic static inline var EVENT_TYPE_TEXTURES_READY:String=\"texturesReady\";\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PUBLIC VARIABLES\n\t//\n\t//--------------------------------------------------------------------------\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PRIVATE VARIABLES\n\t//\n\t//--------------------------------------------------------------------------\n\n\tprivate var _texturesDictionary:Map<String,Map<String,Map<String,TextureWrapper>>>= new Map<String,Map<String,Map<String,TextureWrapper>>>();\n\tprivate var _taGFXDictionary:Map<String,Map<String,Map<String,ITAGFX>>> = new Map<String,Map<String,Map<String,ITAGFX>>>();\n\n\tprivate var _textureLoadersSet:Map<ITAGFX,ITAGFX>=new Map<ITAGFX,ITAGFX>();\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  CONSTRUCTOR\n\t//\n\t//--------------------------------------------------------------------------\n\n\tpublic function new()\n\t{\n\t\tsuper();\n\t}\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PUBLIC METHODS\n\t//\n\t//--------------------------------------------------------------------------\n\n\tpublic function addTAGFX(scale:Float, csf:Float, imageID:String, taGFX:ITAGFX):Void\n\t{\n\t\t\n\t\tvar lScale:String = Std.string(scale);\n\t\tvar lCsf:String = Std.string(csf);\n\t\t\n\t\tif (_taGFXDictionary[lScale]==null) _taGFXDictionary[lScale]=new Map<String,Map<String,ITAGFX>>();\n\t\tif (_taGFXDictionary[lScale][lCsf]==null) _taGFXDictionary[lScale][lCsf]=new Map<String,ITAGFX>();\n\t\tif (_taGFXDictionary[lScale][lCsf][imageID]==null) _taGFXDictionary[lScale][lCsf][imageID]=taGFX;\n\t}\n\n\tpublic function getTAGFXs(scale:Float, csf:Float):Map<String,ITAGFX>\n\t{\n\t\tvar lScale:String = Std.string(scale);\n\t\tvar lCsf:String = Std.string(csf);\n\t\t\n\t\tif(_taGFXDictionary!=null)\n\t\t{\n\t\t\tif(_taGFXDictionary[lScale]!=null)\n\t\t\t{\n\t\t\t\treturn _taGFXDictionary[lScale][lCsf];\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tpublic function getTAGFX(scale:Float, csf:Float, imageID:String):ITAGFX\n\t{\n\t\tvar lScale:String = Std.string(scale);\n\t\tvar lCsf:String = Std.string(csf);\n\t\t\n\t\tif(_taGFXDictionary!=null)\n\t\t{\n\t\t\tif(_taGFXDictionary[lScale]!=null)\n\t\t\t{\n\t\t\t\tif(_taGFXDictionary[lScale][lCsf]!=null)\n\t\t\t\t{\n\t\t\t\t\treturn _taGFXDictionary[lScale][lCsf][imageID];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Creates textures from all images for specified scale and csf.\n\t * @param scale\n\t * @param csf\n\t * @return {Boolean}\n\t * @see #createTexture()\n\t */\n\tpublic function createTextures(scale:Float, csf:Float):Bool\n\t{\n\t\tvar taGFXs:Map<String,ITAGFX>=getTAGFXs(scale, csf);\n\t\tif(taGFXs!=null)\n\t\t{\n\t\t\tvar lScale:String = Std.string(scale);\n\t\t\tvar lCsf:String = Std.string(csf);\n\t\t\tif (_texturesDictionary[lScale]==null) _texturesDictionary[lScale]=new Map<String,Map<String,TextureWrapper>>();\n\t\t\tif (_texturesDictionary[lScale][lCsf]==null) _texturesDictionary[lScale][lCsf] =new Map<String,TextureWrapper>();\n\n\t\t\tfor(imageAtlasID in taGFXs.keys())\n\t\t\t{\n\t\t\t\tif(taGFXs[imageAtlasID]!=null)\n\t\t\t\t{\n\t\t\t\t\taddTexture(_texturesDictionary[lScale][lCsf], taGFXs[imageAtlasID], imageAtlasID);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Creates texture from specified image.\n\t * @param scale\n\t * @param csf\n\t * @param imageID\n\t * @return {Boolean}\n\t * @see #createTextures()\n\t */\n\tpublic function createTexture(scale:Float, csf:Float, imageID:String):Bool\n\t{\n\t\tvar taGFX:ITAGFX=getTAGFX(scale, csf, imageID);\n\t\tif(taGFX!=null)\n\t\t{\n\t\t\tvar lScale:String = Std.string(scale);\n\t\t\tvar lCsf:String = Std.string(csf);\n\t\t\tif (_texturesDictionary[lScale]==null) _texturesDictionary[lScale]=new Map<String,Map<String,TextureWrapper>>();\n\t\t\tif (_texturesDictionary[lScale][lCsf]==null) _texturesDictionary[lScale][lCsf] =new Map<String,TextureWrapper>();\n\n\t\t\taddTexture(_texturesDictionary[lScale][lCsf], taGFX, imageID);\n\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Returns texture by unique key consist of scale + csf + imageID\n\t */\n\tpublic function getTexture(scale:Float, csf:Float, imageID:String):TextureWrapper\n\t{\n\t\tvar lScale:String = Std.string(scale);\n\t\tvar lCsf:String = Std.string(csf);\n\t\tif(_texturesDictionary!=null)\n\t\t{\n\t\t\t\n\t\t\tif(_texturesDictionary[lScale]!=null)\n\t\t\t{\n\t\t\t\t\n\t\t\t\tif(_texturesDictionary[lScale][lCsf]!=null)\n\t\t\t\t{\n\t\t\t\t\tif(_texturesDictionary[lScale][lCsf][imageID]!=null)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn _texturesDictionary[lScale][lCsf][imageID];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// in case when there is no texture created\n\t\t// create texture and check if it successfully created\n\t\tif(createTexture(scale, csf, imageID))\n\t\t{\n\t\t\treturn _texturesDictionary[lScale][lCsf][imageID];\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Returns textures for specified scale and csf in Dynamic as combination key-value where key - is imageID and value - is Texture\n\t */\n\tpublic function getTextures(scale:Float, csf:Float):Map<String,TextureWrapper>\n\t{\n\t\t\n\t\tvar lScale:String = Std.string(scale);\n\t\tvar lCsf:String = Std.string(csf);\n\t\tif(_texturesDictionary!=null)\n\t\t{\n\t\t\tif(_texturesDictionary[lScale]!=null)\n\t\t\t{\n\t\t\t\treturn _texturesDictionary[lScale][lCsf];\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn null;\n\t}\n\n\t/**\n\t * Dispose specified texture or textures for specified combination scale and csf. If nothing was specified - dispose all texturea\n\t */\n\tpublic function disposeTextures(?scale:Float, ?csf:Float, imageID:String=null):Void\n\t{\n\t\ttrace (\"disposeTextures: TODO\");\n\t\t\n\t\t//if(Math.isNaN(scale))\n\t\t//{\n\t\t\t//for(scaleToDispose in _texturesDictionary)\n\t\t\t//{\n\t\t\t\t//disposeTextures(Std.parseFloat(scaleToDispose));\n\t\t\t//}\n//\n\t\t\t//_texturesDictionary=null;\n\t\t//}\n\t\t//else\n\t\t//{\n\t\t\t//if(Math.isNaN(csf))\n\t\t\t//{\n\t\t\t\t//for(csfToDispose in _texturesDictionary[scale])\n\t\t\t\t//{\n\t\t\t\t\t//disposeTextures(scale, Std.parseFloat(csfToDispose));\n\t\t\t\t//}\n//\n\t\t\t\t//_texturesDictionary.remove(scale);\n\t\t\t//}\n\t\t\t//else\n\t\t\t//{\n\t\t\t\t//if(imageID)\n\t\t\t\t//{\n\t\t\t\t\t//cast(_texturesDictionary[scale][csf][imageID],TempTexture).destroy();\n//\n\t\t\t\t\t//_texturesDictionary[scale][csf].remove(imageID);\n\t\t\t\t//}\n\t\t\t\t//else\n\t\t\t\t//{\n\t\t\t\t\t//if(_texturesDictionary[scale] && _texturesDictionary[scale][csf])\n\t\t\t\t\t//{\n\t\t\t\t\t\t//for(atlasIDToDispose in _texturesDictionary[scale][csf])\n\t\t\t\t\t\t//{\n\t\t\t\t\t\t\t//disposeTextures(scale, csf, atlasIDToDispose);\n\t\t\t\t\t\t//}\n\t\t\t\t\t\t//_texturesDictionary[scale].remove(csf);\n\t\t\t\t\t//}\n\t\t\t\t//}\n\t\t\t//}\n\t\t//}\n\t}\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PRIVATE METHODS\n\t//\n\t//--------------------------------------------------------------------------\n\n\tprivate function addTexture(dictionary:Map<String,TextureWrapper>, tagfx:ITAGFX, imageID:String):Void\n\t{\n\t\t\n\t\tif(DebugUtility.RENDERING_DEBUG)\n\t\t{\n\t\t\t//var bitmapData:BitmapData;\n\t\t\t//if(tagfx.sourceType==TAGFXBase.SOURCE_TYPE_BITMAP_DATA)\n\t\t\t//{\n\t\t\t\t//bitmapData=setGrayScale(tagfx.source.clone());\n\t\t\t//}\n//\n\t\t\t//if(bitmapData)\n\t\t\t//{\n\t\t\t\t//dictionary[imageID]=Texture.fromBitmapData(bitmapData, GAF.useMipMaps, false, tagfx.textureScale, tagfx.textureFormat);\n\t\t\t//}\n\t\t\t//else\n\t\t\t//{\n\t\t\t\tif(tagfx.texture!=null)\n\t\t\t\t{\n\t\t\t\t\t//dictionary[imageID]=Texture.fromTexture(tagfx.texture);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthrow \"GAFGFXData texture for rendering not found!\";\n\t\t\t\t}\n\t\t\t//}\n\t\t}\n\t\telse if(dictionary[imageID]==null)\n\t\t{\n\t\t\tif(!tagfx.ready)\n\t\t\t{\n\t\t\t\t_textureLoadersSet[tagfx] = tagfx;\n\t\t\t\ttagfx.on(TAGFXBase.EVENT_TYPE_TEXTURE_READY, onTextureReady);\n\t\t\t}\n\n\t\t\tdictionary[imageID] = TextureWrapper.fromTexture(tagfx.texture);\n\t\t\t//dictionary[imageID] = cast Texture.fromImage(tagfx.texture.baseTexture.imageUrl);\n\t\t}\n\t}\n\n\t//private function setGrayScale(image:BitmapData):BitmapData\n\t//{\n\t\t//var matrix:Array<Dynamic>=[\n\t\t\t//0.26231, 0.51799, 0.0697, 0, 81.775,\n\t\t\t//0.26231, 0.51799, 0.0697, 0, 81.775,\n\t\t\t//0.26231, 0.51799, 0.0697, 0, 81.775,\n\t\t\t//0, 0, 0, 1, 0];\n//\n\t\t//var filter:ColorMatrixFilter=new ColorMatrixFilter(matrix);\n\t\t//image.applyFilter(image, new Rectangle(0, 0, image.width, image.height), new Point(0, 0), filter);\n//\n\t\t//return image;\n\t//}\n\n\t//--------------------------------------------------------------------------\n\t//\n\t// OVERRIDDEN METHODS\n\t//\n\t//--------------------------------------------------------------------------\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  EVENT HANDLERS\n\t//\n\t//--------------------------------------------------------------------------\n\tprivate function onTextureReady(event:Dynamic):Void\n\t{\n\t\tvar tagfx:ITAGFX=cast (event.target,ITAGFX);\n\t\ttagfx.off(TAGFXBase.EVENT_TYPE_TEXTURE_READY, onTextureReady);\n\n\t\t_textureLoadersSet.remove(tagfx);\n\n\t\tif(isTexturesReady)\n\t\t\temit(EVENT_TYPE_TEXTURES_READY);\n\t}\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  GETTERS AND SETTERS\n\t//\n\t//--------------------------------------------------------------------------\n\n\tpublic var isTexturesReady(get_isTexturesReady, null):Bool;\n \tprivate function get_isTexturesReady():Bool\n\t{\n\t\tvar empty:Bool=true;\n\t\tfor(tagfx in _textureLoadersSet)\n\t\t{\n\t\t\tempty=false;\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\ttrace (\"isTexturesReady\",empty);\n\n\t\treturn empty;\n\t}\n}","package com.github.haxePixiGAF.data;\n\nimport com.github.haxePixiGAF.data.config.CAnimationObject;\nimport com.github.haxePixiGAF.data.config.CTextureAtlas;\nimport com.github.haxePixiGAF.data.config.CTextureAtlasCSF;\nimport com.github.haxePixiGAF.data.config.CTextureAtlasScale;\nimport com.github.haxePixiGAF.data.converters.ErrorConstants;\nimport com.github.haxePixiGAF.data.textures.TextureWrapper;\nimport com.github.haxePixiGAF.display.IGAFTexture;\nimport com.github.haxePixiGAF.sound.GAFSoundData;\n\n\n/**\n *<p>GAFTimeline represents converted GAF file. It is like a library symbol in Flash IDE that contains all information about GAF animation.\n * It is used to create<code>GAFMovieClip</code>that is ready animation object to be used in starling display list</p>\n */\n/**\n * TODO\n * @author Mathieu Anthoine\n */\n@:expose(\"GAF.GAFTimeline\")\nclass GAFTimeline\n{\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PUBLIC VARIABLES\n\t//\n\t//--------------------------------------------------------------------------\n\n\tpublic static inline var CONTENT_ALL:String=\"contentAll\";\n\tpublic static inline var CONTENT_DEFAULT:String=\"contentDefault\";\n\tpublic static inline var CONTENT_SPECIFY:String=\"contentSpecify\";\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PRIVATE VARIABLES\n\t//\n\t//--------------------------------------------------------------------------\n\n\tprivate var _config:GAFTimelineConfig;\n\n\tprivate var _gafSoundData:GAFSoundData;\n\t\n\tprivate var _gafgfxData:GAFGFXData;\n\tprivate var _gafAsset:GAFAsset;\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  CONSTRUCTOR\n\t//\n\t//--------------------------------------------------------------------------\n\n\t/**\n\t * Creates an GAFTimeline object\n\t * @param timelineConfig GAF timeline config\n\t */\n\tpublic function new(timelineConfig:GAFTimelineConfig)\n\t{\n\t\t_config=timelineConfig;\n\t}\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PUBLIC METHODS\n\t//\n\t// --------------------------------------------------------------------------\n\n\t/**\n\t * Returns GAF Texture by name of an instance inside a timeline.\n\t * @param animationObjectName name of an instance inside a timeline\n\t * @return GAF Texture\n\t */\n\tpublic function getTextureByName(animationObjectName:String):IGAFTexture\n\t{\n\t\tvar instanceID:String=_config.getNamedPartID(animationObjectName);\n\t\tif(instanceID!=null)\n\t\t{\n\t\t\tvar part:CAnimationObject=_config.animationObjects.getAnimationObject(instanceID);\n\t\t\tif(part!=null)\n\t\t\t{\n\t\t\t\treturn textureAtlas.getTexture(part.regionID);\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * Disposes the underlying GAF timeline config\n\t */\n\tpublic function dispose():Void\n\t{\n\t\t_config.dispose();\n\t\t_config=null;\n\t\t_gafAsset=null;\n\t\t_gafgfxData=null;\n\t\t_gafSoundData=null;\n\t}\n\n\t/**\n\t * Load all graphical data connected with this asset in device GPU memory. Used in case of manual control of GPU memory usage.\n\t * Works only in case when all graphical data stored in RAM.\n\t *\n\t * @param content content type that should be loaded. Available types:<code>CONTENT_ALL, CONTENT_DEFAULT, CONTENT_SPECIFY</code>\n\t * @param scale in case when specified content is<code>CONTENT_SPECIFY</code>scale and csf should be set in required values\n\t * @param csf in case when specified content is<code>CONTENT_SPECIFY</code>scale and csf should be set in required values\n\t */\n\tpublic function loadInVideoMemory(content:String=\"contentDefault\", ?pScale:Float, ?csf:Float):Void\n\t{\n\n\t\tif(_config.textureAtlas==null || _config.textureAtlas.contentScaleFactor.elements==null)\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\tvar textures:Map<String,TextureWrapper>;\n\t\tvar csfConfig:CTextureAtlasCSF;\n\n\t\tswitch(content)\n\t\t{\n\t\t\tcase CONTENT_ALL:\n\t\t\t\tfor(scaleConfig in _config.allTextureAtlases)\n\t\t\t\t{\n\t\t\t\t\tfor(csfConfig in scaleConfig.allContentScaleFactors)\n\t\t\t\t\t{\n\t\t\t\t\t\t_gafgfxData.createTextures(scaleConfig.scale, csfConfig.csf);\n\n\t\t\t\t\t\ttextures=_gafgfxData.getTextures(scaleConfig.scale, csfConfig.csf);\n\t\t\t\t\t\tif(csfConfig.atlas==null && textures!=null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcsfConfig.atlas=CTextureAtlas.createFromTextures(textures, csfConfig);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn;\n\n\t\t\tcase CONTENT_DEFAULT:\n\t\t\t\tcsfConfig=_config.textureAtlas.contentScaleFactor;\n\n\t\t\t\tif(csfConfig==null)\n\t\t\t\t{\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\n\t\t\t\tif(csfConfig.atlas==null && _gafgfxData.createTextures(scale, contentScaleFactor))\n\t\t\t\t{\n\t\t\t\t\tcsfConfig.atlas = CTextureAtlas.createFromTextures(_gafgfxData.getTextures(scale, contentScaleFactor), csfConfig);\n\t\t\t\t}\n\n\t\t\t\treturn;\n\n\t\t\tcase CONTENT_SPECIFY:\n\t\t\t\tcsfConfig=getCSFConfig(pScale, csf);\n\n\t\t\t\tif(csfConfig==null)\n\t\t\t\t{\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif(csfConfig.atlas==null && _gafgfxData.createTextures(pScale, csf))\n\t\t\t\t{\n\t\t\t\t\tcsfConfig.atlas=CTextureAtlas.createFromTextures(_gafgfxData.getTextures(pScale, csf), csfConfig);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t}\n\t}\n\n\t/**\n\t * Unload all all graphical data connected with this asset from device GPU memory. Used in case of manual control of video memory usage\n\t *\n\t * @param content content type that should be loaded(CONTENT_ALL, CONTENT_DEFAULT, CONTENT_SPECIFY)\n\t * @param scale in case when specified content is CONTENT_SPECIFY scale and csf should be set in required values\n\t * @param csf in case when specified content is CONTENT_SPECIFY scale and csf should be set in required values\n\t */\n\tpublic function unloadFromVideoMemory(content:String=\"contentDefault\", ?pScale:Float, ?csf:Float):Void\n\t{\n\t\tif(_config.textureAtlas==null || _config.textureAtlas.contentScaleFactor.elements==null)\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\tvar csfConfig:CTextureAtlasCSF;\n\n\t\tswitch(content)\n\t\t{\n\t\t\tcase CONTENT_ALL:\n\t\t\t\t_gafgfxData.disposeTextures();\n\t\t\t\t_config.dispose();\n\t\t\t\treturn;\n\t\t\tcase CONTENT_DEFAULT:\n\t\t\t\t_gafgfxData.disposeTextures(pScale, contentScaleFactor);\n\t\t\t\t_config.textureAtlas.contentScaleFactor.dispose();\n\t\t\t\treturn;\n\t\t\tcase CONTENT_SPECIFY:\n\t\t\t\tcsfConfig=getCSFConfig(pScale, csf);\n\t\t\t\tif(csfConfig!=null)\n\t\t\t\t{\n\t\t\t\t\t_gafgfxData.disposeTextures(pScale, csf);\n\t\t\t\t\tcsfConfig.dispose();\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t}\n\t}\n\n\tpublic function startSound(frame:Int):Void\n\t{\n\t\t//var frameSoundConfig:CFrameSound=_config.getSound(frame);\n\t\t//if(frameSoundConfig)\n\t\t//{\n\t\t\t//if(frameSoundConfig.action==CFrameSound.ACTION_STOP)\n\t\t\t//{\n\t\t\t\t//GAFSoundManager.getInstance().stop(frameSoundConfig.soundID, _config.assetID);\n\t\t\t//}\n\t\t\t//else\n\t\t\t//{\n\t\t\t\t//var sound:Sound;\n\t\t\t\t//if(frameSoundConfig.linkage)\n\t\t\t\t//{\n\t\t\t\t\t//sound=gafSoundData.getSoundByLinkage(frameSoundConfig.linkage);\n\t\t\t\t//}\n\t\t\t\t//else\n\t\t\t\t//{\n\t\t\t\t\t//sound=gafSoundData.getSound(frameSoundConfig.soundID, _config.assetID);\n\t\t\t\t//}\n\t\t\t\t//var soundOptions:Dynamic={};\n\t\t\t\t//soundOptions[\"continue\"]=frameSoundConfig.action==CFrameSound.ACTION_CONTINUE;\n\t\t\t\t//soundOptions[\"repeatCount\"]=frameSoundConfig.repeatCount;\n\t\t\t\t//GAFSoundManager.getInstance().play(sound, frameSoundConfig.soundID, soundOptions, _config.assetID);\n\t\t\t//}\n\t\t//}\n\t}\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PRIVATE METHODS\n\t//\n\t//--------------------------------------------------------------------------\n\n\tprivate function getCSFConfig(scale:Float, csf:Float):CTextureAtlasCSF\n\t{\n\t\tvar scaleConfig:CTextureAtlasScale=_config.getTextureAtlasForScale(scale);\n\n\t\tif(scaleConfig!=null)\n\t\t{\n\t\t\tvar csfConfig:CTextureAtlasCSF=scaleConfig.getTextureAtlasForCSF(csf);\n\t\t\t\n\t\t\tif(csfConfig!=null)\n\t\t\t{\n\t\t\t\treturn csfConfig;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t//--------------------------------------------------------------------------\n\t//\n\t// OVERRIDDEN METHODS\n\t//\n\t//--------------------------------------------------------------------------\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  EVENT HANDLERS\n\t//\n\t//--------------------------------------------------------------------------\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  GETTERS AND SETTERS\n\t//\n\t//--------------------------------------------------------------------------\n\n\t/**\n\t * Timeline identifier(name given at animation's upload or assigned by developer)\n\t */\n\tpublic var id(get_id, null):String;\n\t\n \t@:keep\n\tprivate function get_id():String\n\t{\n\t\treturn config.id;\n\t}\n\n\t/**\n\t * Timeline linkage in a *.fla file library\n\t */\n\tpublic var linkage(get_linkage, null):String;\n\t\n\t@:keep\n \tprivate function get_linkage():String\n\t{\n\t\treturn config.linkage;\n\t}\n\n\t/**\n\t * Asset identifier(name given at animation's upload or assigned by developer)\n\t */\n\tpublic var assetID(get_assetID, null):String;\n \tprivate function get_assetID():String\n\t{\n\t\treturn config.assetID;\n\t}\n\n\tpublic var textureAtlas(get_textureAtlas, null):CTextureAtlas;\n \tprivate function get_textureAtlas():CTextureAtlas\n\t{\n\t\t\n\t\tif(_config.textureAtlas==null)\n\t\t{\n\t\t\treturn null;\n\t\t}\n\n\t\tif(_config.textureAtlas.contentScaleFactor.atlas==null)\n\t\t{\n\t\t\tloadInVideoMemory(CONTENT_DEFAULT);\n\t\t}\n\t\t\n\t\treturn _config.textureAtlas.contentScaleFactor.atlas;\n\t}\n\n\tpublic var config(get_config, null):GAFTimelineConfig;\n \tprivate function get_config():GAFTimelineConfig\n\t{\n\t\treturn _config;\n\t}\n\n\t////////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * Texture atlas scale that will be used for<code>GAFMovieClip</code>creation. To create<code>GAFMovieClip's</code>\n\t * with different scale assign appropriate scale to<code>GAFTimeline</code>and only after that instantiate<code>GAFMovieClip</code>.\n\t * Possible values are values from converted animation config. They are depends from project settings on site converter\n\t */\n\t@:keep\n\tprivate function set_scale(value:Float):Float\n\t{\n\t\tvar scale:Float=_gafAsset.getValidScale(value);\n\t\tif(Math.isNaN(scale))\n\t\t{\n\t\t\tthrow ErrorConstants.SCALE_NOT_FOUND;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t_gafAsset.scale=scale;\n\t\t}\n\n\t\tif(_config.textureAtlas==null)\n\t\t{\n\t\t\t//return;\n\t\t\treturn null;\n\t\t}\n\n\t\tvar csf:Float=contentScaleFactor;\n\t\tvar taScale:CTextureAtlasScale=_config.getTextureAtlasForScale(scale);\n\t\tif(taScale!=null)\n\t\t{\n\t\t\t_config.textureAtlas=taScale;\n\n\t\t\tvar taCSF:CTextureAtlasCSF=_config.textureAtlas.getTextureAtlasForCSF(csf);\n\n\t\t\tif(taCSF!=null)\n\t\t\t{\n\t\t\t\t_config.textureAtlas.contentScaleFactor=taCSF;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthrow \"There is no csf \" + csf + \"in timeline config for scalse \" + scale;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthrow \"There is no scale \" + scale + \"in timeline config\";\n\t\t}\n\t\t\n\t\treturn _gafAsset.scale;\n\t}\n\n\tpublic var scale(get_scale, set_scale):Float;\n\t\n\t@:keep\n \tprivate function get_scale():Float\n\t{\n\t\treturn _gafAsset.scale;\n\t}\n\n\t/**\n\t * Texture atlas content scale factor(csf)that will be used for<code>GAFMovieClip</code>creation. To create<code>GAFMovieClip's</code>\n\t * with different csf assign appropriate csf to<code>GAFTimeline</code>and only after that instantiate<code>GAFMovieClip</code>.\n\t * Possible values are values from converted animation config. They are depends from project settings on site converter\n\t */\n\t@:keep\n\tprivate function set_contentScaleFactor(csf:Float):Float\n\t{\n\t\tif(_gafAsset.hasCSF(csf))\n\t\t{\n\t\t\t_gafAsset.csf=csf;\n\t\t}\n\n\t\tif(_config.textureAtlas==null)\n\t\t{\n\t\t\treturn null;\n\t\t}\n\n\t\tvar taCSF:CTextureAtlasCSF=_config.textureAtlas.getTextureAtlasForCSF(csf);\n\n\t\tif(taCSF!=null)\n\t\t{\n\t\t\t_config.textureAtlas.contentScaleFactor=taCSF;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthrow \"There is no csf \" + csf + \"in timeline config\";\n\t\t}\n\t\t\n\t\treturn _gafAsset.csf;\n\t}\n\n\tpublic var contentScaleFactor(get_contentScaleFactor, set_contentScaleFactor):Float;\n\t\n\t@:keep\n \tprivate function get_contentScaleFactor():Float\n\t{\n\t\treturn _gafAsset.csf;\n\t}\n\n\t/**\n\t * Graphical data storage that used by<code>GAFTimeline</code>.\n\t */\n\t@:keep\n\tprivate function set_gafgfxData(gafgfxData:GAFGFXData):GAFGFXData\n\t{\n\t\treturn _gafgfxData=gafgfxData;\n\t}\n\n\tpublic var gafgfxData(get_gafgfxData, set_gafgfxData):GAFGFXData;\n\n \t@:keep\n\tprivate function get_gafgfxData():GAFGFXData\n\t{\n\t\treturn _gafgfxData;\n\t}\n\n\tpublic var gafAsset(get_gafAsset, set_gafAsset):GAFAsset;\n \tprivate function get_gafAsset():GAFAsset\n\t{\n\t\treturn _gafAsset;\n\t}\n\n\tprivate function set_gafAsset(asset:GAFAsset):GAFAsset\n\t{\n\t\treturn _gafAsset=asset;\n\t}\n\n\tpublic var gafSoundData(get_gafSoundData, set_gafSoundData):GAFSoundData;\n \tprivate function get_gafSoundData():GAFSoundData\n\t{\n\t\treturn _gafSoundData;\n\t}\n\n\tprivate function set_gafSoundData(gafSoundData:GAFSoundData):GAFSoundData\n\t{\n\t\treturn _gafSoundData=gafSoundData;\n\t}\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  STATIC METHODS\n\t//\n\t//--------------------------------------------------------------------------\n\t\n\tstatic function __init__():Void {\n        #if js\n        untyped Object.defineProperty(GAFTimeline.prototype, \"id\", { get: GAFTimeline.prototype.get_id });\n        untyped Object.defineProperty(GAFTimeline.prototype, \"linkage\", { get: GAFTimeline.prototype.get_linkage });\n        untyped Object.defineProperty(GAFTimeline.prototype, \"scale\", { get: GAFTimeline.prototype.get_scale, set: GAFTimeline.prototype.set_scale });\n        untyped Object.defineProperty(GAFTimeline.prototype, \"contentScaleFactor\", { get: GAFTimeline.prototype.get_contentScaleFactor, set: GAFTimeline.prototype.set_contentScaleFactor });\n        untyped Object.defineProperty(GAFTimeline.prototype, \"gafgfxData\", { get: GAFTimeline.prototype.get_gafgfxData, set: GAFTimeline.prototype.set_gafgfxData });\n        #end\n    }\n}","package com.github.haxePixiGAF.data;\n\nimport com.github.haxePixiGAF.data.config.CAnimationFrames;\nimport com.github.haxePixiGAF.data.config.CAnimationObjects;\nimport com.github.haxePixiGAF.data.config.CAnimationSequences;\nimport com.github.haxePixiGAF.data.config.CStage;\nimport com.github.haxePixiGAF.data.config.CTextFieldObjects;\nimport com.github.haxePixiGAF.data.config.CTextureAtlasScale;\nimport com.github.haxePixiGAF.utils.MathUtility;\nimport pixi.core.math.Point;\nimport pixi.core.math.shapes.Rectangle;\n\n/**\n * TODO\n * @author Mathieu Anthoine\n */\nclass GAFTimelineConfig\n{\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PUBLIC VARIABLES\n\t//\n\t//--------------------------------------------------------------------------\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PRIVATE VARIABLES\n\t//\n\t//--------------------------------------------------------------------------\n\tprivate var _version:String;\n\tprivate var _stageConfig:CStage;\n\n\tprivate var _id:String;\n\tprivate var _assetID:String;\n\n\tprivate var _allTextureAtlases:Array<CTextureAtlasScale>;\n\tprivate var _textureAtlas:CTextureAtlasScale;\n\n\tprivate var _animationConfigFrames:CAnimationFrames;\n\tprivate var _animationObjects:CAnimationObjects;\n\tprivate var _animationSequences:CAnimationSequences;\n\tprivate var _textFields:CTextFieldObjects;\n\n\tprivate var _namedParts:Map<String,String>;\n\tprivate var _linkage:String;\n\n\tprivate var _debugRegions:Array<GAFDebugInformation>;\n\n\tprivate var _warnings:Array<String>;\n\tprivate var _framesCount:Int=0;\n\tprivate var _bounds:Rectangle;\n\tprivate var _pivot:Point;\n\t//private var _sounds:Dictionary;\n\tprivate var _disposed:Bool=false;\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  CONSTRUCTOR\n\t//\n\t//--------------------------------------------------------------------------\n\n\tpublic function new(version:String)\n\t{\n\t\t_version=version;\n\n\t\t_animationConfigFrames=new CAnimationFrames();\n\t\t_animationObjects=new CAnimationObjects();\n\t\t_animationSequences=new CAnimationSequences();\n\t\t_textFields=new CTextFieldObjects();\n\t\t//_sounds=new Dictionary();\n\t}\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PUBLIC METHODS\n\t//\n\t//--------------------------------------------------------------------------\n\n\tpublic function dispose():Void\n\t{\n\t\tfor(cTextureAtlasScale in _allTextureAtlases)\n\t\t{\n\t\t\tcTextureAtlasScale.dispose();\n\t\t}\n\t\t_allTextureAtlases=null;\n\n\t\t_animationConfigFrames=null;\n\t\t_animationSequences=null;\n\t\t_animationObjects=null;\n\t\t_textureAtlas=null;\n\t\t_textFields=null;\n\t\t_namedParts=null;\n\t\t_warnings=null;\n\t\t_bounds=null;\n\t\t//_sounds=null;\n\t\t_pivot=null;\n\t\t\n\t\t_disposed=true;\n\t}\n\n\tpublic function getTextureAtlasForScale(scale:Float):CTextureAtlasScale\n\t{\n\t\tfor(cTextureAtlas in _allTextureAtlases)\n\t\t{\n\t\t\tif(MathUtility.equals(cTextureAtlas.scale, scale))\n\t\t\t{\n\t\t\t\treturn cTextureAtlas;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t//public function addSound(data:Dynamic, frame:Int):Void\n\t//{\n\t\t//_sounds[frame]=new CFrameSound(data);\n\t//}\n//\n\t//public function getSound(frame:Int):CFrameSound\n\t//{\n\t\t//return _sounds[frame];\n\t//}\n\n\tpublic function addWarning(text:String):Void\n\t{\n\t\tif(text==null)\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\tif(_warnings==null)\n\t\t{\n\t\t\t_warnings=new Array<String>();\n\t\t}\n\n\t\tif(_warnings.indexOf(text)==-1)\n\t\t{\n\t\t\ttrace(text);\n\t\t\t_warnings.push(text);\n\t\t}\n\t}\n\n\tpublic function getNamedPartID(name:String):String\n\t{\n\t\tfor(id in _namedParts)\n\t\t{\n\t\t\tif(_namedParts[id]==name)\n\t\t\t{\n\t\t\t\treturn id;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PRIVATE METHODS\n\t//\n\t//--------------------------------------------------------------------------\n\n\t//--------------------------------------------------------------------------\n\t//\n\t// OVERRIDDEN METHODS\n\t//\n\t//--------------------------------------------------------------------------\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  EVENT HANDLERS\n\t//\n\t//--------------------------------------------------------------------------\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  GETTERS AND SETTERS\n\t//\n\t//--------------------------------------------------------------------------\n\n\tpublic var textureAtlas(get_textureAtlas, set_textureAtlas):CTextureAtlasScale;\n \tprivate function get_textureAtlas():CTextureAtlasScale\n\t{\n\t\treturn _textureAtlas;\n\t}\n\n\tprivate function set_textureAtlas(textureAtlas:CTextureAtlasScale):CTextureAtlasScale\n\t{\n\t\treturn _textureAtlas=textureAtlas;\n\t}\n\n\tpublic var animationObjects(get_animationObjects, set_animationObjects):CAnimationObjects;\n \tprivate function get_animationObjects():CAnimationObjects\n\t{\n\t\treturn _animationObjects;\n\t}\n\n\tprivate function set_animationObjects(animationObjects:CAnimationObjects):CAnimationObjects\n\t{\n\t\treturn _animationObjects=animationObjects;\n\t}\n\n\tpublic var animationConfigFrames(get_animationConfigFrames, set_animationConfigFrames):CAnimationFrames;\n \tprivate function get_animationConfigFrames():CAnimationFrames\n\t{\n\t\treturn _animationConfigFrames;\n\t}\n\n\tprivate function set_animationConfigFrames(animationConfigFrames:CAnimationFrames):CAnimationFrames\n\t{\n\t\treturn _animationConfigFrames=animationConfigFrames;\n\t}\n\n\tpublic var animationSequences(get_animationSequences, set_animationSequences):CAnimationSequences;\n \tprivate function get_animationSequences():CAnimationSequences\n\t{\n\t\treturn _animationSequences;\n\t}\n\n\tprivate function set_animationSequences(animationSequences:CAnimationSequences):CAnimationSequences\n\t{\n\t\treturn _animationSequences=animationSequences;\n\t}\n\n\tpublic var textFields(get_textFields, set_textFields):CTextFieldObjects;\n \tprivate function get_textFields():CTextFieldObjects\n\t{\n\t\treturn _textFields;\n\t}\n\n\tprivate function set_textFields(textFields:CTextFieldObjects):CTextFieldObjects\n\t{\n\t\treturn _textFields=textFields;\n\t}\n\n\tpublic var allTextureAtlases(get_allTextureAtlases, set_allTextureAtlases):Array<CTextureAtlasScale>;\n \tprivate function get_allTextureAtlases():Array<CTextureAtlasScale>\n\t{\n\t\treturn _allTextureAtlases;\n\t}\n\n\tprivate function set_allTextureAtlases(allTextureAtlases:Array<CTextureAtlasScale>):Array<CTextureAtlasScale>\n\t{\n\t\treturn _allTextureAtlases=allTextureAtlases;\n\t}\n\n\tpublic var version(get_version, null):String;\n \tprivate function get_version():String\n\t{\n\t\treturn _version;\n\t}\n\n\tpublic var debugRegions(get_debugRegions, set_debugRegions):Array<GAFDebugInformation>;\n \tprivate function get_debugRegions():Array<GAFDebugInformation>\n\t{\n\t\treturn _debugRegions;\n\t}\n\n\tprivate function set_debugRegions(debugRegions:Array<GAFDebugInformation>):Array<GAFDebugInformation>\n\t{\n\t\treturn _debugRegions=debugRegions;\n\t}\n\n\tpublic var warnings(get_warnings, null):Array<String>;\n \tprivate function get_warnings():Array<String>\n\t{\n\t\treturn _warnings;\n\t}\n\n\tpublic var id(get_id, set_id):String;\n \tprivate function get_id():String\n\t{\n\t\treturn _id;\n\t}\n\n\tprivate function set_id(value:String):String\n\t{\n\t\treturn _id=value;\n\t}\n\n\tpublic var assetID(get_assetID, set_assetID):String;\n \tprivate function get_assetID():String\n\t{\n\t\treturn _assetID;\n\t}\n\n\tprivate function set_assetID(value:String):String\n\t{\n\t\treturn _assetID=value;\n\t}\n\n\tpublic var namedParts(get_namedParts, set_namedParts):Map<String,String>;\n \tprivate function get_namedParts():Map<String,String>\n\t{\n\t\treturn _namedParts;\n\t}\n\n\tprivate function set_namedParts(value:Map<String,String>):Map<String,String>\n\t{\n\t\treturn _namedParts=value;\n\t}\n\n\tpublic var linkage(get_linkage, set_linkage):String;\n \tprivate function get_linkage():String\n\t{\n\t\treturn _linkage;\n\t}\n\n\tprivate function set_linkage(value:String):String\n\t{\n\t\treturn _linkage=value;\n\t}\n\n\tpublic var stageConfig(get_stageConfig, set_stageConfig):CStage;\n \tprivate function get_stageConfig():CStage\n\t{\n\t\treturn _stageConfig;\n\t}\n\n\tprivate function set_stageConfig(stageConfig:CStage):CStage\n\t{\n\t\treturn _stageConfig=stageConfig;\n\t}\n\n\tpublic var framesCount(get_framesCount, set_framesCount):Int;\n \tprivate function get_framesCount():Int\n\t{\n\t\treturn _framesCount;\n\t}\n\n\tprivate function set_framesCount(value:Int):Int\n\t{\n\t\treturn _framesCount=value;\n\t}\n\n\tpublic var bounds(get_bounds, set_bounds):Rectangle;\n \tprivate function get_bounds():Rectangle\n\t{\n\t\treturn _bounds;\n\t}\n\n\tprivate function set_bounds(value:Rectangle):Rectangle\n\t{\n\t\treturn _bounds=value;\n\t}\n\n\tpublic var pivot(get_pivot, set_pivot):Point;\n \tprivate function get_pivot():Point\n\t{\n\t\treturn _pivot;\n\t}\n\n\tprivate function set_pivot(value:Point):Point\n\t{\n\t\treturn _pivot=value;\n\t}\n\n\tpublic var disposed(get_disposed, null):Bool;\n \tprivate function get_disposed():Bool {\n\t\treturn _disposed;\n\t}\n}","package com.github.haxePixiGAF.data.config;\n\n/**\n * AS3 Conversion\n * @author Mathieu Anthoine\n * \n */\nclass CAnimationFrame\n{\n\t// --------------------------------------------------------------------------\n\t//\n\t// PUBLIC VARIABLES\n\t//\n\t// --------------------------------------------------------------------------\n\t// --------------------------------------------------------------------------\n\t//\n\t// PRIVATE VARIABLES\n\t//\n\t// --------------------------------------------------------------------------\n\tprivate var _instancesDictionary:Map<String,CAnimationFrameInstance>;\n\tprivate var _instances:Array<CAnimationFrameInstance>;\n\tprivate var _actions:Array<CFrameAction>;\n\n\tprivate var _frameNumber:Int=0;\n\n\t// --------------------------------------------------------------------------\n\t//\n\t// CONSTRUCTOR\n\t//\n\t// --------------------------------------------------------------------------\n\tpublic function new(frameNumber:Int)\n\t{\n\t\t_frameNumber=frameNumber;\n\n\t\t_instancesDictionary=new Map<String,CAnimationFrameInstance>();\n\t\t_instances=new Array<CAnimationFrameInstance>();\n\t}\n\n\t// --------------------------------------------------------------------------\n\t//\n\t// PUBLIC METHODS\n\t//\n\t// --------------------------------------------------------------------------\n\tpublic function clone(frameNumber:Int):CAnimationFrame\n\t{\n\t\tvar result:CAnimationFrame=new CAnimationFrame(frameNumber);\n\n\t\tfor(instance in _instances)\n\t\t{\n\t\t\tresult.addInstance(instance);\n\t\t\t// .clone());\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tpublic function addInstance(instance:CAnimationFrameInstance):Void\n\t{\n\t\tif(_instancesDictionary[instance.id]!=null)\n\t\t{\n\t\t\tif(instance.alpha!=null)\n\t\t\t{\n\t\t\t\t_instances[_instances.indexOf(_instancesDictionary[instance.id])]=instance;\n\n\t\t\t\t_instancesDictionary[instance.id]=instance;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Poping the last element and set it as the removed element\n\t\t\t\tvar index:Int=_instances.indexOf(_instancesDictionary[instance.id]);\n\t\t\t\t// If index is last element, just pop\n\t\t\t\tif(index==(_instances.length - 1))\n\t\t\t\t{\n\t\t\t\t\t_instances.pop();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t_instances[index]=_instances.pop();\n\t\t\t\t}\n\n\t\t\t\t_instancesDictionary.remove(instance.id);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t_instances.push(instance);\n\n\t\t\t_instancesDictionary[instance.id]=instance;\n\t\t}\n\t}\n\n\tpublic function addAction(action:CFrameAction):Void\n\t{\n\t\tif (_actions==null) _actions =new Array<CFrameAction>();\n\t\t_actions.push(action);\n\t}\n\n\tpublic function sortInstances():Void\n\t{\n\t\t_instances.sort(sortByZIndex);\n\t}\n\n\tpublic function getInstanceByID(id:String):CAnimationFrameInstance\n\t{\n\t\treturn _instancesDictionary[id];\n\t}\n\n\t// --------------------------------------------------------------------------\n\t//\n\t// PRIVATE METHODS\n\t//\n\t// --------------------------------------------------------------------------\n\tprivate function sortByZIndex(instance1:CAnimationFrameInstance, instance2:CAnimationFrameInstance):Int\n\t{\n\t\tif(instance1.zIndex<instance2.zIndex)\n\t\t{\n\t\t\treturn -1;\n\t\t}\n\t\telse if(instance1.zIndex>instance2.zIndex)\n\t\t{\n\t\t\treturn 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t// --------------------------------------------------------------------------\n\t//\n\t// OVERRIDDEN METHODS\n\t//\n\t// --------------------------------------------------------------------------\n\t// --------------------------------------------------------------------------\n\t//\n\t// EVENT HANDLERS\n\t//\n\t// --------------------------------------------------------------------------\n\t// --------------------------------------------------------------------------\n\t//\n\t// GETTERS AND SETTERS\n\t//\n\t// --------------------------------------------------------------------------\n\tpublic var instances(get_instances, null):Array<CAnimationFrameInstance>;\n \tprivate function get_instances():Array<CAnimationFrameInstance>\n\t{\n\t\treturn _instances;\n\t}\n\n\tpublic var frameNumber(get_frameNumber, null):Int;\n \tprivate function get_frameNumber():Int\n\t{\n\t\treturn _frameNumber;\n\t}\n\tpublic var actions(get_actions, null):Array<CFrameAction>;\n \tprivate function get_actions():Array<CFrameAction>\n\t{\n\t\treturn _actions;\n\t}\n}","package com.github.haxePixiGAF.data.config;\n\nimport pixi.core.math.Matrix;\n\nusing com.github.haxePixiGAF.utils.MatrixUtility;\n\n/**\n * AS3 Conversion\n * @author Mathieu Anthoine\n * \n */\nclass CAnimationFrameInstance\n{\n\t// --------------------------------------------------------------------------\n\t//\n\t// PUBLIC VARIABLES\n\t//\n\t// --------------------------------------------------------------------------\n\t// --------------------------------------------------------------------------\n\t//\n\t// PRIVATE VARIABLES\n\t//\n\t// --------------------------------------------------------------------------\n\tprivate var _id:String;\n\tprivate var _zIndex:Int=0;\n\tprivate var _matrix:Matrix;\n\tprivate var _alpha:Float;\n\tprivate var _maskID:String;\n\tprivate var _filter:CFilter;\n\n\tprivate static var tx:Float;\n\tprivate static var ty:Float;\n\n\t// --------------------------------------------------------------------------\n\t//\n\t// CONSTRUCTOR\n\t//\n\t// --------------------------------------------------------------------------\n\tpublic function new(id:String)\n\t{\n\t\t_id=id;\n\t}\n\n\t// --------------------------------------------------------------------------\n\t//\n\t// PUBLIC METHODS\n\t//\n\t// --------------------------------------------------------------------------\n\tpublic function clone():CAnimationFrameInstance\n\t{\n\t\tvar result:CAnimationFrameInstance=new CAnimationFrameInstance(_id);\n\n\t\tvar filterCopy:CFilter=null;\n\n\t\tif(_filter!=null)\n\t\t{\n\t\t\tfilterCopy=_filter.clone();\n\t\t}\n\n\t\tresult.update(_zIndex, _matrix.clone(), _alpha, _maskID, filterCopy);\n\n\t\treturn result;\n\t}\n\n\tpublic function update(zIndex:Int, matrix:Matrix, alpha:Float, maskID:String, filter:CFilter):Void\n\t{\n\t\t_zIndex=zIndex;\n\t\t_matrix=matrix;\n\t\t_alpha=alpha;\n\t\t_maskID=maskID;\n\t\t_filter=filter;\n\t}\n\n\tpublic function getTransformMatrix(pivotMatrix:Matrix, scale:Float):Matrix\n\t{\n\t\tvar result:Matrix=pivotMatrix.clone();\n\t\ttx=_matrix.tx;\n\t\tty=_matrix.ty;\n\t\t_matrix.tx *=scale;\n\t\t_matrix.ty *=scale;\n\t\tresult.concat(_matrix);\n\t\t_matrix.tx=tx;\n\t\t_matrix.ty=ty;\n\n\t\treturn result;\n\t}\n\n\tpublic function applyTransformMatrix(transformationMatrix:Matrix, pivotMatrix:Matrix, scale:Float):Void\n\t{\n\t\ttransformationMatrix.copyFrom(pivotMatrix);\n\t\ttx=_matrix.tx;\n\t\tty=_matrix.ty;\n\t\t_matrix.tx *=scale;\n\t\t_matrix.ty *= scale;\n\t\ttransformationMatrix.concat(_matrix);\n\t\t_matrix.tx=tx;\n\t\t_matrix.ty=ty;\n\t}\n\n\tpublic function calculateTransformMatrix(transformationMatrix:Matrix, pivotMatrix:Matrix, scale:Float):Matrix\n\t{\n\t\tapplyTransformMatrix(transformationMatrix, pivotMatrix, scale);\n\t\treturn transformationMatrix;\n\t}\n\n\t// --------------------------------------------------------------------------\n\t//\n\t// PRIVATE METHODS\n\t//\n\t// --------------------------------------------------------------------------\n\t// --------------------------------------------------------------------------\n\t//\n\t// OVERRIDDEN METHODS\n\t//\n\t// --------------------------------------------------------------------------\n\t// --------------------------------------------------------------------------\n\t//\n\t// EVENT HANDLERS\n\t//\n\t// --------------------------------------------------------------------------\n\t// --------------------------------------------------------------------------\n\t//\n\t// GETTERS AND SETTERS\n\t//\n\t// --------------------------------------------------------------------------\n\tpublic var id(get_id, null):String;\n \tprivate function get_id():String\n\t{\n\t\treturn _id;\n\t}\n\n\tpublic var matrix(get_matrix, null):Matrix;\n \tprivate function get_matrix():Matrix\n\t{\n\t\treturn _matrix;\n\t}\n\n\tpublic var alpha(get_alpha, null):Float;\n \tprivate function get_alpha():Float\n\t{\n\t\treturn _alpha;\n\t}\n\n\tpublic var maskID(get_maskID, null):String;\n \tprivate function get_maskID():String\n\t{\n\t\treturn _maskID;\n\t}\n\n\tpublic var filter(get_filter, null):CFilter;\n \tprivate function get_filter():CFilter\n\t{\n\t\treturn _filter;\n\t}\n\n\tpublic var zIndex(get_zIndex, null):Int;\n \tprivate function get_zIndex():Int\n\t{\n\t\treturn _zIndex;\n\t}\n}","package com.github.haxePixiGAF.data.config;\n\n/**\n * AS3 conversion\n * @author Mathieu Anthoine\n * \n */\nclass CAnimationFrames\n{\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PUBLIC VARIABLES\n\t//\n\t//--------------------------------------------------------------------------\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PRIVATE VARIABLES\n\t//\n\t//--------------------------------------------------------------------------\n\n\tprivate var _frames:Array<CAnimationFrame>;\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  CONSTRUCTOR\n\t//\n\t//--------------------------------------------------------------------------\n\n\tpublic function new()\n\t{\n\t\t_frames=new Array<CAnimationFrame>();\n\t}\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PUBLIC METHODS\n\t//\n\t//--------------------------------------------------------------------------\n\n\tpublic function addFrame(frame:CAnimationFrame):Void\n\t{\n\t\t_frames.push(frame);\n\t}\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PRIVATE METHODS\n\t//\n\t//--------------------------------------------------------------------------\n\n\t//--------------------------------------------------------------------------\n\t//\n\t// OVERRIDDEN METHODS\n\t//\n\t//--------------------------------------------------------------------------\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  EVENT HANDLERS\n\t//\n\t//--------------------------------------------------------------------------\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  GETTERS AND SETTERS\n\t//\n\t//--------------------------------------------------------------------------\n\n\tpublic var frames(get_frames, null):Array<CAnimationFrame>;\n \tprivate function get_frames():Array<CAnimationFrame>\n\t{\n\t\treturn _frames;\n\t}\n\n}","package com.github.haxePixiGAF.data.config;\nimport pixi.core.math.Point;\n\n/**\n * AS3 Conversion\n * @author Mathieu Anthoine\n * \n */\nclass CAnimationObject\n{\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PUBLIC VARIABLES\n\t//\n\t//--------------------------------------------------------------------------\n\n\tpublic static inline var TYPE_TEXTURE:String=\"texture\";\n\tpublic static inline var TYPE_TEXTFIELD:String=\"textField\";\n\tpublic static inline var TYPE_TIMELINE:String=\"timeline\";\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PRIVATE VARIABLES\n\t//\n\t//--------------------------------------------------------------------------\n\n\tprivate var _instanceID:String;\n\tprivate var _regionID:String;\n\tprivate var _type:String;\n\tprivate var _mask:Bool=false;\n\tprivate var _maxSize:Point;\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  CONSTRUCTOR\n\t//\n\t//--------------------------------------------------------------------------\n\n\tpublic function new(instanceID:String, regionID:String, type:String, mask:Bool)\n\t{\n\t\t_instanceID=instanceID;\n\t\t_regionID=regionID;\n\t\t_type=type;\n\t\t_mask=mask;\n\t}\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PUBLIC METHODS\n\t//\n\t//--------------------------------------------------------------------------\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PRIVATE METHODS\n\t//\n\t//--------------------------------------------------------------------------\n\n\t//--------------------------------------------------------------------------\n\t//\n\t// OVERRIDDEN METHODS\n\t//\n\t//--------------------------------------------------------------------------\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  EVENT HANDLERS\n\t//\n\t//--------------------------------------------------------------------------\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  GETTERS AND SETTERS\n\t//\n\t//--------------------------------------------------------------------------\n\n\tpublic var instanceID(get_instanceID, null):String;\n \tprivate function get_instanceID():String\n\t{\n\t\treturn _instanceID;\n\t}\n\n\tpublic var regionID(get_regionID, null):String;\n \tprivate function get_regionID():String\n\t{\n\t\treturn _regionID;\n\t}\n\n\tpublic var mask(get_mask, null):Bool;\n \tprivate function get_mask():Bool\n\t{\n\t\treturn _mask;\n\t}\n\n\tpublic var type(get_type, null):String;\n \tprivate function get_type():String\n\t{\n\t\treturn _type;\n\t}\n\n\tpublic var maxSize(get_maxSize, set_maxSize):Point;\n \tprivate function get_maxSize():Point\n\t{\n\t\treturn _maxSize;\n\t}\n\n\tprivate function set_maxSize(value:Point):Point\n\t{\n\t\treturn _maxSize=value;\n\t}\n}","package com.github.haxePixiGAF.data.config;\n\n\n/**\n * AS3 Conversion\n * @author Mathieu Anthoine\n * \n */\nclass CAnimationObjects\n{\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PUBLIC VARIABLES\n\t//\n\t//--------------------------------------------------------------------------\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PRIVATE VARIABLES\n\t//\n\t//--------------------------------------------------------------------------\n\n\tprivate var _animationObjectsDictionary:Map<String,CAnimationObject>;\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  CONSTRUCTOR\n\t//\n\t//--------------------------------------------------------------------------\n\n\tpublic function new()\n\t{\n\t\t_animationObjectsDictionary=new Map<String,CAnimationObject>();\n\t}\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PUBLIC METHODS\n\t//\n\t//--------------------------------------------------------------------------\n\n\tpublic function addAnimationObject(animationObject:CAnimationObject):Void\n\t{\n\t\tif(_animationObjectsDictionary[animationObject.instanceID]==null)\n\t\t{\n\t\t\t_animationObjectsDictionary[animationObject.instanceID]=animationObject;\n\t\t}\n\t}\n\n\tpublic function getAnimationObject(instanceID:String):CAnimationObject\n\t{\n\t\tif(_animationObjectsDictionary[instanceID]!=null)\n\t\t{\n\t\t\treturn _animationObjectsDictionary[instanceID];\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PRIVATE METHODS\n\t//\n\t//--------------------------------------------------------------------------\n\n\t//--------------------------------------------------------------------------\n\t//\n\t// OVERRIDDEN METHODS\n\t//\n\t//--------------------------------------------------------------------------\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  EVENT HANDLERS\n\t//\n\t//--------------------------------------------------------------------------\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  GETTERS AND SETTERS\n\t//\n\t//--------------------------------------------------------------------------\n\n\tpublic var animationObjectsDictionary(get_animationObjectsDictionary, null):Map<String,CAnimationObject>;\n \tprivate function get_animationObjectsDictionary():Map<String,CAnimationObject>\n\t{\n\t\treturn _animationObjectsDictionary;\n\t}\n\n}","package com.github.haxePixiGAF.data.config;\n\n\n/**\n * AS3 Conversion\n * @author Mathieu Anthoine\n * Data object that describe sequence\n */\nclass CAnimationSequence\n{\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PUBLIC VARIABLES\n\t//\n\t//--------------------------------------------------------------------------\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PRIVATE VARIABLES\n\t//\n\t//--------------------------------------------------------------------------\n\n\tprivate var _id:String;\n\tprivate var _startFrameNo:Int=0;\n\tprivate var _endFrameNo:Int=0;\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  CONSTRUCTOR\n\t//\n\t//--------------------------------------------------------------------------\n\n\t/**\n\t * \n\t */\n\tpublic function new(id:String, startFrameNo:Int, endFrameNo:Int)\n\t{\n\t\t_id=id;\n\t\t_startFrameNo=startFrameNo;\n\t\t_endFrameNo=endFrameNo;\n\t}\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PUBLIC METHODS\n\t//\n\t//--------------------------------------------------------------------------\n\n\t/**\n\t * \n\t */\n\tpublic function isSequenceFrame(frameNo:Int):Bool\n\t{\n\t\t// first frame is \"1\" !!!\n\n\t\tif(frameNo>=_startFrameNo && frameNo<=_endFrameNo)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PRIVATE METHODS\n\t//\n\t//--------------------------------------------------------------------------\n\n\t//--------------------------------------------------------------------------\n\t//\n\t// OVERRIDDEN METHODS\n\t//\n\t//--------------------------------------------------------------------------\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  EVENT HANDLERS\n\t//\n\t//--------------------------------------------------------------------------\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  GETTERS AND SETTERS\n\t//\n\t//--------------------------------------------------------------------------\n\n\t/**\n\t * Sequence ID\n\t * @return Sequence ID\n\t */\n\tpublic var id(get_id, null):String;\n \tprivate function get_id():String\n\t{\n\t\treturn _id;\n\t}\n\n\t/**\n\t * Sequence start frame number\n\t * @return Sequence start frame number\n\t */\n\tpublic var startFrameNo(get_startFrameNo, null):Int;\n \tprivate function get_startFrameNo():Int\n\t{\n\t\treturn _startFrameNo;\n\t}\n\n\t/**\n\t * Sequence end frame number\n\t * @return Sequence end frame number\n\t */\n\tpublic var endFrameNo(get_endFrameNo, null):Int;\n \tprivate function get_endFrameNo():Int\n\t{\n\t\treturn _endFrameNo;\n\t}\n\n}","package com.github.haxePixiGAF.data.config;\n\n\n/**\n * AS3 conversion\n * @author Mathieu Anthoine\n * \n */\nclass CAnimationSequences\n{\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PUBLIC VARIABLES\n\t//\n\t//--------------------------------------------------------------------------\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PRIVATE VARIABLES\n\t//\n\t//--------------------------------------------------------------------------\n\n\tprivate var _sequences:Array<CAnimationSequence>;\n\n\tprivate var _sequencesStartDictionary:Dynamic;\n\tprivate var _sequencesEndDictionary:Dynamic;\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  CONSTRUCTOR\n\t//\n\t//--------------------------------------------------------------------------\n\n\tpublic function new()\n\t{\n\t\t_sequences=new Array<CAnimationSequence>();\n\n\t\t_sequencesStartDictionary={};\n\t\t_sequencesEndDictionary={};\n\t}\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PUBLIC METHODS\n\t//\n\t//--------------------------------------------------------------------------\n\n\tpublic function addSequence(sequence:CAnimationSequence):Void\n\t{\n\t\t_sequences.push(sequence);\n\n\t\tif(!_sequencesStartDictionary[sequence.startFrameNo])\n\t\t{\n\t\t\t_sequencesStartDictionary[sequence.startFrameNo]=sequence;\n\t\t}\n\n\t\tif(!_sequencesEndDictionary[sequence.endFrameNo])\n\t\t{\n\t\t\t_sequencesEndDictionary[sequence.endFrameNo]=sequence;\n\t\t}\n\t}\n\n\tpublic function getSequenceStart(frameNo:Int):CAnimationSequence\n\t{\n\t\treturn _sequencesStartDictionary[frameNo];\n\t}\n\n\tpublic function getSequenceEnd(frameNo:Int):CAnimationSequence\n\t{\n\t\treturn _sequencesEndDictionary[frameNo];\n\t}\n\n\tpublic function getStartFrameNo(sequenceID:String):Int\n\t{\n\t\tvar result:Int=0;\n\n\t\tfor(sequence in _sequences)\n\t\t{\n\t\t\tif(sequence.id==sequenceID)\n\t\t\t{\n\t\t\t\treturn sequence.startFrameNo;\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tpublic function getSequenceByID(id:String):CAnimationSequence\n\t{\n\t\tfor(sequence in _sequences)\n\t\t{\n\t\t\tif(sequence.id==id)\n\t\t\t{\n\t\t\t\treturn sequence;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tpublic function getSequenceByFrame(frameNo:Int):CAnimationSequence\n\t{\n\t\tfor(i in 0..._sequences.length)\n\t\t{\n\t\t\tif(_sequences[i].isSequenceFrame(frameNo))\n\t\t\t{\n\t\t\t\treturn _sequences[i];\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PRIVATE METHODS\n\t//\n\t//--------------------------------------------------------------------------\n\n\t//--------------------------------------------------------------------------\n\t//\n\t// OVERRIDDEN METHODS\n\t//\n\t//--------------------------------------------------------------------------\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  EVENT HANDLERS\n\t//\n\t//--------------------------------------------------------------------------\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  GETTERS AND SETTERS\n\t//\n\t//--------------------------------------------------------------------------\n\n\tpublic var sequences(get_sequences, null):Array<CAnimationSequence>;\n \tprivate function get_sequences():Array<CAnimationSequence>\n\t{\n\t\treturn _sequences;\n\t}\n\n}","package com.github.haxePixiGAF.data.config;\n\n/**\n * AS3 Conversion\n * @author Mathieu Anthoine\n * \n */\nclass CBlurFilterData implements ICFilterData\n{\n\tpublic var blurX:Float;\n\tpublic var blurY:Float;\n\tpublic var color:Int=0;\n\tpublic var angle:Float=0;\n\tpublic var distance:Float=0;\n\tpublic var strength:Float=0;\n\tpublic var alpha:Float=1;\n\tpublic var inner:Bool=false;\n\tpublic var knockout:Bool=false;\n\tpublic var resolution:Float=1;\n\t\n\tpublic function new () {}\n\t\n\tpublic function clone():ICFilterData\n\t{\n\t\t\n\t\tvar copy:CBlurFilterData=new CBlurFilterData();\n\t\t\n\t\tcopy.blurX=blurX;\n\t\tcopy.blurY=blurY;\n\t\tcopy.color=color;\n\t\tcopy.angle=angle;\n\t\tcopy.distance=distance;\n\t\tcopy.strength=strength;\n\t\tcopy.alpha=alpha;\n\t\tcopy.inner=inner;\n\t\tcopy.knockout=knockout;\n\t\tcopy.resolution=resolution;\n\t\t\n\t\treturn copy;\n\t}\n\n}","package com.github.haxePixiGAF.data.config;\nimport com.github.haxePixiGAF.utils.VectorUtility;\n\n/**\n * AS3 Conversion\n * @author Mathieu Anthoine\n * \n */\nclass CColorMatrixFilterData implements ICFilterData\n{\n\tpublic var matrix:Array<Float>=new Array<Float>();\n\n\tpublic function new () {}\n\t\n\tpublic function clone():ICFilterData\n\t{\n\t\tvar copy:CColorMatrixFilterData=new CColorMatrixFilterData();\n\n\t\tVectorUtility.copyMatrix(copy.matrix, matrix);\n\n\t\treturn copy;\n\t}\n}","package com.github.haxePixiGAF.utils;\n\n/**\n * AS3 Conversion\n * @author Mathieu Anthoine\n * \n */\nclass VectorUtility\n{\n\n\tpublic static inline function fillMatrix(v:Array<Float>,\n\t\t\ta00:Float, a01:Float, a02:Float, a03:Float, a04:Float,\n\t\t\ta10:Float, a11:Float, a12:Float, a13:Float, a14:Float,\n\t\t\ta20:Float, a21:Float, a22:Float, a23:Float, a24:Float,\n\t\t\ta30:Float, a31:Float, a32:Float, a33:Float, a34:Float):Void\n\t{\n\t\tv[0]=a00;v[1]=a01;v[2]=a02;v[3]=a03;v[4]=a04;\n\t\tv[5]=a10;v[6]=a11;v[7]=a12;v[8]=a13;v[9]=a14;\n\t\tv[10]=a20;v[11]=a21;v[12]=a22;v[13]=a23;v[14]=a24;\n\t\tv[15]=a30;v[16]=a31;v[17]=a32;v[18]=a33;v[19]=a34;\n\t}\n\n\tpublic static inline function copyMatrix(source:Array<Float>, dest:Array<Float>):Void\n\t{\n\t\tvar l:Int=dest.length;\n\t\tfor(i in 0...l)\n\t\t{\n\t\t\tsource[i]=dest[i];\n\t\t}\n\t}\n}","package com.github.haxePixiGAF.data.config;\nimport com.github.haxePixiGAF.utils.VectorUtility;\n\n\n/**\n * AS3 Conversion\n * @author Mathieu Anthoine\n * \n */\nclass CFilter\n{\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PUBLIC VARIABLES\n\t//\n\t//--------------------------------------------------------------------------\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PRIVATE VARIABLES\n\t//\n\t//--------------------------------------------------------------------------\n\n\tprivate var _filterConfigs:Array<ICFilterData>=new Array<ICFilterData>();\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  CONSTRUCTOR\n\t//\n\t//--------------------------------------------------------------------------\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PUBLIC METHODS\n\t//\n\t//--------------------------------------------------------------------------\n\n\tpublic function new () {}\n\t\n\tpublic function clone():CFilter\n\t{\n\t\tvar result:CFilter=new CFilter();\n\n\t\tfor(filterData in _filterConfigs)\n\t\t{\n\t\t\tresult.filterConfigs.push(filterData.clone());\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tpublic function addBlurFilter(blurX:Float, blurY:Float):String\n\t{\n\t\tvar filterData:CBlurFilterData=new CBlurFilterData();\n\t\tfilterData.blurX=blurX;\n\t\tfilterData.blurY=blurY;\n\t\tfilterData.color=-1;\n\n\t\t_filterConfigs.push(filterData);\n\n\t\treturn \"\";\n\t}\n\n\tpublic function addGlowFilter(blurX:Float, blurY:Float, color:Int, alpha:Float,\n\t\t\t\t\t\t\t\t  strength:Float=1, inner:Bool=false, knockout:Bool=false):String\n\t{\n\t\tvar filterData:CBlurFilterData=new CBlurFilterData();\n\t\tfilterData.blurX=blurX;\n\t\tfilterData.blurY=blurY;\n\t\tfilterData.color=color;\n\t\tfilterData.alpha=alpha;\n\t\tfilterData.strength=strength;\n\t\tfilterData.inner=inner;\n\t\tfilterData.knockout=knockout;\n\n\t\t_filterConfigs.push(filterData);\n\n\t\treturn \"\";\n\t}\n\n\tpublic function addDropShadowFilter(blurX:Float, blurY:Float, color:Int, alpha:Float, angle:Float, distance:Float,\n\t\t\t\t\t\t\t\t\t\tstrength:Float=1, inner:Bool=false, knockout:Bool=false):String\n\t{\n\t\tvar filterData:CBlurFilterData=new CBlurFilterData();\n\t\tfilterData.blurX=blurX;\n\t\tfilterData.blurY=blurY;\n\t\tfilterData.color=color;\n\t\tfilterData.alpha=alpha;\n\t\tfilterData.angle=angle;\n\t\tfilterData.distance=distance;\n\t\tfilterData.strength=strength;\n\t\tfilterData.inner=inner;\n\t\tfilterData.knockout=knockout;\n\n\t\t_filterConfigs.push(filterData);\n\n\t\treturn \"\";\n\t}\n\n\tpublic function addColorTransform(params:Array<Float>):Void\n\t{\n\t\tif(getColorMatrixFilter()!=null)\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\tvar filterData:CColorMatrixFilterData=new CColorMatrixFilterData();\n\t\tVectorUtility.fillMatrix(filterData.matrix,\n\t\t\t\tparams[1], 0, 0, 0, params[2],\n\t\t\t\t0, params[3], 0, 0, params[4],\n\t\t\t\t0, 0, params[5], 0, params[6],\n\t\t\t\t\t\t\t   0, 0, 0, 1, 0);\n\t\t_filterConfigs.push(filterData);\n\t}\n\n\tpublic function addColorMatrixFilter(params:Array<Float>):String\n\t{\n\t\tvar i:Int=0;\n\n\t\tfor(i in 0...params.length)\n\t\t{\n\t\t\tif(i % 5==4)\n\t\t\t{\n\t\t\t\tparams[i]=params[i] / 255;\n\t\t\t}\n\t\t}\n\n//\t\t\tvar colorMatrixFilterConfig:CColorMatrixFilterData=getColorMatrixFilter();\n//\n//\t\t\tif(colorMatrixFilterConfig)\n//\t\t\t{\n//\t\t\t\treturn WarningConstants.CANT_COLOR_ADJ_CT;\n//\t\t\t}\n//\t\t\telse\n//\t\t\t{\n\t\t\tvar colorMatrixFilterConfig:CColorMatrixFilterData=new CColorMatrixFilterData();\n\t\t\tVectorUtility.copyMatrix(colorMatrixFilterConfig.matrix, params);\n\t\t\t_filterConfigs.push(colorMatrixFilterConfig);\n//\t\t\t}\n\n\t\treturn \"\";\n\t}\n\n\tpublic function getBlurFilter():CBlurFilterData\n\t{\n\t\tfor(filterConfig in _filterConfigs)\n\t\t{\n\t\t\tif(Std.is(filterConfig, CBlurFilterData))\n\t\t\t{\n\t\t\t\treturn cast(filterConfig,CBlurFilterData);\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PRIVATE METHODS\n\t//\n\t//--------------------------------------------------------------------------\n\n\tprivate function getColorMatrixFilter():CColorMatrixFilterData\n\t{\n\t\tfor(filterConfig in _filterConfigs)\n\t\t{\n\t\t\tif(Std.is(filterConfig, CColorMatrixFilterData))\n\t\t\t{\n\t\t\t\treturn cast(filterConfig,CColorMatrixFilterData);\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t//--------------------------------------------------------------------------\n\t//\n\t// OVERRIDDEN METHODS\n\t//\n\t//--------------------------------------------------------------------------\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  EVENT HANDLERS\n\t//\n\t//--------------------------------------------------------------------------\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  GETTERS AND SETTERS\n\t//\n\t//--------------------------------------------------------------------------\n\n\tpublic var filterConfigs(get_filterConfigs, null):Array<ICFilterData>;\n \tprivate function get_filterConfigs():Array<ICFilterData>\n\t{\n\t\treturn _filterConfigs;\n\t}\n\n}","package com.github.haxePixiGAF.data.config;\n\n/**\n * AS3 conversion\n * @author Mathieu Anthoine\n * \n */\nclass CFrameAction\n{\n\tpublic var type:Int=0;\n\tpublic var scope:String;\n\tpublic var params:Array<String>=new Array<String>();\n\t\n\tpublic static inline var STOP:Int=0;\n\tpublic static inline var PLAY:Int=1;\n\tpublic static inline var GOTO_AND_STOP:Int=2;\n\tpublic static inline var GOTO_AND_PLAY:Int=3;\n\tpublic static inline var DISPATCH_EVENT:Int = 4;\n\t\n\tpublic function new () {}\n}","package com.github.haxePixiGAF.data.config;\n\n/**\n * TODO\n * @author Mathieu Anthoine\n * \n */\nclass CSound\n{\n\tpublic static inline var GAF_PLAY_SOUND:String=\"gafPlaySound\";\n\tpublic static inline var WAV:Int=0;\n\tpublic static inline var MP3:Int=1;\n\n\tpublic var soundID:Int=0;\n\tpublic var linkageName:String;\n\tpublic var source:String;\n\tpublic var format:Int=0;\n\tpublic var rate:Int=0;\n\tpublic var sampleSize:Int=0;\n\tpublic var sampleCount:Int=0;\n\tpublic var stereo:Bool=false;\n\t//public var sound:Sound;\n}","package com.github.haxePixiGAF.data.config;\n\n/**\n * AS3 Conversion\n * @author Mathieu Anthoine\n * \n */\nclass CStage\n{\n\tpublic var fps:Int=0;\n\t//public var color:Int=0;\n\tpublic var color:Float=0;\n\tpublic var width:Int=0;\n\tpublic var height:Int=0;\n\t\n\tpublic function new() {}\n\t\n\tpublic function clone(source:Dynamic):CStage\n\t{\n\t\tfps=source.fps;\n\t\tcolor=source.color;\n\t\twidth=source.width;\n\t\theight=source.height;\n\t\t\n\t\treturn this;\n\t}\n}","package com.github.haxePixiGAF.data.config;\n\nimport pixi.core.math.Point;\nimport pixi.core.text.TextStyle;\n\n/**\n * AS3 Conversion\n * @author Mathieu Anthoine\n * \n */\nclass CTextFieldObject\n{\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PUBLIC VARIABLES\n\t//\n\t//--------------------------------------------------------------------------\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PRIVATE VARIABLES\n\t//\n\t//--------------------------------------------------------------------------\n\n\tprivate var _id:String;\n\tprivate var _width:Float;\n\tprivate var _height:Float;\n\tprivate var _text:String;\n\tprivate var _embedFonts:Bool=false;\n\tprivate var _multiline:Bool=false;\n\tprivate var _wordWrap:Bool=false;\n\tprivate var _restrict:String;\n\tprivate var _editable:Bool=false;\n\tprivate var _selectable:Bool=false;\n\tprivate var _displayAsPassword:Bool=false;\n\tprivate var _maxChars:Int=0;\n\tprivate var _textFormat:TextStyle;\n\tprivate var _pivotPoint:Point;\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  CONSTRUCTOR\n\t//\n\t//--------------------------------------------------------------------------\n\n\tpublic function new(id:String, text:String, textFormat:TextStyle, width:Float, height:Float)\n\t{\n\t\t_id=id;\n\t\t_text=text;\n\t\t_textFormat=textFormat;\n\n\t\t_width=width;\n\t\t_height=height;\n\n\t\t_pivotPoint=new Point();\n\t}\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PUBLIC METHODS\n\t//\n\t//--------------------------------------------------------------------------\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PRIVATE METHODS\n\t//\n\t//--------------------------------------------------------------------------\n\n\t//--------------------------------------------------------------------------\n\t//\n\t// OVERRIDDEN METHODS\n\t//\n\t//--------------------------------------------------------------------------\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  EVENT HANDLERS\n\t//\n\t//--------------------------------------------------------------------------\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  GETTERS AND SETTERS\n\t//\n\t//--------------------------------------------------------------------------\n\n\tpublic var id(get_id, set_id):String;\n \tprivate function get_id():String\n\t{\n\t\treturn _id;\n\t}\n\n\tprivate function set_id(value:String):String\n\t{\n\t\treturn _id=value;\n\t}\n\n\tpublic var text(get_text, set_text):String;\n \tprivate function get_text():String\n\t{\n\t\treturn _text;\n\t}\n\n\tprivate function set_text(value:String):String\n\t{\n\t\treturn _text=value;\n\t}\n\n\tpublic var textFormat(get_textFormat, set_textFormat):TextStyle;\n \tprivate function get_textFormat():TextStyle\n\t{\n\t\treturn _textFormat;\n\t}\n\n\tprivate function set_textFormat(value:TextStyle):TextStyle\n\t{\n\t\treturn _textFormat=value;\n\t}\n\n\tpublic var width(get_width, set_width):Float;\n \tprivate function get_width():Float\n\t{\n\t\treturn _width;\n\t}\n\n\tprivate function set_width(value:Float):Float\n\t{\n\t\treturn _width=value;\n\t}\n\n\tpublic var height(get_height, set_height):Float;\n \tprivate function get_height():Float\n\t{\n\t\treturn _height;\n\t}\n\n\tprivate function set_height(value:Float):Float\n\t{\n\t\treturn _height=value;\n\t}\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  STATIC METHODS\n\t//\n\t//--------------------------------------------------------------------------\n\n\tpublic var embedFonts(get_embedFonts, set_embedFonts):Bool;\n \tprivate function get_embedFonts():Bool\n\t{\n\t\treturn _embedFonts;\n\t}\n\n\tprivate function set_embedFonts(value:Bool):Bool\n\t{\n\t\treturn _embedFonts=value;\n\t}\n\n\tpublic var multiline(get_multiline, set_multiline):Bool;\n \tprivate function get_multiline():Bool\n\t{\n\t\treturn _multiline;\n\t}\n\n\tprivate function set_multiline(value:Bool):Bool\n\t{\n\t\treturn _multiline=value;\n\t}\n\n\tpublic var wordWrap(get_wordWrap, set_wordWrap):Bool;\n \tprivate function get_wordWrap():Bool\n\t{\n\t\treturn _wordWrap;\n\t}\n\n\tprivate function set_wordWrap(value:Bool):Bool\n\t{\n\t\treturn _wordWrap=value;\n\t}\n\n\tpublic var restrict(get_restrict, set_restrict):String;\n \tprivate function get_restrict():String\n\t{\n\t\treturn _restrict;\n\t}\n\n\tprivate function set_restrict(value:String):String\n\t{\n\t\treturn _restrict=value;\n\t}\n\n\tpublic var editable(get_editable, set_editable):Bool;\n \tprivate function get_editable():Bool\n\t{\n\t\treturn _editable;\n\t}\n\n\tprivate function set_editable(value:Bool):Bool\n\t{\n\t\treturn _editable=value;\n\t}\n\n\tpublic var selectable(get_selectable, set_selectable):Bool;\n \tprivate function get_selectable():Bool\n\t{\n\t\treturn _selectable;\n\t}\n\n\tprivate function set_selectable(value:Bool):Bool\n\t{\n\t\treturn _selectable=value;\n\t}\n\n\tpublic var displayAsPassword(get_displayAsPassword, set_displayAsPassword):Bool;\n \tprivate function get_displayAsPassword():Bool\n\t{\n\t\treturn _displayAsPassword;\n\t}\n\n\tprivate function set_displayAsPassword(value:Bool):Bool\n\t{\n\t\treturn _displayAsPassword=value;\n\t}\n\n\tpublic var maxChars(get_maxChars, set_maxChars):Int;\n \tprivate function get_maxChars():Int\n\t{\n\t\treturn _maxChars;\n\t}\n\n\tprivate function set_maxChars(value:Int):Int\n\t{\n\t\treturn _maxChars=value;\n\t}\n\n\tpublic var pivotPoint(get_pivotPoint, set_pivotPoint):Point;\n \tprivate function get_pivotPoint():Point\n\t{\n\t\treturn _pivotPoint;\n\t}\n\n\tprivate function set_pivotPoint(value:Point):Point\n\t{\n\t\treturn _pivotPoint=value;\n\t}\n}","package com.github.haxePixiGAF.data.config;\n\n/**\n * AS3 Conversion\n * @author Mathieu Anthoine\n * \n */\nclass CTextFieldObjects\n{\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PUBLIC VARIABLES\n\t//\n\t//--------------------------------------------------------------------------\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PRIVATE VARIABLES\n\t//\n\t//--------------------------------------------------------------------------\n\n\tprivate var _textFieldObjectsDictionary:Map<String,CTextFieldObject>;\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  CONSTRUCTOR\n\t//\n\t//--------------------------------------------------------------------------\n\n\tpublic function new()\n\t{\n\t\t_textFieldObjectsDictionary=new Map<String,CTextFieldObject>();\n\t}\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PUBLIC METHODS\n\t//\n\t//--------------------------------------------------------------------------\n\n\tpublic function addTextFieldObject(textFieldObject:CTextFieldObject):Void\n\t{\n\t\tif(_textFieldObjectsDictionary[textFieldObject.id]==null)\n\t\t{\n\t\t\t_textFieldObjectsDictionary[textFieldObject.id]=textFieldObject;\n\t\t}\n\t}\n\n\tpublic function getAnimationObject(id:String):CAnimationObject\n\t{\n\t\tif(_textFieldObjectsDictionary[id]!=null)\n\t\t{\n\t\t\treturn cast(_textFieldObjectsDictionary[id],CAnimationObject);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PRIVATE METHODS\n\t//\n\t//--------------------------------------------------------------------------\n\n\t//--------------------------------------------------------------------------\n\t//\n\t// OVERRIDDEN METHODS\n\t//\n\t//--------------------------------------------------------------------------\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  EVENT HANDLERS\n\t//\n\t//--------------------------------------------------------------------------\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  GETTERS AND SETTERS\n\t//\n\t//--------------------------------------------------------------------------\n\n\tpublic var textFieldObjectsDictionary(get_textFieldObjectsDictionary, null):Map<String,CTextFieldObject>;\n \tprivate function get_textFieldObjectsDictionary():Map<String,CTextFieldObject>\n\t{\n\t\treturn _textFieldObjectsDictionary;\n\t}\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  STATIC METHODS\n\t//\n\t//--------------------------------------------------------------------------\n\n}","package com.github.haxePixiGAF.data.config;\n\nimport com.github.haxePixiGAF.data.textures.TextureAtlas;\nimport com.github.haxePixiGAF.data.textures.TextureWrapper;\nimport com.github.haxePixiGAF.display.GAFScale9Texture;\nimport com.github.haxePixiGAF.display.GAFTexture;\nimport com.github.haxePixiGAF.display.IGAFTexture;\nimport pixi.core.math.Matrix;\n\n/**\n * AS3 Conversion\n * @author Mathieu Anthoine\n * \n */\nclass CTextureAtlas\n{\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PUBLIC VARIABLES\n\t//\n\t//--------------------------------------------------------------------------\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PRIVATE VARIABLES\n\t//\n\t//--------------------------------------------------------------------------\n\n\tprivate var _textureAtlasesDictionary:Map<String,TextureAtlas>;\n\tprivate var _textureAtlasConfig:CTextureAtlasCSF;\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  CONSTRUCTOR\n\t//\n\t//--------------------------------------------------------------------------\n\n\tpublic function new(textureAtlasesDictionary:Map<String,TextureAtlas>, textureAtlasConfig:CTextureAtlasCSF)\n\t{\n\t\t_textureAtlasesDictionary=textureAtlasesDictionary;\n\t\t_textureAtlasConfig=textureAtlasConfig;\n\t}\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PUBLIC METHODS\n\t//\n\t//--------------------------------------------------------------------------\n\n\tpublic static function createFromTextures(texturesDictionary:Map<String,TextureWrapper>,textureAtlasConfig:CTextureAtlasCSF):CTextureAtlas\n\t{\n\t\tvar atlasesDictionary:Map<String,TextureAtlas>=new Map<String,TextureAtlas>();\n\n\t\tvar atlas:TextureAtlas;\n\n\t\tfor(element in textureAtlasConfig.elements.elementsVector)\n\t\t{\n\t\t\tif(atlasesDictionary[element.atlasID]==null)\n\t\t\t{\n\t\t\t\t\n\t\t\t\tatlasesDictionary[element.atlasID]=new TextureAtlas(texturesDictionary[element.atlasID]);\n\t\t\t}\n\n\t\t\tatlas=atlasesDictionary[element.atlasID];\n\t\t\t\n\t\t\tatlas.addRegion(element.id, element.region, null, element.rotated);\n\t\t}\n\t\t\n\t\treturn new CTextureAtlas(atlasesDictionary, textureAtlasConfig);\n\t}\n\n\tpublic function dispose():Void\n\t{\n\t\tfor(textureAtlas in _textureAtlasesDictionary)\n\t\t{\n\t\t\ttextureAtlas.dispose();\n\t\t}\n\t}\n\n\tpublic function getTexture(id:String):IGAFTexture\n\t{\n\t\tvar textureAtlasElement:CTextureAtlasElement=_textureAtlasConfig.elements.getElement(id);\n\t\tif(textureAtlasElement!=null)\n\t\t{\n\t\t\tvar texture:TextureWrapper=getTextureByIDAndAtlasID(id, textureAtlasElement.atlasID);\n\n\t\t\tvar pivotMatrix:Matrix;\n\n\t\t\tif(_textureAtlasConfig.elements.getElement(id)!=null)\n\t\t\t{\n\t\t\t\tpivotMatrix=_textureAtlasConfig.elements.getElement(id).pivotMatrix;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tpivotMatrix=new Matrix();\n\t\t\t}\n\n\t\t\tif(textureAtlasElement.scale9Grid !=null)\n\t\t\t{\n\t\t\t\treturn new GAFScale9Texture(id, texture, pivotMatrix, textureAtlasElement.scale9Grid);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn new GAFTexture(id, texture, pivotMatrix);\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PRIVATE METHODS\n\t//\n\t//--------------------------------------------------------------------------\n\n\tpublic function getTextureByIDAndAtlasID(id:String, atlasID:String):TextureWrapper\n\t{\n\t\tvar textureAtlas:TextureAtlas=_textureAtlasesDictionary[atlasID];\n\n\t\treturn textureAtlas.getTexture(id);\n\t}\n\n\t//--------------------------------------------------------------------------\n\t//\n\t// OVERRIDDEN METHODS\n\t//\n\t//--------------------------------------------------------------------------\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  EVENT HANDLERS\n\t//\n\t//--------------------------------------------------------------------------\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  GETTERS AND SETTERS\n\t//\n\t//--------------------------------------------------------------------------\n}","package com.github.haxePixiGAF.data.config;\n\n/**\n * AS3 Conversion\n * @author Mathieu Anthoine\n * \n */\nclass CTextureAtlasCSF\n{\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PUBLIC VARIABLES\n\t//\n\t//--------------------------------------------------------------------------\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PRIVATE VARIABLES\n\t//\n\t//--------------------------------------------------------------------------\n\n\tprivate var _scale:Float;\n\tprivate var _csf:Float;\n\n\tprivate var _sources:Array<CTextureAtlasSource>;\n\n\tprivate var _elements:CTextureAtlasElements;\n\n\tprivate var _atlas:CTextureAtlas;\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  CONSTRUCTOR\n\t//\n\t//--------------------------------------------------------------------------\n\n\tpublic function new(csf:Float, scale:Float)\n\t{\n\t\t_csf=csf;\n\t\t_scale = scale;\n\n\t\t_sources=new Array<CTextureAtlasSource>();\n\t}\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PUBLIC METHODS\n\t//\n\t//--------------------------------------------------------------------------\n\n\tpublic function dispose():Void\n\t{\n\t\tif (_atlas != null) {\n\t\t\t_atlas.dispose();\n\t\t\t_atlas=null;\n\t\t}\n\t\t\n\t}\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PRIVATE METHODS\n\t//\n\t//--------------------------------------------------------------------------\n\n\t//--------------------------------------------------------------------------\n\t//\n\t// OVERRIDDEN METHODS\n\t//\n\t//--------------------------------------------------------------------------\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  EVENT HANDLERS\n\t//\n\t//--------------------------------------------------------------------------\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  GETTERS AND SETTERS\n\t//\n\t//--------------------------------------------------------------------------\n\n\tpublic var csf(get_csf, null):Float;\n \tprivate function get_csf():Float\n\t{\n\t\treturn _csf;\n\t}\n\n\tpublic var sources(get_sources, set_sources):Array<CTextureAtlasSource>;\n \tprivate function get_sources():Array<CTextureAtlasSource>\n\t{\n\t\treturn _sources;\n\t}\n\n\tprivate function set_sources(sources:Array<CTextureAtlasSource>):Array<CTextureAtlasSource>\n\t{\n\t\treturn _sources=sources;\n\t}\n\n\tpublic var atlas(get_atlas, set_atlas):CTextureAtlas;\n \tprivate function get_atlas():CTextureAtlas\n\t{\n\t\treturn _atlas;\n\t}\n\n\tprivate function set_atlas(atlas:CTextureAtlas):CTextureAtlas\n\t{\n\t\treturn _atlas=atlas;\n\t}\n\n\tpublic var elements(get_elements, set_elements):CTextureAtlasElements;\n \tprivate function get_elements():CTextureAtlasElements\n\t{\n\t\treturn _elements;\n\t}\n\n\tprivate function set_elements(elements:CTextureAtlasElements):CTextureAtlasElements\n\t{\n\t\treturn _elements=elements;\n\t}\n}","package com.github.haxePixiGAF.data.config;\nimport pixi.core.math.Matrix;\nimport pixi.core.math.shapes.Rectangle;\n\n/**\n * AS3 Conversion\n * @author Mathieu Anthoine\n * \n */\nclass CTextureAtlasElement\n{\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PUBLIC VARIABLES\n\t//\n\t//--------------------------------------------------------------------------\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PRIVATE VARIABLES\n\t//\n\t//--------------------------------------------------------------------------\n\n\tprivate var _id:String;\n\tprivate var _linkage:String;\n\tprivate var _atlasID:String;\n\tprivate var _region:Rectangle;\n\tprivate var _pivotMatrix:Matrix;\n\tprivate var _scale9Grid:Rectangle;\n\tprivate var _rotated:Bool=false;\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  CONSTRUCTOR\n\t//\n\t//--------------------------------------------------------------------------\n\n\tpublic function new(id:String, atlasID:String)\n\t{\n\t\t_id=id;\n\t\t_atlasID=atlasID;\n\t}\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PUBLIC METHODS\n\t//\n\t//--------------------------------------------------------------------------\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PRIVATE METHODS\n\t//\n\t//--------------------------------------------------------------------------\n\n\t//--------------------------------------------------------------------------\n\t//\n\t// OVERRIDDEN METHODS\n\t//\n\t//--------------------------------------------------------------------------\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  EVENT HANDLERS\n\t//\n\t//--------------------------------------------------------------------------\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  GETTERS AND SETTERS\n\t//\n\t//--------------------------------------------------------------------------\n\n\tpublic var id(get_id, null):String;\n \tprivate function get_id():String\n\t{\n\t\treturn _id;\n\t}\n\n\tpublic var region(get_region, set_region):Rectangle;\n \tprivate function get_region():Rectangle\n\t{\n\t\treturn _region;\n\t}\n\n\tprivate function set_region(region:Rectangle):Rectangle\n\t{\n\t\treturn _region=region;\n\t}\n\n\tpublic var pivotMatrix(get_pivotMatrix, set_pivotMatrix):Matrix;\n \tprivate function get_pivotMatrix():Matrix\n\t{\n\t\treturn _pivotMatrix;\n\t}\n\n\tprivate function set_pivotMatrix(pivotMatrix:Matrix):Matrix\n\t{\n\t\treturn _pivotMatrix=pivotMatrix;\n\t}\n\n\tpublic var atlasID(get_atlasID, null):String;\n \tprivate function get_atlasID():String\n\t{\n\t\treturn _atlasID;\n\t}\n\n\tpublic var scale9Grid(get_scale9Grid, set_scale9Grid):Rectangle;\n \tprivate function get_scale9Grid():Rectangle\n\t{\n\t\treturn _scale9Grid;\n\t}\n\n\tprivate function set_scale9Grid(value:Rectangle):Rectangle\n\t{\n\t\treturn _scale9Grid=value;\n\t}\n\n\tpublic var linkage(get_linkage, set_linkage):String;\n \tprivate function get_linkage():String\n\t{\n\t\treturn _linkage;\n\t}\n\n\tprivate function set_linkage(value:String):String\n\t{\n\t\treturn _linkage=value;\n\t}\n\n\tpublic var rotated(get_rotated, set_rotated):Bool;\n \tprivate function get_rotated():Bool\n\t{\n\t\treturn _rotated;\n\t}\n\n\tprivate function set_rotated(value:Bool):Bool\n\t{\n\t\treturn _rotated=value;\n\t}\n}","package com.github.haxePixiGAF.data.config;\n\n/**\n * AS3 Conversion\n * @author Mathieu Anthoine\n * \n */\nclass CTextureAtlasElements\n{\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PUBLIC VARIABLES\n\t//\n\t//--------------------------------------------------------------------------\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PRIVATE VARIABLES\n\t//\n\t//--------------------------------------------------------------------------\n\n\tprivate var _elementsVector:Array<CTextureAtlasElement>;\n\tprivate var _elementsDictionary:Map<String,CTextureAtlasElement>;\n\tprivate var _elementsByLinkage:Map<String,CTextureAtlasElement>;\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  CONSTRUCTOR\n\t//\n\t//--------------------------------------------------------------------------\n\n\tpublic function new():Void\n\t{\n\t\t_elementsVector=new Array<CTextureAtlasElement>();\n\t\t_elementsDictionary=new Map<String,CTextureAtlasElement>();\n\t\t_elementsByLinkage=new Map<String,CTextureAtlasElement>();\n\t}\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PUBLIC METHODS\n\t//\n\t//--------------------------------------------------------------------------\n\n\tpublic function addElement(element:CTextureAtlasElement):Void\n\t{\n\t\tif(_elementsDictionary[element.id]==null)\n\t\t{\n\t\t\t_elementsDictionary[element.id]=element;\n\n\t\t\t_elementsVector.push(element);\n\n\t\t\tif(element.linkage!=null)\n\t\t\t{\n\t\t\t\t_elementsByLinkage[element.linkage]=element;\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic function getElement(id:String):CTextureAtlasElement\n\t{\n\t\tif(_elementsDictionary[id]!=null)\n\t\t{\n\t\t\treturn _elementsDictionary[id];\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tpublic function getElementByLinkage(linkage:String):CTextureAtlasElement\n\t{\n\t\tif(_elementsByLinkage[linkage]!=null)\n\t\t{\n\t\t\treturn _elementsByLinkage[linkage];\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PRIVATE METHODS\n\t//\n\t//--------------------------------------------------------------------------\n\n\t//--------------------------------------------------------------------------\n\t//\n\t// OVERRIDDEN METHODS\n\t//\n\t//--------------------------------------------------------------------------\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  EVENT HANDLERS\n\t//\n\t//--------------------------------------------------------------------------\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  GETTERS AND SETTERS\n\t//\n\t//--------------------------------------------------------------------------\n\n\tpublic var elementsVector(get_elementsVector, null):Array<CTextureAtlasElement>;\n \tprivate function get_elementsVector():Array<CTextureAtlasElement>\n\t{\n\t\treturn _elementsVector;\n\t}\n\n}","package com.github.haxePixiGAF.data.config;\nimport com.github.haxePixiGAF.utils.MathUtility;\n\n/**\n * AS3 Conversion\n * @author Mathieu Anthoine\n * \n */\nclass CTextureAtlasScale\n{\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PUBLIC VARIABLES\n\t//\n\t//--------------------------------------------------------------------------\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PRIVATE VARIABLES\n\t//\n\t//--------------------------------------------------------------------------\n\n\tprivate var _scale:Float;\n\n\tprivate var _allContentScaleFactors:Array<CTextureAtlasCSF>;\n\tprivate var _contentScaleFactor:CTextureAtlasCSF;\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  CONSTRUCTOR\n\t//\n\t//--------------------------------------------------------------------------\n\n\tpublic function new()\n\t{\n\t\t_allContentScaleFactors=new Array<CTextureAtlasCSF>();\n\t}\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PUBLIC METHODS\n\t//\n\t//--------------------------------------------------------------------------\n\n\tpublic function dispose():Void\n\t{\n\t\tfor(cTextureAtlasCSF in _allContentScaleFactors)\n\t\t{\n\t\t\tcTextureAtlasCSF.dispose();\n\t\t}\n\t}\n\n\tpublic function getTextureAtlasForCSF(csf:Float):CTextureAtlasCSF\n\t{\n\t\tfor(textureAtlas in _allContentScaleFactors)\n\t\t{\n\t\t\tif(MathUtility.equals(textureAtlas.csf, csf))\n\t\t\t{\n\t\t\t\treturn textureAtlas;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PRIVATE METHODS\n\t//\n\t//--------------------------------------------------------------------------\n\n\t//--------------------------------------------------------------------------\n\t//\n\t// OVERRIDDEN METHODS\n\t//\n\t//--------------------------------------------------------------------------\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  EVENT HANDLERS\n\t//\n\t//--------------------------------------------------------------------------\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  GETTERS AND SETTERS\n\t//\n\t//--------------------------------------------------------------------------\n\n\tprivate function set_scale(scale:Float):Float\n\t{\n\t\treturn _scale=scale;\n\t}\n\n\tpublic var scale(get_scale, set_scale):Float;\n \tprivate function get_scale():Float\n\t{\n\t\treturn _scale;\n\t}\n\n\tpublic var allContentScaleFactors(get_allContentScaleFactors, set_allContentScaleFactors):Array<CTextureAtlasCSF>;\n \tprivate function get_allContentScaleFactors():Array<CTextureAtlasCSF>\n\t{\n\t\treturn _allContentScaleFactors;\n\t}\n\n\tprivate function set_allContentScaleFactors(value:Array<CTextureAtlasCSF>):Array<CTextureAtlasCSF>\n\t{\n\t\treturn _allContentScaleFactors=value;\n\t}\n\n\tpublic var contentScaleFactor(get_contentScaleFactor, set_contentScaleFactor):CTextureAtlasCSF;\n \tprivate function get_contentScaleFactor():CTextureAtlasCSF\n\t{\n\t\treturn _contentScaleFactor;\n\t}\n\n\tprivate function set_contentScaleFactor(value:CTextureAtlasCSF):CTextureAtlasCSF\n\t{\t\n\t\treturn _contentScaleFactor=value;\n\t}\n}","package com.github.haxePixiGAF.data.config;\n\n/**\n * AS3 Conversion\n * @author Mathieu Anthoine\n * \n */\nclass CTextureAtlasSource\n{\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PUBLIC VARIABLES\n\t//\n\t//--------------------------------------------------------------------------\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PRIVATE VARIABLES\n\t//\n\t//--------------------------------------------------------------------------\n\n\tprivate var _id:String;\n\tprivate var _source:String;\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  CONSTRUCTOR\n\t//\n\t//--------------------------------------------------------------------------\n\n\tpublic function new(id:String, source:String)\n\t{\n\t\t_id=id;\n\t\t_source=source;\n\t}\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PUBLIC METHODS\n\t//\n\t//--------------------------------------------------------------------------\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PRIVATE METHODS\n\t//\n\t//--------------------------------------------------------------------------\n\n\t//--------------------------------------------------------------------------\n\t//\n\t// OVERRIDDEN METHODS\n\t//\n\t//--------------------------------------------------------------------------\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  EVENT HANDLERS\n\t//\n\t//--------------------------------------------------------------------------\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  GETTERS AND SETTERS\n\t//\n\t//--------------------------------------------------------------------------\n\n\tpublic var id(get_id, null):String;\n \tprivate function get_id():String\n\t{\n\t\treturn _id;\n\t}\n\n\tpublic var source(get_source, null):String;\n \tprivate function get_source():String\n\t{\n\t\treturn _source;\n\t}\n\n}","package com.github.haxePixiGAF.data.converters;\n\nimport com.github.haxePixiGAF.data.GAFAssetConfig;\nimport com.github.haxePixiGAF.data.config.CAnimationFrame;\nimport com.github.haxePixiGAF.data.config.CAnimationFrameInstance;\nimport com.github.haxePixiGAF.data.config.CAnimationObject;\nimport com.github.haxePixiGAF.data.config.CAnimationSequence;\nimport com.github.haxePixiGAF.data.config.CBlurFilterData;\nimport com.github.haxePixiGAF.data.config.CFilter;\nimport com.github.haxePixiGAF.data.config.CFrameAction;\nimport com.github.haxePixiGAF.data.config.CSound;\nimport com.github.haxePixiGAF.data.config.CStage;\nimport com.github.haxePixiGAF.data.config.CTextFieldObject;\nimport com.github.haxePixiGAF.data.config.CTextureAtlasCSF;\nimport com.github.haxePixiGAF.data.config.CTextureAtlasElement;\nimport com.github.haxePixiGAF.data.config.CTextureAtlasElements;\nimport com.github.haxePixiGAF.data.config.CTextureAtlasScale;\nimport com.github.haxePixiGAF.data.config.CTextureAtlasSource;\nimport com.github.haxePixiGAF.data.converters.ErrorConstants.ErrorConstants;\nimport com.github.haxePixiGAF.events.GAFEvent;\nimport com.github.haxePixiGAF.text.TextFormatAlign;\nimport com.github.haxePixiGAF.utils.GAFBytesInput;\nimport com.github.haxePixiGAF.utils.MathUtility;\nimport haxe.Json;\nimport haxe.io.Bytes;\nimport pixi.core.math.Matrix;\nimport pixi.core.math.Point;\nimport pixi.core.math.shapes.Rectangle;\nimport pixi.core.text.TextStyle;\nimport pixi.interaction.EventEmitter;\n\nusing com.github.haxePixiGAF.utils.MatrixUtility;\nusing com.github.haxePixiGAF.utils.RectangleUtility;\nusing com.github.haxePixiGAF.utils.EventEmitterUtility;\n\n/**\n * TODO\n * @author Mathieu Anthoine\n */\nclass BinGAFAssetConfigConverter extends EventEmitter\n{\n\n\tprivate static inline var SIGNATURE_GAC:Int=0x00474143;\t\n\t\n\t//tags\n\tprivate static inline var TAG_END:Int=0;\n\tprivate static inline var TAG_DEFINE_ATLAS:Int=1;\n\tprivate static inline var TAG_DEFINE_ANIMATION_MASKS:Int=2;\n\tprivate static inline var TAG_DEFINE_ANIMATION_OBJECTS:Int=3;\n\tprivate static inline var TAG_DEFINE_ANIMATION_FRAMES:Int=4;\n\tprivate static inline var TAG_DEFINE_NAMED_PARTS:Int=5;\n\tprivate static inline var TAG_DEFINE_SEQUENCES:Int=6;\n\tprivate static inline var TAG_DEFINE_TEXT_FIELDS:Int=7;// v4.0\n\tprivate static inline var TAG_DEFINE_ATLAS2:Int=8;// v4.0\n\tprivate static inline var TAG_DEFINE_STAGE:Int=9;\n\tprivate static inline var TAG_DEFINE_ANIMATION_OBJECTS2:Int=10;// v4.0\n\tprivate static inline var TAG_DEFINE_ANIMATION_MASKS2:Int=11;// v4.0\n\tprivate static inline var TAG_DEFINE_ANIMATION_FRAMES2:Int=12;// v4.0\n\tprivate static inline var TAG_DEFINE_TIMELINE:Int=13;// v4.0\n\tprivate static inline var TAG_DEFINE_SOUNDS:Int=14;// v5.0\n\tprivate static inline var TAG_DEFINE_ATLAS3:Int=15;// v5.0\n\n\t//filters\n\tprivate static inline var FILTER_DROP_SHADOW:Int=0;\n\tprivate static inline var FILTER_BLUR:Int=1;\n\tprivate static inline var FILTER_GLOW:Int=2;\n\tprivate static inline var FILTER_COLOR_MATRIX:Int=6;\t\n\t\n\tprivate static var sHelperRectangle:Rectangle=new Rectangle(0,0,0,0);\n\tprivate static var sHelperMatrix:Matrix=new Matrix();\t\n\t\n\tprivate var _assetID:String;\n\tprivate var _bytes:GAFBytesInput;\n\tprivate var _defaultScale:Float;\n\tprivate var _defaultContentScaleFactor:Float;\n\tprivate var _config:GAFAssetConfig;\n\tprivate var _textureElementSizes:Array<Rectangle>;// Point by texture element id\n\n\n\tprivate var _isTimeline:Bool=false;\n\tprivate var _currentTimeline:GAFTimelineConfig;\n\tprivate var _async:Bool=false;\n\tprivate var _ignoreSounds:Bool=false;\n\t\n\t// --------------------------------------------------------------------------\n\t//\n\t//  PUBLIC METHODS\n\t//\n\t//--------------------------------------------------------------------------\n\tpublic function new(assetID:String, bytes:GAFBytesInput)\n\t{\n\t\tsuper();\n\t\t\n\t\t_bytes=bytes;\n\t\t_assetID=assetID;\n\t\t_textureElementSizes=[];\n\t}\n\t\n\tpublic function convert(async:Bool=false):Void\n\t{\n\t\tif(async)\n\t\t{\n\t\t\ttrace (\"TODO asynchrone conversion\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tparseStart();\n\t\t}\n\t}\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PRIVATE METHODS\n\t//\n\t//--------------------------------------------------------------------------\n\n\tprivate function parseStart():Void\n\t{\n\t\t\n\t\t_bytes.bigEndian = false;\n\t\t\n\t\t_config=new GAFAssetConfig(_assetID);\n\t\t_config.compression=_bytes.readInt();\n\t\t_config.versionMajor=_bytes.readSByte();\n\t\t_config.versionMinor = _bytes.readSByte();\n\t\t_config.fileLength = _bytes.readUnsignedInt();\t\n\t\t\n\t\tif(_config.versionMajor>GAFAssetConfig.MAX_VERSION)\n\t\t{\n\t\t\t//TODO: verifier le systeme de diffusion de message (qui les écoute, les centralise)\n\t\t\temit(GAFEvent.ERROR,WarningConstants.UNSUPPORTED_FILE + \"Library version:\" + GAFAssetConfig.MAX_VERSION + \", file version:\" + _config.versionMajor);\n\t\t\t//dispatchEvent(new DynamicEvent(ErrorEvent.ERROR, false, false, WarningConstants.UNSUPPORTED_FILE + \"Library version:\" + GAFAssetConfig.MAX_VERSION + \", file version:\" + _config.versionMajor));\n\t\t\treturn;\n\t\t}\n\n\t\tswitch(_config.compression)\n\t\t{\n\t\t\t// TODO\n\t\t\tcase SIGNATURE_GAC: \n\t\t\t\tthrow \"HaxePixiGAF: GAF compressed format not supported yet\";\n\t\t\t\t//decompressConfig();\n\t\t}\n\n\t\tif(_config.versionMajor<4)\n\t\t{\n\t\t\t_currentTimeline=new GAFTimelineConfig(_config.versionMajor + \".\" + _config.versionMinor);\n\t\t\t_currentTimeline.id=\"0\";\n\t\t\t_currentTimeline.assetID=_assetID;\n\t\t\t_currentTimeline.framesCount=_bytes.readShort();\n\t\t\t_currentTimeline.bounds=new Rectangle(_bytes.readFloat(), _bytes.readFloat(), _bytes.readFloat(), _bytes.readFloat());\n\t\t\t_currentTimeline.pivot=new Point(_bytes.readFloat(), _bytes.readFloat());\n\t\t\t_config.timelines.push(_currentTimeline);\n\t\t}\n\t\telse\n\t\t{\n\t\t\n\t\t\tvar i:Int=0;\n\t\t\tvar l:UInt = _bytes.readUnsignedInt();\n\t\t\tfor(i in 0...l)\n\t\t\t{\n\t\t\t\t_config.scaleValues.push(_bytes.readFloat());\t\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tl = _bytes.readUnsignedInt();\n\n\t\t\tfor(i in 0...l)\n\t\t\t{\n\t\t\t\t_config.csfValues.push(_bytes.readFloat());\n\t\t\t}\n\t\t}\n\n\t\treadNextTag();\n\t}\n\t\n\tprivate function checkForMissedRegions(timelineConfig:GAFTimelineConfig):Void\n\t{\n\t\tif(timelineConfig.textureAtlas!=null && timelineConfig.textureAtlas.contentScaleFactor.elements!=null)\n\t\t{\n\t\t\tfor(ao in timelineConfig.animationObjects.animationObjectsDictionary)\n\t\t\t{\n\t\t\t\tif(ao.type==CAnimationObject.TYPE_TEXTURE && timelineConfig.textureAtlas.contentScaleFactor.elements.getElement(ao.regionID)==null)\n\t\t\t\t{\n\t\t\t\t\ttimelineConfig.addWarning(WarningConstants.REGION_NOT_FOUND);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate function readNextTag():Void\n\t{\n\t\t\n\t\tvar tagID:Int=_bytes.readShort();\n\t\tvar tagLength:Int=_bytes.readUnsignedInt();\n\t\t\n\t\tswitch(tagID)\n\t\t{\n\t\t\tcase BinGAFAssetConfigConverter.TAG_DEFINE_STAGE:\n\t\t\t\treadStageConfig(_bytes, _config);\n\t\t\tcase BinGAFAssetConfigConverter.TAG_DEFINE_ATLAS:\n\t\t\t\treadTextureAtlasConfig(tagID);\n\t\t\tcase BinGAFAssetConfigConverter.TAG_DEFINE_ATLAS2:\n\t\t\t\treadTextureAtlasConfig(tagID);\n\t\t\tcase BinGAFAssetConfigConverter.TAG_DEFINE_ATLAS3:\n\t\t\t\treadTextureAtlasConfig(tagID);\n\t\t\tcase BinGAFAssetConfigConverter.TAG_DEFINE_ANIMATION_MASKS:\n\t\t\t\treadAnimationMasks(tagID, _bytes, _currentTimeline);\n\t\t\tcase BinGAFAssetConfigConverter.TAG_DEFINE_ANIMATION_MASKS2:\n\t\t\t\treadAnimationMasks(tagID, _bytes, _currentTimeline);\n\t\t\tcase BinGAFAssetConfigConverter.TAG_DEFINE_ANIMATION_OBJECTS:\n\t\t\t\treadAnimationObjects(tagID, _bytes, _currentTimeline);\n\t\t\tcase BinGAFAssetConfigConverter.TAG_DEFINE_ANIMATION_OBJECTS2:\n\t\t\t\treadAnimationObjects(tagID, _bytes, _currentTimeline);\n\t\t\tcase BinGAFAssetConfigConverter.TAG_DEFINE_ANIMATION_FRAMES:\n\t\t\t\treadAnimationFrames(tagID);\n\t\t\t\treturn;\n\t\t\tcase BinGAFAssetConfigConverter.TAG_DEFINE_ANIMATION_FRAMES2:\n\t\t\t\treadAnimationFrames(tagID);\n\t\t\t\treturn;\n\t\t\tcase BinGAFAssetConfigConverter.TAG_DEFINE_NAMED_PARTS:\n\t\t\t\treadNamedParts(_bytes, _currentTimeline);\n\t\t\tcase BinGAFAssetConfigConverter.TAG_DEFINE_SEQUENCES:\n\t\t\t\treadAnimationSequences(_bytes, _currentTimeline);\n\t\t\tcase BinGAFAssetConfigConverter.TAG_DEFINE_TEXT_FIELDS:\n\t\t\t\treadTextFields(_bytes, _currentTimeline);\n\t\t\tcase BinGAFAssetConfigConverter.TAG_DEFINE_SOUNDS:\n\t\t\t\t//TODO TAG_DEFINE_SOUNDS\n\t\t\t\ttrace (\"TODO TAG_DEFINE_SOUNDS\");\n\t\t\t\tif(!_ignoreSounds)\n\t\t\t\t{\n\t\t\t\t\t//readSounds(_bytes, _config);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t_bytes.position +=tagLength;\n\t\t\t\t}\n\t\t\tcase BinGAFAssetConfigConverter.TAG_DEFINE_TIMELINE:\n\t\t\t\t_currentTimeline=readTimeline();\n\t\t\tcase BinGAFAssetConfigConverter.TAG_END:\n\t\t\t\tif(_isTimeline)\n\t\t\t\t{\n\t\t\t\t\t_isTimeline=false;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t_bytes.position=_bytes.length;\n\t\t\t\t\tendParsing();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\tdefault:\n\t\t\t\ttrace(WarningConstants.UNSUPPORTED_TAG);\n\t\t\t\t_bytes.position +=tagLength;\n\t\t}\n\n\t\tdelayedReadNextTag();\n\t}\n\n\tprivate function delayedReadNextTag():Void\n\t{\n\t\tif(_async)\n\t\t{\n\t\t\ttrace (\"TODO asynchrone delayedReadNextTag\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\treadNextTag();\n\t\t}\n\t}\n\t\n\tprivate function readTimeline():GAFTimelineConfig\n\t{\n\t\tvar timelineConfig:GAFTimelineConfig=new GAFTimelineConfig(_config.versionMajor + \".\" + _config.versionMinor);\n\t\ttimelineConfig.id = Std.string(_bytes.readUnsignedInt());\n\t\ttimelineConfig.assetID=_config.id;\n\t\ttimelineConfig.framesCount=_bytes.readUnsignedInt();\n\t\ttimelineConfig.bounds=new Rectangle(_bytes.readFloat(), _bytes.readFloat(), _bytes.readFloat(), _bytes.readFloat());\n\t\ttimelineConfig.pivot=new Point(_bytes.readFloat(), _bytes.readFloat());\n\t\t\n\t\tvar hasLinkage:Bool = _bytes.readBoolean();\n\t\t\n\t\tif(hasLinkage)\n\t\t{\n\t\t\ttimelineConfig.linkage = _bytes.readUTF();\t\t\t\n\t\t}\n\n\t\t_config.timelines.push(timelineConfig);\n\n\t\t_isTimeline=true;\n\n\t\treturn timelineConfig;\n\t}\n\t\n\tprivate function readTextureAtlasConfig(tagID:Int):Void\n\t{\n\t\tvar i:Int=0;\n\t\tvar j:Int=0;\n\n\t\tvar scale:Float = _bytes.readFloat();\n\t\t\n\t\tif(_config.scaleValues.indexOf(scale)==-1)\n\t\t{\n\t\t\t_config.scaleValues.push(scale);\n\t\t}\n\n\t\tvar textureAtlas:CTextureAtlasScale=getTextureAtlasScale(scale);\n\n\t\t/////////////////////\n\n\t\tvar contentScaleFactor:CTextureAtlasCSF=null;\n\t\tvar atlasLength:Int = _bytes.readSByte();\n\t\t\n\t\tvar atlasID:Int=0;\n\t\tvar sourceLength:Int=0;\n\t\tvar csf:Float;\n\t\tvar source:String;\n\n\t\tvar elements:CTextureAtlasElements=null;\n\t\tif(textureAtlas.allContentScaleFactors.length>0)\n\t\t{\n\t\t\telements=textureAtlas.allContentScaleFactors[0].elements;\n\t\t}\n\n\t\tif(elements==null)\n\t\t{\n\t\t\telements=new CTextureAtlasElements();\n\t\t}\n\n\t\tfor(i in 0...atlasLength)\n\t\t{\n\t\t\tatlasID = _bytes.readUnsignedInt();\n\t\t\t\n\t\t\tsourceLength = _bytes.readSByte();\n\t\t\t\n\t\t\tfor(j in 0...sourceLength)\n\t\t\t{\n\t\t\t\tsource = _bytes.readUTF();\n\n\t\t\t\tcsf = _bytes.readFloat();\n\n\t\t\t\tif(_config.csfValues.indexOf(csf)==-1)\n\t\t\t\t{\n\t\t\t\t\t_config.csfValues.push(csf);\n\t\t\t\t}\n\n\t\t\t\tcontentScaleFactor = getTextureAtlasCSF(scale, csf);\n\n\t\t\t\tupdateTextureAtlasSources(contentScaleFactor, Std.string(atlasID), source);\n\t\t\t\tif(contentScaleFactor.elements==null)\n\t\t\t\t{\n\t\t\t\t\tcontentScaleFactor.elements=elements;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\t/////////////////////\n\t\t\n\t\tvar elementsLength:Int = _bytes.readUnsignedInt();\n\t\t\n\t\tvar element:CTextureAtlasElement;\n\t\tvar hasScale9Grid:Bool=false;\n\t\tvar scale9Grid:Rectangle=null;\n\t\tvar pivot:Point;\n\t\tvar topLeft:Point;\n\t\tvar elementScaleX:Float=0;\n\t\tvar elementScaleY:Float=0;\n\t\tvar elementWidth:Float;\n\t\tvar elementHeight:Float;\n\t\tvar elementAtlasID:Int=0;\n\t\tvar rotation:Bool=false;\n\t\tvar linkageName:String=\"\";\n\n\t\tfor(i in 0...elementsLength)\n\t\t{\n\t\t\t\n\t\t\tpivot = new Point(_bytes.readFloat(), _bytes.readFloat());\t\n\t\t\ttopLeft = new Point(_bytes.readFloat(), _bytes.readFloat());\n\t\t\t\n\t\t\tif(tagID==BinGAFAssetConfigConverter.TAG_DEFINE_ATLAS || tagID==BinGAFAssetConfigConverter.TAG_DEFINE_ATLAS2)\n\t\t\t{\t\t\t\n\t\t\t\telementScaleX = elementScaleY = _bytes.readFloat();\n\t\t\t}\n\n\t\t\telementWidth = _bytes.readFloat();\t\t\t\n\t\t\telementHeight = _bytes.readFloat();\n\t\t\tatlasID = _bytes.readUnsignedInt();\n\t\t\telementAtlasID = _bytes.readUnsignedInt();\n\n\t\t\tif(tagID==BinGAFAssetConfigConverter.TAG_DEFINE_ATLAS2\n\t\t\t|| tagID==BinGAFAssetConfigConverter.TAG_DEFINE_ATLAS3)\n\t\t\t{\n\t\t\t\thasScale9Grid=_bytes.readBoolean();\n\t\t\t\tif(hasScale9Grid)\n\t\t\t\t{\n\t\t\t\t\tscale9Grid=new Rectangle(\n\t\t\t\t\t\t\t_bytes.readFloat(), _bytes.readFloat(),\n\t\t\t\t\t\t\t_bytes.readFloat(), _bytes.readFloat()\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tscale9Grid=null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(tagID==BinGAFAssetConfigConverter.TAG_DEFINE_ATLAS3)\n\t\t\t{\n\t\t\t\telementScaleX=_bytes.readFloat();\n\t\t\t\telementScaleY=_bytes.readFloat();\n\t\t\t\trotation=_bytes.readBoolean();\n\t\t\t\tlinkageName=_bytes.readUTF();\n\t\t\t}\n\t\t\t\n\t\t\tif(elements.getElement(Std.string(elementAtlasID))==null)\n\t\t\t{\n\t\t\t\telement=new CTextureAtlasElement(Std.string(elementAtlasID), Std.string(atlasID));\n\t\t\t\telement.region=new Rectangle(Std.int(topLeft.x), Std.int(topLeft.y), elementWidth, elementHeight);\n\t\t\t\telement.pivotMatrix = new Matrix(1 / elementScaleX, 0, 0, 1 / elementScaleY, -pivot.x / elementScaleX, -pivot.y / elementScaleY);\n\t\t\t\telement.scale9Grid=scale9Grid;\n\t\t\t\telement.linkage=linkageName;\n\t\t\t\telement.rotated=rotation;\n\t\t\t\telements.addElement(element);\n\n\t\t\t\tif(element.rotated)\n\t\t\t\t{\n\t\t\t\t\tsHelperRectangle.x = 0;\n\t\t\t\t\tsHelperRectangle.y = 0;\n\t\t\t\t\tsHelperRectangle.width = elementHeight;\n\t\t\t\t\tsHelperRectangle.height = elementWidth;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tsHelperRectangle.x = 0;\n\t\t\t\t\tsHelperRectangle.y = 0;\n\t\t\t\t\tsHelperRectangle.width = elementWidth;\n\t\t\t\t\tsHelperRectangle.height = elementHeight;\n\t\t\t\t}\n\t\t\t\tsHelperMatrix.copyFrom(element.pivotMatrix);\n\t\t\t\tvar invertScale:Float=1 / scale;\n\t\t\t\tsHelperMatrix.scale(invertScale, invertScale);\n\t\t\t\t// TODO RectangleUtil.getBounds\n\t\t\t\t//RectangleUtil.getBounds(sHelperRectangle, sHelperMatrix, sHelperRectangle);\n\n\t\t\t\tif(_textureElementSizes[elementAtlasID]==null)\n\t\t\t\t{\n\t\t\t\t\t_textureElementSizes[elementAtlasID]=sHelperRectangle.clone();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t_textureElementSizes[elementAtlasID]=_textureElementSizes[elementAtlasID].union(sHelperRectangle);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate function getTextureAtlasScale(scale:Float):CTextureAtlasScale\n\t{\n\t\tvar textureAtlasScale:CTextureAtlasScale=null;\n\t\tvar textureAtlasScales:Array<CTextureAtlasScale>=_config.allTextureAtlases;\n\n\t\tvar l:Int = textureAtlasScales.length;\n\t\t\n\t\tfor(i in 0...l)\n\t\t{\n\t\t\tif(MathUtility.equals(textureAtlasScales[i].scale, scale))\n\t\t\t{\n\t\t\t\ttextureAtlasScale=textureAtlasScales[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif(textureAtlasScale==null)\n\t\t{\n\t\t\ttextureAtlasScale=new CTextureAtlasScale();\n\t\t\ttextureAtlasScale.scale=scale;\n\t\t\ttextureAtlasScales.push(textureAtlasScale);\n\t\t}\n\n\t\treturn textureAtlasScale;\n\t}\n\t\n\tprivate function getTextureAtlasCSF(scale:Float, csf:Float):CTextureAtlasCSF\n\t{\n\t\tvar textureAtlasScale:CTextureAtlasScale=getTextureAtlasScale(scale);\n\t\tvar textureAtlasCSF:CTextureAtlasCSF=textureAtlasScale.getTextureAtlasForCSF(csf);\n\t\tif(textureAtlasCSF==null)\n\t\t{\n\t\t\ttextureAtlasCSF=new CTextureAtlasCSF(csf, scale);\n\t\t\ttextureAtlasScale.allContentScaleFactors.push(textureAtlasCSF);\n\t\t}\n\n\t\treturn textureAtlasCSF;\n\t}\n\n\tprivate function updateTextureAtlasSources(textureAtlasCSF:CTextureAtlasCSF, atlasID:String, source:String):Void\n\t{\n\t\tvar textureAtlasSource:CTextureAtlasSource=null;\n\t\tvar textureAtlasSources:Array<CTextureAtlasSource>=textureAtlasCSF.sources;\n\t\t\n\t\tvar l:Int = textureAtlasSources.length;\n\t\t\n\t\tfor(i in 0...l)\n\t\t{\n\t\t\tif(textureAtlasSources[i].id==atlasID)\n\t\t\t{\n\t\t\t\ttextureAtlasSource=textureAtlasSources[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif(textureAtlasSource==null)\n\t\t{\n\t\t\ttextureAtlasSource=new CTextureAtlasSource(atlasID, source);\n\t\t\ttextureAtlasSources.push(textureAtlasSource);\n\t\t}\n\t}\n\t\n\tprivate static function readAnimationMasks(tagID:Int, tagContent:GAFBytesInput, timelineConfig:GAFTimelineConfig):Void\n\t{\n\t\tvar length:Int=tagContent.readUnsignedInt();\n\t\tvar objectID:Int=0;\n\t\tvar regionID:Int=0;\n\t\tvar type:String;\n\n\t\tfor(i in 0...length)\n\t\t{\n\t\t\tobjectID=tagContent.readUnsignedInt();\n\t\t\tregionID=tagContent.readUnsignedInt();\n\t\t\tif(tagID==BinGAFAssetConfigConverter.TAG_DEFINE_ANIMATION_MASKS)\n\t\t\t{\n\t\t\t\ttype=CAnimationObject.TYPE_TEXTURE;\n\t\t\t}\n\t\t\telse // BinGAFAssetConfigConverter.TAG_DEFINE_ANIMATION_MASKS2\n\t\t\t{\n\t\t\t\ttype=getAnimationObjectTypeString(tagContent.readUnsignedShort());\n\t\t\t}\n\t\t\ttimelineConfig.animationObjects.addAnimationObject(new CAnimationObject(objectID + \"\", regionID + \"\", type, true));\n\t\t}\n\t}\n\t\n\tprivate static function getAnimationObjectTypeString(type:Int):String\n\t{\n\t\tvar typeString:String=CAnimationObject.TYPE_TEXTURE;\n\t\tswitch(type)\n\t\t{\n\t\t\tcase 0:\n\t\t\t\ttypeString=CAnimationObject.TYPE_TEXTURE;\n\t\t\tcase 1:\n\t\t\t\ttypeString=CAnimationObject.TYPE_TEXTFIELD;\n\t\t\tcase 2:\n\t\t\t\ttypeString=CAnimationObject.TYPE_TIMELINE;\n\t\t}\n\n\t\treturn typeString;\n\t}\n\n\tprivate static function readAnimationObjects(tagID:Int, tagContent:GAFBytesInput, timelineConfig:GAFTimelineConfig):Void\n\t{\n\t\tvar length:Int=tagContent.readUnsignedInt();\n\t\tvar objectID:Int=0;\n\t\tvar regionID:Int=0;\n\t\tvar type:String;\n\n\t\tfor(i in 0...length)\n\t\t{\n\t\t\tobjectID=tagContent.readUnsignedInt();\n\t\t\tregionID=tagContent.readUnsignedInt();\n\t\t\tif(tagID==BinGAFAssetConfigConverter.TAG_DEFINE_ANIMATION_OBJECTS)\n\t\t\t{\n\t\t\t\ttype=CAnimationObject.TYPE_TEXTURE;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\ttype=getAnimationObjectTypeString(tagContent.readUnsignedShort());\n\t\t\t}\n\t\t\ttimelineConfig.animationObjects.addAnimationObject(new CAnimationObject(objectID + \"\", regionID + \"\", type, false));\n\t\t}\n\t}\n\t\n\tprivate static function readAnimationSequences(tagContent:GAFBytesInput, timelineConfig:GAFTimelineConfig):Void\n\t{\n\t\tvar length:Int=tagContent.readUnsignedInt();\n\t\tvar sequenceID:String;\n\t\tvar startFrameNo:Int;\n\t\tvar endFrameNo:Int;\n\n\t\tfor(i in 0...length)\n\t\t{\n\t\t\tsequenceID=tagContent.readUTF();\n\t\t\tstartFrameNo=tagContent.readShort();\n\t\t\tendFrameNo=tagContent.readShort();\n\t\t\ttimelineConfig.animationSequences.addSequence(new CAnimationSequence(sequenceID, startFrameNo, endFrameNo));\n\t\t}\n\t}\n\t\n\tprivate static function readNamedParts(tagContent:GAFBytesInput, timelineConfig:GAFTimelineConfig):Void\n\t{\n\t\ttimelineConfig.namedParts=new Map<String,String>();\n\n\t\tvar length:Int=tagContent.readUnsignedInt();\n\t\tvar partID:Int=0;\n\t\tfor(i in 0...length)\n\t\t{\n\t\t\tpartID=tagContent.readUnsignedInt();\n\t\t\ttimelineConfig.namedParts[Std.string(partID)]=tagContent.readUTF();\n\t\t}\n\t}\n\t\n\tprivate static function readTextFields(tagContent:GAFBytesInput, timelineConfig:GAFTimelineConfig):Void\n\t{\n\t\tvar length:Int=tagContent.readUnsignedInt();\n\t\tvar pivotX:Float;\n\t\tvar pivotY:Float;\n\t\tvar textFieldID:Int=0;\n\t\tvar width:Float;\n\t\tvar height:Float;\n\t\tvar text:String;\n\t\tvar embedFonts:Bool;\n\t\tvar multiline:Bool;\n\t\tvar wordWrap:Bool;\n\t\tvar restrict:String=null;\n\t\tvar editable:Bool;\n\t\tvar selectable:Bool;\n\t\tvar displayAsPassword:Bool;\n\t\tvar maxChars:Int=0;\n\n\t\tvar textFormat:TextStyle;\n\n\t\tfor(i in 0...length)\n\t\t{\n\t\t\ttextFieldID=tagContent.readUnsignedInt();\n\t\t\tpivotX=tagContent.readFloat();\n\t\t\tpivotY=tagContent.readFloat();\n\t\t\twidth=tagContent.readFloat();\n\t\t\theight=tagContent.readFloat();\n\n\t\t\ttext=tagContent.readUTF();\n\n\t\t\tembedFonts=tagContent.readBoolean();\n\t\t\tmultiline=tagContent.readBoolean();\n\t\t\twordWrap=tagContent.readBoolean();\n\n\t\t\tvar hasRestrict:Bool=tagContent.readBoolean();\n\t\t\tif(hasRestrict)\n\t\t\t{\n\t\t\t\trestrict=tagContent.readUTF();\n\t\t\t}\n\n\t\t\teditable=tagContent.readBoolean();\n\t\t\tselectable=tagContent.readBoolean();\n\t\t\tdisplayAsPassword=tagContent.readBoolean();\n\t\t\tmaxChars=tagContent.readUnsignedInt();\n\n\t\t\t// read textFormat\n\t\t\tvar alignFlag:Int=tagContent.readUnsignedInt();\n\t\t\tvar align:String=null;\n\t\t\tswitch(alignFlag)\n\t\t\t{\n\t\t\t\tcase 0:\n\t\t\t\t\talign=TextFormatAlign.LEFT;\n\t\t\t\tcase 1:\n\t\t\t\t\talign=TextFormatAlign.RIGHT;\n\t\t\t\tcase 2:\n\t\t\t\t\talign=TextFormatAlign.CENTER;\n\t\t\t\tcase 3:\n\t\t\t\t\talign=TextFormatAlign.JUSTIFY;\n\t\t\t\tcase 4:\n\t\t\t\t\talign=TextFormatAlign.START;\n\t\t\t\tcase 5:\n\t\t\t\t\talign=TextFormatAlign.END;\n\t\t\t}\n\n\t\t\tvar blockIndent:Float=tagContent.readUnsignedInt();\n\t\t\tvar bold:Bool=tagContent.readBoolean();\n\t\t\tvar bullet:Bool=tagContent.readBoolean();\n\t\t\tvar color:Int=tagContent.readUnsignedInt();\n\n\t\t\tvar font:String=tagContent.readUTF();\n\t\t\tvar indent:Int=tagContent.readUnsignedInt();\n\t\t\tvar italic:Bool=tagContent.readBoolean();\n\t\t\tvar kerning:Bool=tagContent.readBoolean();\n\t\t\tvar leading:Int=tagContent.readUnsignedInt();\n\t\t\tvar leftMargin:Float=tagContent.readUnsignedInt();\n\t\t\tvar letterSpacing:Float=tagContent.readFloat();\n\t\t\tvar rightMargin:Float=tagContent.readUnsignedInt();\n\t\t\tvar size:Int=tagContent.readUnsignedInt();\n\n\t\t\tvar l:Int=tagContent.readUnsignedInt();\n\t\t\tvar tabStops:Array<Dynamic>=[];\n\t\t\tfor(j in 0...l)\n\t\t\t{\n\t\t\t\ttabStops.push(tagContent.readUnsignedInt());\n\t\t\t}\n\n\t\t\tvar target:String=tagContent.readUTF();\n\t\t\tvar underline:Bool=tagContent.readBoolean();\n\t\t\tvar url:String=tagContent.readUTF();\n\n\t\t\t/* var display:String=tagContent.readUTF();*/\n\n\t\t\ttextFormat = new TextStyle();\n\t\t\ttextFormat.fontFamily = font;\n\t\t\ttextFormat.fontSize = size;\n\t\t\ttextFormat.fill = color;\n\t\t\ttextFormat.fontWeight = bold ? \"bold\" : \"normal\";\n\t\t\ttextFormat.fontStyle = italic ? \"italic\" : \"normal\";\n\t\t\t//textFormat. = underline;\n\t\t\t//textFormat. = url;\n\t\t\t//textFormat. = target;\n\t\t\ttextFormat.align = align;\n\t\t\t//textFormat. = leftMargin;\n\t\t\t//textFormat. = rightMargin;\n\t\t\t//textFormat. = blockIndent;\n\t\t\t//textFormat. = leading;\n\n\t\t\t//textFormat.=bullet;\n\t\t\t//textFormat.=kerning;\n\t\t\t//textFormat.=display;\n\t\t\ttextFormat.letterSpacing=letterSpacing;\n\t\t\t//textFormat.=tabStops;\n\t\t\t//textFormat.=indent;\n\n\t\t\tvar textFieldObject:CTextFieldObject=new CTextFieldObject(Std.string(textFieldID), text, textFormat,width, height);\n\t\t\ttextFieldObject.pivotPoint.x=-pivotX;\n\t\t\ttextFieldObject.pivotPoint.y=-pivotY;\n\t\t\ttextFieldObject.embedFonts=embedFonts;\n\t\t\ttextFieldObject.multiline=multiline;\n\t\t\ttextFieldObject.wordWrap=wordWrap;\n\t\t\ttextFieldObject.restrict=restrict;\n\t\t\ttextFieldObject.editable=editable;\n\t\t\ttextFieldObject.selectable=selectable;\n\t\t\ttextFieldObject.displayAsPassword=displayAsPassword;\n\t\t\ttextFieldObject.maxChars=maxChars;\n\t\t\ttimelineConfig.textFields.addTextFieldObject(textFieldObject);\n\t\t}\n\t}\n\t\n\tprivate function readAnimationFrames(tagID:Int, startIndex:Int=0, ?framesCount:Int=-1, ?prevFrame:CAnimationFrame=null):Void\n\t{\n\t\tif(framesCount==-1)\n\t\t{\n\t\t\tframesCount=_bytes.readUnsignedInt();\n\t\t}\n\t\tvar missedFrameNumber:Int=0;\n\t\tvar filterLength:Int=0;\n\t\tvar frameNumber:Int=0;\n\t\tvar statesCount:Int=0;\n\t\tvar filterType:Int=0;\n\t\tvar stateID:Int=0;\n\t\tvar zIndex:Int=0;\n\t\tvar alpha:Float;\n\t\tvar matrix:Matrix;\n\t\tvar maskID:String;\n\t\tvar hasMask:Bool=false;\n\t\tvar hasEffect:Bool=false;\n\t\tvar hasActions:Bool=false;\n\t\tvar hasColorTransform:Bool=false;\n\t\tvar hasChangesInDisplayList:Bool=false;\n\n\t\tvar timelineConfig:GAFTimelineConfig=_config.timelines[_config.timelines.length - 1];\n\t\tvar instance:CAnimationFrameInstance;\n\t\tvar currentFrame:CAnimationFrame;\n\t\tvar blurFilter:CBlurFilterData;\n\t\tvar blurFilters:Map<String,CBlurFilterData>= new Map<String,CBlurFilterData>();\n\t\tvar filter:CFilter;\n\n\t\tif(framesCount!=-1)\n\t\t{\n\t\t\tfor(i in startIndex...framesCount)\n\t\t\t{\n\t\t\t\tif(_async /*&&(getTimer()- cycleTime>=20)*/)\n\t\t\t\t{\n\t\t\t\t\ttrace (\"TODO asynchrone readAnimationFrames\");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tframeNumber=_bytes.readUnsignedInt();\n\n\t\t\t\tif(tagID==BinGAFAssetConfigConverter.TAG_DEFINE_ANIMATION_FRAMES)\n\t\t\t\t{\n\t\t\t\t\thasChangesInDisplayList=true;\n\t\t\t\t\thasActions=false;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\thasChangesInDisplayList=_bytes.readBoolean();\n\t\t\t\t\thasActions=_bytes.readBoolean();\n\t\t\t\t}\n\n\t\t\t\tif(prevFrame!=null)\n\t\t\t\t{\n\t\t\t\t\tcurrentFrame=prevFrame.clone(frameNumber);\n\n\t\t\t\t\tmissedFrameNumber = prevFrame.frameNumber + 1;\n\t\t\t\t\twhile (missedFrameNumber < currentFrame.frameNumber) {\n\t\t\t\t\t\ttimelineConfig.animationConfigFrames.addFrame(prevFrame.clone(missedFrameNumber));\n\t\t\t\t\t\tmissedFrameNumber++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tcurrentFrame=new CAnimationFrame(frameNumber);\n\n\t\t\t\t\tif(currentFrame.frameNumber>1)\n\t\t\t\t\t{\n\t\t\t\t\t\tmissedFrameNumber = 1;\n\t\t\t\t\t\twhile (missedFrameNumber < currentFrame.frameNumber) {\n\t\t\t\t\t\t\ttimelineConfig.animationConfigFrames.addFrame(new CAnimationFrame(missedFrameNumber));\n\t\t\t\t\t\t\tmissedFrameNumber++;\n\t\t\t\t\t\t}\n\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif(hasChangesInDisplayList)\n\t\t\t\t{\n\t\t\t\t\tstatesCount=_bytes.readUnsignedInt();\n\n\t\t\t\t\tfor(j in 0...statesCount)\n\t\t\t\t\t{\n\t\t\t\t\t\thasColorTransform=_bytes.readBoolean();\n\t\t\t\t\t\thasMask=_bytes.readBoolean();\n\t\t\t\t\t\thasEffect=_bytes.readBoolean();\n\n\t\t\t\t\t\tstateID=_bytes.readUnsignedInt();\n\t\t\t\t\t\tzIndex=_bytes.readInt();\n\t\t\t\t\t\talpha=_bytes.readFloat();\n\t\t\t\t\t\tif(alpha==1)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\talpha = GAF.maxAlpha;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmatrix = new Matrix(_bytes.readFloat(), _bytes.readFloat(), _bytes.readFloat(),_bytes.readFloat(), _bytes.readFloat(), _bytes.readFloat());\n\n\t\t\t\t\t\tfilter=null;\n\n\t\t\t\t\t\tif(hasColorTransform)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar params:Array<Float>=[\n\t\t\t\t\t\t\t\t_bytes.readFloat(), _bytes.readFloat(), _bytes.readFloat(),\n\t\t\t\t\t\t\t\t_bytes.readFloat(), _bytes.readFloat(), _bytes.readFloat(),\n\t\t\t\t\t\t\t\t_bytes.readFloat()];\n\t\t\t\t\t\t\tif (filter==null) filter=new CFilter();\n\t\t\t\t\t\t\tfilter.addColorTransform(params);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif(hasEffect)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (filter==null) filter=new CFilter();\n\n\t\t\t\t\t\t\tfilterLength=_bytes.readSByte();\n\t\t\t\t\t\t\tfor(k in 0...filterLength)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tfilterType=_bytes.readUnsignedInt();\n\t\t\t\t\t\t\t\tvar warning:String=null;\n\n\t\t\t\t\t\t\t\tswitch(filterType)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tcase BinGAFAssetConfigConverter.FILTER_DROP_SHADOW:\n\t\t\t\t\t\t\t\t\t\twarning=readDropShadowFilter(_bytes, filter);\n\t\t\t\t\t\t\t\t\tcase BinGAFAssetConfigConverter.FILTER_BLUR:\n\t\t\t\t\t\t\t\t\t\twarning=readBlurFilter(_bytes, filter);\n\t\t\t\t\t\t\t\t\t\tblurFilter=cast(filter.filterConfigs[filter.filterConfigs.length - 1],CBlurFilterData);\n\t\t\t\t\t\t\t\t\t\tif(blurFilter.blurX>=2 && blurFilter.blurY>=2)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif (!blurFilters.exists(Std.string(stateID)))\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tblurFilters[Std.string(stateID)]=blurFilter;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tblurFilters[Std.string(stateID)]=null;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tcase BinGAFAssetConfigConverter.FILTER_GLOW:\n\t\t\t\t\t\t\t\t\t\twarning=readGlowFilter(_bytes, filter);\n\t\t\t\t\t\t\t\t\tcase BinGAFAssetConfigConverter.FILTER_COLOR_MATRIX:\n\t\t\t\t\t\t\t\t\t\twarning=readColorMatrixFilter(_bytes, filter);\n\t\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\t\ttrace(WarningConstants.UNSUPPORTED_FILTERS);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\ttimelineConfig.addWarning(warning);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif(hasMask)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmaskID=_bytes.readUnsignedInt()+ \"\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmaskID=\"\";\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tinstance=new CAnimationFrameInstance(stateID + \"\");\n\t\t\t\t\t\tinstance.update(zIndex, matrix, alpha, maskID, filter);\n\n\t\t\t\t\t\tif(maskID!=null && filter!=null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttimelineConfig.addWarning(WarningConstants.FILTERS_UNDER_MASK);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcurrentFrame.addInstance(instance);\n\t\t\t\t\t}\n\n\t\t\t\t\tcurrentFrame.sortInstances();\n\t\t\t\t}\n\n\t\t\t\tif(hasActions)\n\t\t\t\t{\n\t\t\t\t\tvar data:Dynamic;\n\t\t\t\t\tvar action:CFrameAction;\n\t\t\t\t\tvar count:Int=_bytes.readUnsignedInt();\n\t\t\t\t\tfor(a in 0...count)\n\t\t\t\t\t{\n\t\t\t\t\t\taction=new CFrameAction();\n\t\t\t\t\t\taction.type=_bytes.readUnsignedInt();\n\t\t\t\t\t\taction.scope=_bytes.readUTF();\n\n\t\t\t\t\t\tvar paramsLength:Int=_bytes.readUnsignedInt();\n\t\t\t\t\t\tif(paramsLength>0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar lBytes:Bytes = Bytes.alloc(paramsLength);\n\t\t\t\t\t\t\t_bytes.readBytes(lBytes, 0, paramsLength);\n\t\t\t\t\t\t\tvar paramsBA:GAFBytesInput = new GAFBytesInput(lBytes);\n\t\t\t\t\t\t\tparamsBA.bigEndian = false;\n\t\t\t\t\t\t\twhile(paramsBA.position<paramsBA.length)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\taction.params.push(paramsBA.readUTF());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tparamsBA.close();\n\t\t\t\t\t\t\tparamsBA = null;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif(action.type==CFrameAction.DISPATCH_EVENT &&  action.params[0]==CSound.GAF_PLAY_SOUND &&  action.params.length>3)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(_ignoreSounds)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcontinue;//do not add sound events if they're ignored\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tdata=Json.parse(action.params[3]);\n\t\t\t\t\t\t\t//timelineConfig.addSound(data, frameNumber);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcurrentFrame.addAction(action);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttimelineConfig.animationConfigFrames.addFrame(currentFrame);\n\n\t\t\t\tprevFrame=currentFrame;\n\t\t\t} //end loop\n\n\t\t\tmissedFrameNumber = prevFrame.frameNumber + 1;\n\t\t\twhile (missedFrameNumber<=timelineConfig.framesCount) {\n\t\t\t\ttimelineConfig.animationConfigFrames.addFrame(prevFrame.clone(missedFrameNumber));\n\t\t\t\tmissedFrameNumber++;\n\t\t\t}\n\n\t\t\tfor(currentFrame in timelineConfig.animationConfigFrames.frames)\n\t\t\t{\n\t\t\t\tfor(instance in currentFrame.instances)\n\t\t\t\t{\n\t\t\t\t\tif(blurFilters[instance.id]!=null && instance.filter!=null)\n\t\t\t\t\t{\n\t\t\t\t\t\tblurFilter=instance.filter.getBlurFilter();\n\t\t\t\t\t\tif(blurFilter!=null && blurFilter.resolution==1)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tblurFilter.blurX *=0.5;\n\t\t\t\t\t\t\tblurFilter.blurY *=0.5;\n\t\t\t\t\t\t\tblurFilter.resolution=0.75;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} //end condition\n\n\t\tdelayedReadNextTag();\n\t}\n\t\n\tprivate function readMaskMaxSizes():Void\n\t{\n\t\tfor(timeline in _config.timelines)\n\t\t{\n\t\t\tfor(frame in timeline.animationConfigFrames.frames)\n\t\t\t{\n\t\t\t\tfor(frameInstance in frame.instances)\n\t\t\t\t{\n\t\t\t\t\tvar animationObject:CAnimationObject=timeline.animationObjects.getAnimationObject(frameInstance.id);\n\t\t\t\t\tif(animationObject.mask)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(animationObject.maxSize==null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tanimationObject.maxSize=new Point();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar maxSize:Point=animationObject.maxSize;\n\n\t\t\t\t\t\tif(animationObject.type==CAnimationObject.TYPE_TEXTURE)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tsHelperRectangle.copyFrom(_textureElementSizes[Std.parseInt(animationObject.regionID)]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if(animationObject.type==CAnimationObject.TYPE_TIMELINE)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar maskTimeline:GAFTimelineConfig=null;\n\t\t\t\t\t\t\tfor(maskTimeline in _config.timelines)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif(maskTimeline.id==animationObject.regionID)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tsHelperRectangle.copyFrom(maskTimeline.bounds);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if(animationObject.type==CAnimationObject.TYPE_TEXTFIELD)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar textField:CTextFieldObject=timeline.textFields.textFieldObjectsDictionary[animationObject.regionID];\n\t\t\t\t\t\t\tsHelperRectangle.x =-textField.pivotPoint.x;\n\t\t\t\t\t\t\tsHelperRectangle.y =-textField.pivotPoint.y;\n\t\t\t\t\t\t\tsHelperRectangle.width = textField.width;\n\t\t\t\t\t\t\tsHelperRectangle.height = textField.height;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//TODO\n\t\t\t\t\t\t//RectangleUtil.getBounds(sHelperRectangle, frameInstance.matrix, sHelperRectangle);\n\t\t\t\t\t\tmaxSize.set(\n\t\t\t\t\t\t\t\tMath.max(maxSize.x, Math.abs(sHelperRectangle.width)),\n\t\t\t\t\t\t\t\tMath.max(maxSize.y, Math.abs(sHelperRectangle.height)));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate function endParsing():Void\n\t{\n\t\t_bytes.close();\n\t\t_bytes=null;\n\n\t\treadMaskMaxSizes();\n\n\t\tvar itemIndex:Int=0;\n\t\t\n\t\tif(Math.isNaN(_config.defaultScale))\n\t\t{\n\t\t\t\n\t\t\tif(!Math.isNaN(_defaultScale))\n\t\t\t{\n\t\t\t\titemIndex=MathUtility.getItemIndex(_config.scaleValues, _defaultScale);\n\t\t\t\tif(itemIndex<0)\n\t\t\t\t{\n\t\t\t\t\tparseError(_defaultScale + ErrorConstants.SCALE_NOT_FOUND);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\t_config.defaultScale=_config.scaleValues[itemIndex];\n\t\t}\n\n\t\tif(Math.isNaN(_config.defaultContentScaleFactor))\n\t\t{\n\t\t\titemIndex=0;\n\t\t\tif(!Math.isNaN(_defaultContentScaleFactor))\n\t\t\t{\n\t\t\t\titemIndex=MathUtility.getItemIndex(_config.csfValues, _defaultContentScaleFactor);\n\t\t\t\tif(itemIndex<0)\n\t\t\t\t{\n\t\t\t\t\tparseError(_defaultContentScaleFactor + ErrorConstants.CSF_NOT_FOUND);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\t_config.defaultContentScaleFactor=_config.csfValues[itemIndex];\n\t\t}\n\n\t\tfor(textureAtlasScale in _config.allTextureAtlases)\n\t\t{\n\t\t\tfor(textureAtlasCSF in textureAtlasScale.allContentScaleFactors)\n\t\t\t{\n\t\t\t\tif(MathUtility.equals(_config.defaultContentScaleFactor, textureAtlasCSF.csf))\n\t\t\t\t{\n\t\t\t\t\ttextureAtlasScale.contentScaleFactor=textureAtlasCSF;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor(timelineConfig in _config.timelines)\n\t\t{\n\t\t\ttimelineConfig.allTextureAtlases=_config.allTextureAtlases;\n\n\t\t\tfor(textureAtlasScale in _config.allTextureAtlases)\n\t\t\t{\n\t\t\t\tif(MathUtility.equals(_config.defaultScale, textureAtlasScale.scale))\n\t\t\t\t{\n\t\t\t\t\ttimelineConfig.textureAtlas=textureAtlasScale;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ttimelineConfig.stageConfig=_config.stageConfig;\n\n\t\t\tcheckForMissedRegions(timelineConfig);\n\t\t}\n\n\t\temit(GAFEvent.COMPLETE, {target:this});\n\t}\n\t\n\tprivate function parseError(message:String):Void\n\t{\n\t\tif(hasEventListener(GAFEvent.ERROR))\n\t\t{\n\t\t\temit(GAFEvent.ERROR, {bubbles:false, cancelable:false, text:message});\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthrow message;\n\t\t}\n\t}\n\t\n\t//--------------------------------------------------------------------------\n\t//\n\t//  GETTERS AND SETTERS\n\t//\n\t//--------------------------------------------------------------------------\n\n\tpublic var config(get_config, null):GAFAssetConfig;\n \tprivate function get_config():GAFAssetConfig\n\t{\n\t\treturn _config;\n\t}\n\n\tpublic var assetID(get_assetID, null):String;\n \tprivate function get_assetID():String\n\t{\n\t\treturn _assetID;\n\t}\n\n\tpublic var ignoreSounds(null, set_ignoreSounds):Bool;\n \tprivate function set_ignoreSounds(ignoreSounds:Bool)\n\t{\n\t\treturn _ignoreSounds=ignoreSounds;\n\t}\n\t\n\t//--------------------------------------------------------------------------\n\t//\n\t//  STATIC METHODS\n\t//\n\t//--------------------------------------------------------------------------\n\n\tprivate static function readStageConfig(tagContent:GAFBytesInput, config:GAFAssetConfig):Void\n\t{\n\t\tvar stageConfig:CStage=new CStage();\n\n\t\tstageConfig.fps = tagContent.readSByte();\n\t\t//stageConfig.color=tagContent.readInt();\n\t\tstageConfig.color=tagContent.readFloat();\n\t\tstageConfig.width=tagContent.readUnsignedShort();\n\t\tstageConfig.height=tagContent.readUnsignedShort();\n\t\t\n\t\tconfig.stageConfig=stageConfig;\n\t}\n\t\n\tprivate static function readDropShadowFilter(source:GAFBytesInput, filter:CFilter):String\n\t{\n\t\tvar color:Array<Dynamic>=readColorValue(source);\n\t\tvar blurX:Float=source.readFloat();\n\t\tvar blurY:Float=source.readFloat();\n\t\tvar angle:Float=source.readFloat();\n\t\tvar distance:Float=source.readFloat();\n\t\tvar strength:Float=source.readFloat();\n\t\tvar inner:Bool=source.readBoolean();\n\t\tvar knockout:Bool=source.readBoolean();\n\n\t\treturn filter.addDropShadowFilter(blurX, blurY, color[1], color[0], angle, distance, strength, inner, knockout);\n\t}\n\n\tprivate static function readBlurFilter(source:GAFBytesInput, filter:CFilter):String\n\t{\n\t\treturn filter.addBlurFilter(source.readFloat(), source.readFloat());\n\t}\n\n\tprivate static function readGlowFilter(source:GAFBytesInput, filter:CFilter):String\n\t{\n\t\tvar color:Array<Dynamic>=readColorValue(source);\n\t\tvar blurX:Float=source.readFloat();\n\t\tvar blurY:Float=source.readFloat();\n\t\tvar strength:Float=source.readFloat();\n\t\tvar inner:Bool=source.readBoolean();\n\t\tvar knockout:Bool=source.readBoolean();\n\n\t\treturn filter.addGlowFilter(blurX, blurY, color[1], color[0], strength, inner, knockout);\n\t}\n\n\tprivate static function readColorMatrixFilter(source:GAFBytesInput, filter:CFilter):String\n\t{\n\t\tvar matrix:Array<Float>=new Array<Float>();\n\t\tfor(i in 0...20)\n\t\t{\n\t\t\tmatrix[i]=source.readFloat();\n\t\t}\n\n\t\treturn filter.addColorMatrixFilter(matrix);\n\t}\n\n\tprivate static function readColorValue(source:GAFBytesInput):Array<Float>\n\t{\n\t\tvar argbValue:Int=source.readUnsignedInt();\n\t\tvar alpha:Float=Std.int(((argbValue>>24)& 0xFF)* 100 / 255)/ 100;\n\t\tvar color:Int=argbValue & 0xFFFFFF;\n\n\t\treturn [alpha, color];\n\t}\n\t\n\t// -------------\n\t\n\tpublic var defaultScale(null, set_defaultScale):Float;\n \tprivate function set_defaultScale(defaultScale:Float)\n\t{\n\t\treturn _defaultScale=defaultScale;\n\t}\n\n\tpublic var defaultCSF(null, set_defaultCSF):Float;\n \tprivate function set_defaultCSF(csf:Float)\n\t{\n\t\treturn _defaultContentScaleFactor=csf;\n\t}\n\t\n}","package com.github.haxePixiGAF.data.tagfx;\n\nimport com.github.haxePixiGAF.data.textures.TextureWrapper;\nimport pixi.core.math.Point;\nimport pixi.interaction.EventEmitter;\n\n/**\n * Dispatched when he texture is decoded. It can only be used when the callback has been executed.\n */\n//[Event(name=\"textureReady\", type=\"flash.events.Event\")]\n\n/**\n * TODO\n * @author Mathieu Anthoine\n * \n */\nclass TAGFXBase extends EventEmitter implements ITAGFX\n{\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PUBLIC VARIABLES\n\t//\n\t//--------------------------------------------------------------------------\n\n\tpublic static inline var EVENT_TYPE_TEXTURE_READY:String=\"textureReady\";\n\n\tpublic static inline var SOURCE_TYPE_BITMAP_DATA:String=\"sourceTypeBitmapData\";\n\tpublic static inline var SOURCE_TYPE_BITMAP:String=\"sourceTypeBitmap\";\n\tpublic static inline var SOURCE_TYPE_PNG_BA:String=\"sourceTypePNGBA\";\n\tpublic static inline var SOURCE_TYPE_ATF_BA:String=\"sourceTypeATFBA\";\n\tpublic static inline var SOURCE_TYPE_PNG_URL:String=\"sourceTypePNGURL\";\n\tpublic static inline var SOURCE_TYPE_ATF_URL:String=\"sourceTypeATFURL\";\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PRIVATE VARIABLES\n\t//\n\t//--------------------------------------------------------------------------\n\n\tprivate var _texture:TextureWrapper;\n\tprivate var _textureSize:Point;\n\tprivate var _textureScale:Float=-1;\n\tprivate var _textureFormat:String;\n\tprivate var _source:Dynamic;\n\tprivate var _clearSourceAfterTextureCreated:Bool=false;\n\tprivate var _isReady:Bool=false;\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  CONSTRUCTOR\n\t//\n\t//--------------------------------------------------------------------------\n\n\tpublic function new()\n\t{\n\t\tsuper();\n\t\t//if(Capabilities.isDebugger &&\n\t\t\t\t//getQualifiedClassName(this)==\"com.catalystapps.gaf.data::TAGFXBase\")\n\t\t//{\n\t\t\t//throw new AbstractClassError();\n\t\t//}\n\t}\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PUBLIC METHODS\n\t//\n\t//--------------------------------------------------------------------------\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PRIVATE METHODS\n\t//\n\t//--------------------------------------------------------------------------\n\n\t//--------------------------------------------------------------------------\n\t//\n\t// OVERRIDDEN METHODS\n\t//\n\t//--------------------------------------------------------------------------\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  EVENT HANDLERS\n\t//\n\t//--------------------------------------------------------------------------\n\n\tprivate function onTextureReady(texture:TextureWrapper):Void\n\t{\n\t\t_isReady=true;\n\t\t//dispatchEvent(new Event(EVENT_TYPE_TEXTURE_READY));\n\t\temit(EVENT_TYPE_TEXTURE_READY);\n\t}\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  GETTERS AND SETTERS\n\t//\n\t//--------------------------------------------------------------------------\n\n\tpublic var texture(get_texture, null):TextureWrapper;\n \tprivate function get_texture():TextureWrapper\n\t{\n\t\treturn _texture;\n\t}\n\n\tpublic var textureSize(get_textureSize, set_textureSize):Point;\n \tprivate function get_textureSize():Point\n\t{\n\t\treturn _textureSize;\n\t}\n\n\tprivate function set_textureSize(value:Point):Point\n\t{\n\t\treturn _textureSize=value;\n\t}\n\n\tpublic var textureScale(get_textureScale, set_textureScale):Float;\n \tprivate function get_textureScale():Float\n\t{\n\t\treturn _textureScale;\n\t}\n\n\tprivate function set_textureScale(value:Float):Float\n\t{\n\t\treturn _textureScale=value;\n\t}\n\n\tpublic var textureFormat(get_textureFormat, set_textureFormat):String;\n \tprivate function get_textureFormat():String\n\t{\n\t\treturn _textureFormat;\n\t}\n\n\tprivate function set_textureFormat(value:String):String\n\t{\n\t\treturn _textureFormat=value;\n\t}\n\n\tpublic var sourceType(get_sourceType, null):String;\n \tprivate function get_sourceType():String\n\t{\n\t\t//TODO\n\t\t//throw new AbstractMethodError();\n\t\treturn \"\";\n\t}\n\n\tpublic var source(get_source, null):Dynamic;\n \tprivate function get_source():Dynamic\n\t{\n\t\treturn _source;\n\t}\n\n\t//public var clearSourceAfterTextureCreated(get_clearSourceAfterTextureCreated, set_clearSourceAfterTextureCreated):Bool;\n \t//private function get_clearSourceAfterTextureCreated():Bool\n\t//{\n\t\t//return _clearSourceAfterTextureCreated;\n\t//}\n//\n\t//private function set_clearSourceAfterTextureCreated(value:Bool):Bool\n\t//{\n\t\t//return _clearSourceAfterTextureCreated=value;\n\t//}\n\n\tpublic var ready(get_ready, null):Bool;\n \tprivate function get_ready():Bool\n\t{\n\t\treturn _isReady;\n\t}\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  STATIC METHODS\n\t//\n\t//--------------------------------------------------------------------------\n}","package com.github.haxePixiGAF.data.tagfx;\nimport com.github.haxePixiGAF.data.textures.TextureWrapper;\nimport pixi.core.textures.BaseTexture;\n\n/**\n * @author Mathieu Anthoine\n */\nclass TAGFXsourcePixi extends TAGFXBase\n{\n\n\tprivate var bob:String;\n\t\n\tpublic function new(source:String) \n\t{\n\t\tsuper();\n\t\t_source = source;\n\t\tbob = source;\n\t}\n\t\n\toverride private function get_sourceType(): String {\n\t\treturn \"Texture_Pixi\";\n\t}\n\n\toverride private function get_texture(): TextureWrapper\n\t{\n\t\treturn new TextureWrapper(BaseTexture.fromImage(_source));\n\t}\n\t\n}","package com.github.haxePixiGAF.data.textures;\n\nimport pixi.core.math.Matrix;\nimport pixi.core.math.shapes.Rectangle;\nimport pixi.core.textures.BaseTexture;\nimport pixi.core.textures.Texture;\n\n/**\n * PixiJs Wrapper of the Starling Texture Class\n * @author Mathieu Anthoine\n */\nclass TextureWrapper extends Texture\n{\n\t\n\tpublic function new(?pBaseTexture:BaseTexture, ?pFrame:Rectangle, ?pCrop:Rectangle, ?pTrim:Rectangle, ?pRotate:Bool) \n\t{\n\t\tsuper(pBaseTexture,pFrame,pCrop,pTrim,pRotate);\t\t\n\t}\n\t\n\tpublic var base (get_base, null):BaseTexture;\n\tprivate function get_base ():BaseTexture {\n\t\treturn null;\n\t\t//return baseTexture;\n\t}\n\t\n\t/// The Context3DTextureFormat of the underlying texture data.\n\tpublic var format(get_format, null) :  String;\n\tprivate function get_format(): String\n\t{\n\t\t//TODO\n\t\treturn \"bgra\";\n\t}\n\t\n\tpublic var frameHeight(get_frameHeight, null):Float;\n\tprivate function get_frameHeight():Float \n\t{\n\t\treturn frame!=null ? frame.height : height;\n\t}\n\t\n\tpublic var frameWidth(get_frameWidth, null):Float;\n\tprivate function get_frameWidth():Float \n\t{\n\t\treturn frame!=null ? frame.width : width;\n\t}\n\t\n\tpublic var mipMapping(get_mipMapping, null): Bool;\n\tprivate function get_mipMapping():Bool \n\t{\n\t\treturn false;\n\t\t//return base.mipmap;\n\t}\n\t\n\tpublic var nativeHeight(get_nativeHeight, null):Float;\n\tprivate function get_nativeHeight():Float \n\t{\n\t\treturn 0;\n\t}\n\t\n\tpublic var nativeWidth(get_nativeWidth, null):Float;\n\tprivate function get_nativeWidth():Float \n\t{\n\t\treturn 0;\n\t}\n\t\n\tpublic var premultipliedAlpha(get_premultipliedAlpha, null):Bool;\n\tprivate function get_premultipliedAlpha():Bool \n\t{\n\t\treturn false;\n\t}\n\t\n\tpublic var root(get_root, null): TextureWrapper;\n\tprivate function get_root():TextureWrapper \n\t{\n\t\treturn null;\n\t}\n\t\n\tpublic var scale(get_scale, null):Float;\n\tprivate function get_scale():Float \n\t{\n\t\treturn 1;\n\t}\n\t\n\tpublic var transformationMatrix(get_transformationMatrix, null) :Matrix;\n\tprivate function get_transformationMatrix():Matrix \n\t{\n\t\treturn null;\n\t}\n\t\n\tpublic var transformationMatrixToRoot(get_transformationMatrixToRoot, null) :Matrix;\n\tprivate function get_transformationMatrixToRoot():Matrix \n\t{\n\t\treturn null;\n\t}\n\t\n\t//--------------------------------------------------------------------------\n\t//\n\t//  STATIC\n\t//\n\t//--------------------------------------------------------------------------\n\n\t/** Creates a texture that contains a region (in pixels) of another texture. The new\n\t *  texture will reference the base texture; no data is duplicated.\n\t *\n\t *  @param texture  The texture you want to create a SubTexture from.\n\t *  @param region   The region of the parent texture that the SubTexture will show\n\t *                  (in points).\n\t *  @param frame    If the texture was trimmed, the frame rectangle can be used to restore\n\t *                  the trimmed area.\n\t *  @param rotated  If true, the SubTexture will show the parent region rotated by\n\t *                  90 degrees (CCW).\n\t *  @param scaleModifier  The scale factor of the new texture will be calculated by\n\t *                  multiplying the parent texture's scale factor with this value.\n\t */\n\tpublic static function fromTexture(texture:TextureWrapper, region:Rectangle=null,\n\t\t\t\t\t\t\t\t\t   frame:Rectangle=null, rotated:Bool=false,\n\t\t\t\t\t\t\t\t\t   scaleModifier:Float=1.0):TextureWrapper\n\t{\n\t\treturn new SubTexture(texture, region, false, frame, rotated, scaleModifier);\n\t}\n\t\n\tpublic static var maxSize(get_maxSize, null) : Int;\n\tprivate static function get_maxSize():Int \n\t{\n\t\t//var target:Starling = Starling.current;\n\t\t//var profile:String = target ? target.profile : \"baseline\";\n\n\t\t//if (profile == \"baseline\" || profile == \"baselineConstrained\")\n\t\t\t//return 2048;\n\t\t//else\n\t\t\t//return 4096;\n\t\t\n\t\treturn 4096;\n\t}\n\t\n}","package com.github.haxePixiGAF.data.textures;\n\nimport pixi.core.math.Matrix;\nimport pixi.core.math.shapes.Rectangle;\nimport pixi.core.textures.BaseTexture;\n\nusing com.github.haxePixiGAF.utils.MatrixUtility;\n\n/**\n * TODO: check\n * AS3 Conversion of Starling SubTexture class\n * @author Mathieu Anthoine\n */\n\n/** A SubTexture represents a section of another texture. This is achieved solely by\n *  manipulation of texture coordinates, making the class very efficient. \n *\n *<p><em>Note that it is OK to create subtextures of subtextures.</em></p>\n */\nclass SubTexture extends TextureWrapper\n{\n\tprivate var _parent:TextureWrapper;\n\tprivate var _ownsParent:Bool=false;\n\tprivate var _region:Rectangle;\n\tprivate var _rotated:Bool=false;\n\tprivate var _scale:Float;\t\n\tprivate var _transformationMatrix:Matrix;\n\tprivate var _transformationMatrixToRoot:Matrix;\n\n\n\t/** Creates a new SubTexture containing the specified region of a parent texture.\n\t *\n\t *  @param parent\t The texture you want to create a SubTexture from.\n\t *  @param region\t The region of the parent texture that the SubTexture will show\n\t *\t\t\t\t\t(in points). If<code>null</code>, the complete area of the parent.\n\t *  @param ownsParent If<code>true</code>, the parent texture will be disposed\n\t *\t\t\t\t\tautomatically when the SubTexture is disposed.\n\t *  @param frame\t  If the texture was trimmed, the frame rectangle can be used to restore\n\t *\t\t\t\t\tthe trimmed area.\n\t *  @param rotated\tIf true, the SubTexture will show the parent region rotated by\n\t *\t\t\t\t\t90 degrees(CCW).\n\t *  @param scaleModifier  The scale factor of the SubTexture will be calculated by\n\t *\t\t\t\t\tmultiplying the parent texture's scale factor with this value.\n\t */\n\tpublic function new(pParent:TextureWrapper, pRegion:Rectangle=null, pOwnsParent:Bool=false, pFrame:Rectangle=null, pRotated:Bool=false, pScaleModifier:Float=1)\n\t{\t\n\t\t\n\t\tsuper(pParent.baseTexture, pRegion,null,null,pRotated);\n\t\tsetTo(pParent, pRegion, pOwnsParent, pFrame, pRotated, pScaleModifier);\n\t\t\n\t}\n\t\n\toverride private function get_base ():BaseTexture {\n\t\treturn _parent.baseTexture;\n\t}\n\t\n\toverride private function get_frameHeight():Float \n\t{\n\t\treturn frame.height;\n\t}\n\t\n\toverride private function get_frameWidth():Float \n\t{\n\t\treturn frame.width;\n\t}\n\t\n\toverride private function get_mipMapping():Bool \n\t{\n\t\treturn _parent.mipMapping;\n\t}\n\t\n\toverride private function get_nativeHeight():Float \n\t{\n\t\treturn height * _scale;\n\t}\n\t\n\toverride private function get_nativeWidth():Float \n\t{\n\t\treturn width * _scale;\n\t}\n\t\n\toverride private function get_format():String \n\t{\n\t\treturn _parent.format;\n\t}\n\t\n\toverride private function get_premultipliedAlpha():Bool \n\t{\n\t\treturn _parent.premultipliedAlpha;\n\t}\n\t\n\toverride private function get_root():TextureWrapper \n\t{\n\t\treturn _parent.root;\n\t}\n\t\n\toverride private function get_scale():Float \n\t{\n\t\treturn _scale;\n\t}\n\t\n\toverride private function get_transformationMatrix():Matrix \n\t{\n\t\treturn _transformationMatrix;\n\t}\n\t\n\toverride private function get_transformationMatrixToRoot():Matrix \n\t{\n\t\treturn _transformationMatrixToRoot;\n\t}\n\t\n\t/** \n\t *\n\t *<p>Textures are supposed to be immutable, and Starling uses this assumption for\n\t *  optimizations and simplifications all over the place. However, in some situations where\n\t *  the texture is not accessible to the outside, this can be overruled in order to avoid\n\t *  allocations.</p>\n\t */\n\tpublic function setTo(pParent:TextureWrapper, pRegion:Rectangle=null, pOwnsParent:Bool=false, pFrame:Rectangle=null, pRotated:Bool=false, pScaleModifier:Float=1):Void\n\t{\n\t\tif(_region==null) _region=new Rectangle(0,0,0,0);\n\t\tif (pRegion!=null) {\n\t\t\t_region.x = pRegion.x;\n\t\t\t_region.y = pRegion.y;\n\t\t\t_region.width = pRegion.width;\n\t\t\t_region.height = pRegion.height;\n\t\t} else {\n\t\t\t_region.x = 0;\n\t\t\t_region.y = 0;\n\t\t\t_region.width = pParent.width;\n\t\t\t_region.height = pParent.height;\n\t\t}\n\n\t\t//if(pFrame!=null)\n\t\t//{\n\t\t\t//if (frame!=null) {\n\t\t\t\t//frame.x=pFrame.x;\n\t\t\t\t//frame.y=pFrame.y;\n\t\t\t\t//frame.width=pFrame.width;\n\t\t\t\t//frame.height=pFrame.height;\n\t\t\t//}\n\t\t\t//else frame=pFrame.clone();\n\t\t//}\n\t\t//else frame=null;\n\n\t\t_parent=pParent;\n\t\t_ownsParent=pOwnsParent;\n\t\t_rotated=pRotated;\n\t\t\n\t\tif (frame!=null) {\n\t\t\tframe.width=(pRotated ? _region.height:_region.width)/ pScaleModifier;\n\t\t\tframe.height=(pRotated ? _region.width:_region.height)/ pScaleModifier;\n\t\t}\n\t\t\n\t\t_scale = (_parent!=null ? _parent.scale : 1) * pScaleModifier;\n\n\t\t//if(frame!=null &&(frame.x>0 || frame.y>0 ||\n\t\t\t//frame.x+frame.width<width || frame.y+frame.height<height))\n\t\t//{\n\t\t\t//trace(\"[Starling] Warning:frames inside the texture's region are unsupported.\");\n\t\t//}\n\n\t\tupdateMatrices();\n\t}\n\n\tprivate function updateMatrices():Void\n\t{\n\t\tif (_transformationMatrix != null) _transformationMatrix.identity();\n\t\telse _transformationMatrix=new Matrix();\n\n\t\tif(_transformationMatrixToRoot!=null) _transformationMatrixToRoot.identity();\n\t\telse _transformationMatrixToRoot=new Matrix();\n\n\t\tif(_rotated)\n\t\t{\n\t\t\t_transformationMatrix.translate(0, -1);\n\t\t\t_transformationMatrix.rotate(Math.PI / 2.0);\n\t\t}\n\n\t\t_transformationMatrix.scale(_region.width  / _parent.width, _region.height / _parent.height);\n\t\t_transformationMatrix.translate(_region.x  / _parent.width, _region.y  / _parent.height);\n\n\t\tvar texture:SubTexture=this;\n\t\twhile(texture!=null)\n\t\t{\n\t\t\t_transformationMatrixToRoot.concat(texture._transformationMatrix);\n\t\t\t\n\t\t\tif (Std.is(texture.parent,SubTexture)) texture=cast(texture.parent,SubTexture);\n\t\t\telse texture = null;\n\t\t}\n\t}\n\t\n\t/** Disposes the parent texture if this texture owns it. */\n\tpublic override function destroy(?destroyBase:Bool):Void\n\t{\n\t\tif (_ownsParent) {\n\t\t\t_parent.destroy();\n\t\t}\n\t\tsuper.destroy(destroyBase);\n\t}\n\n\t/** The texture which the SubTexture is based on. */\n\tpublic var parent(get_parent, null):TextureWrapper;\n \tprivate function get_parent():TextureWrapper { return _parent;}\n\t\n\t/** Indicates if the parent texture is disposed when this object is disposed. */\n\tpublic var ownsParent(get_ownsParent, null):Bool;\n \tprivate function get_ownsParent():Bool { return _ownsParent;}\n\t\n\t/** If true, the SubTexture will show the parent region rotated by 90 degrees(CCW). */\n\tpublic var rotated(get_rotated, null):Bool;\n \tprivate function get_rotated():Bool { return _rotated;}\n\n\t/** The region of the parent texture that the SubTexture is showing(in points).\n\t *\n\t *<p>CAUTION:not a copy, but the actual object! Do not modify!</p>*/\n\tpublic var region(get_region, null):Rectangle;\n \tprivate function get_region():Rectangle {\n\t\treturn _region;\n\t}\t\n\t\n}","package com.github.haxePixiGAF.data.textures;\n\nimport pixi.core.math.shapes.Rectangle;\n\n/**\n * AS3 Conversion of Starling TextureAtlas class\n * @author Mathieu Anthoine\n */\n\n/** A texture atlas is a collection of many smaller textures in one big image. This class\n *  is used to access textures from such an atlas.\n *  \n *<p>Using a texture atlas for your textures solves two problems:</p>\n *  \n *<ul>\n *\t<li>Whenever you switch between textures, the batching of image objects is disrupted.</li>\n *\t<li>Any Stage3D texture has to have side lengths that are powers of two. Starling hides \n *\t\tthis limitation from you, but at the cost of additional graphics memory.</li>\n *</ul>\n *  \n *<p>By using a texture atlas, you avoid both texture switches and the power-of-two \n *  limitation. All textures are within one big \"super-texture\", and Starling takes care that \n *  the correct part of this texture is displayed.</p>\n *  \n *<p>There are several ways to create a texture atlas. One is to use the atlas generator \n *  script that is bundled with Starling's sibling, the<a href=\"http://www.sparrow-framework.org\">\n *  Sparrow framework</a>. It was only tested in Mac OS X, though. A great multi-platform \n *  alternative is the commercial tool<a href=\"http://www.texturepacker.com\">\n *  Texture Packer</a>.</p>\n *  \n *<p>Whatever tool you use, Starling expects the following file format:</p>\n * \n *<listing>\n * \t&lt;TextureAtlas imagePath='atlas.png'&gt;\n * \t  &lt;SubTexture name='texture_1' x='0'  y='0' width='50' height='50'/&gt;\n * \t  &lt;SubTexture name='texture_2' x='50' y='0' width='20' height='30'/&gt;\n * \t&lt;/TextureAtlas&gt;\n *</listing>\n *  \n *<strong>Texture Frame</strong>\n *\n *<p>If your images have transparent areas at their edges, you can make use of the \n *<code>frame</code>property of the Texture class. Trim the texture by removing the \n *  transparent edges and specify the original texture size like this:</p>\n * \n *<listing>\n * \t&lt;SubTexture name='trimmed' x='0' y='0' height='10' width='10'\n * \t\tframeX='-10' frameY='-10' frameWidth='30' frameHeight='30'/&gt;\n *</listing>\n *\n *<strong>Texture Rotation</strong>\n *\n *<p>Some atlas generators can optionally rotate individual textures to optimize the texture\n *  distribution. This is supported via the boolean attribute \"rotated\". If it is set to\n *<code>true</code>for a certain subtexture, this means that the texture on the atlas\n *  has been rotated by 90 degrees, clockwise. Starling will undo that rotation by rotating\n *  it counter-clockwise.</p>\n *\n *<p>In this case, the positional coordinates(<code>x, y, width, height</code>)\n *  are expected to point at the subtexture as it is present on the atlas(in its rotated\n *  form), while the \"frame\" properties must describe the texture in its upright form.</p>\n *\n */\nclass TextureAtlas\n{\n\tprivate var _atlasTexture:TextureWrapper;\n\tprivate var _subTextures:Map<String,TextureWrapper>;\n\tprivate var _subTextureNames:Array<String>;\n\t\n\t/** helper objects */\n\tprivate static var sNames:Array<String>=[];\n\t\n\t/** Create a texture atlas from a texture by parsing the regions from an XML file. */\n\tpublic function new(texture:TextureWrapper)\n\t{\n\t\t_subTextures=new Map<String,TextureWrapper>();\n\t\t_atlasTexture=texture;\n\t}\n\t\n\t/** Disposes the atlas texture. */\n\tpublic function dispose():Void\n\t{\n\t\t_atlasTexture.destroy();\n\t}\n\t\n\t/** Retrieves a SubTexture by name. Returns<code>null</code>if it is not found. */\n\tpublic function getTexture(name:String):TextureWrapper\n\t{\n\t\treturn _subTextures[name];\n\t}\n\t\n\t/** Returns all textures that start with a certain string, sorted alphabetically\n\t *(especially useful for \"MovieClip\"). */\n\tpublic function getTextures(prefix:String=\"\", ?out:Array<TextureWrapper>  ):Array<TextureWrapper>\n\t{\n\t\tif (out == null) out = new Array<TextureWrapper>();\n\t\tfor (name in getNames(prefix, sNames)) out[out.length] = getTexture(name);// avoid 'push'\n\t\t\n\t\t//sNames.length=0;\n\t\tsNames=[];\n\t\treturn out;\n\t}\n\t\n\t/** Returns all texture names that start with a certain string, sorted alphabetically. */\n\tpublic function getNames(prefix:String=\"\", ?out:Array<String>):Array<String>\n\t{\n\t\tif (out == null) out = new Array<String>();\n\t\tvar name:String;\n\t\t\n\t\tif(_subTextureNames==null)\n\t\t{\n\t\t\t// optimization:store sorted list of texture names\n\t\t\t_subTextureNames=[];\n\t\t\tfor(name in _subTextures.keys())_subTextureNames[_subTextureNames.length]=name;\n\t\t\t_subTextureNames.sort(function (pA:String,pB:String):Int { return pA.toLowerCase()<pB.toLowerCase() ? -1 : 1;});\n\t\t}\n\n\t\tfor(name in _subTextureNames) {\n\t\t\tif(name.indexOf(prefix)==0) out[out.length]=name;\n\t\t}\n\t\t\n\t\treturn out;\n\t}\n\t\n\t/** Returns the region rectangle associated with a specific name, or<code>null</code>\n\t *  if no region with that name has been registered. */\n\tpublic function getRegion(name:String):Rectangle\n\t{\n\t\tvar subTexture:SubTexture=cast _subTextures[name];\n\t\treturn subTexture!=null ? subTexture.region:null;\n\t}\n\t\n\t/** Returns the frame rectangle of a specific region, or<code>null</code>if that region \n\t *  has no frame. */\n\tpublic function getFrame(name:String):Rectangle\n\t{\n\t\tvar subTexture:SubTexture=cast _subTextures[name];\n\t\treturn subTexture!=null ? subTexture.frame:null;\n\t}\n\t\n\t/** If true, the specified region in the atlas is rotated by 90 degrees(clockwise). The\n\t *  SubTexture is thus rotated counter-clockwise to cancel out that transformation. */\n\tpublic function getRotation(name:String):Bool\n\t{\n\t\tvar subTexture:SubTexture=cast _subTextures[name];\n\t\treturn subTexture!=null ? subTexture.rotated:false;\n\t}\n\n\t/** Adds a named region for a SubTexture(described by rectangle with coordinates in\n\t *  points)with an optional frame. */\n\tpublic function addRegion(name:String, region:Rectangle, frame:Rectangle=null, rotated:Bool=false):Void\n\t{\n\t\t_subTextures[name]=new SubTexture(_atlasTexture, region, false, frame, rotated);\n\t\t_subTextureNames=null;\n\t}\n\t\n\t/** Removes a region with a certain name. */\n\tpublic function removeRegion(name:String):Void\n\t{\n\t\tvar subTexture:SubTexture=cast _subTextures[name];\n\t\t//if(subTexture) subTexture.dispose();\n\t\tif(subTexture!=null) subTexture.destroy();\n\t\t_subTextures.remove(name);\n\t\t_subTextureNames=null;\n\t}\n\t\n\t/** The base texture that makes up the atlas. */\n\tpublic var texture(get_texture, null):TextureWrapper;\n \tprivate function get_texture():TextureWrapper { return _atlasTexture;}\n\t\n\t// utility methods\n\n\tprivate static function parseBool(value:String):Bool\n\t{\n\t\treturn value.toLowerCase()==\"true\";\n\t}\n}","package com.github.haxePixiGAF.display;\n\nimport com.github.haxePixiGAF.data.config.CFilter;\nimport pixi.core.display.Container;\nimport pixi.core.display.DisplayObject.DestroyOptions;\nimport pixi.core.math.Matrix;\nimport pixi.core.math.Point;\nimport haxe.extern.EitherType;\n\n/**\n * ...\n * @author Mathieu Anthoine\n */\nclass GAFContainer extends Container implements IGAFDisplayObject implements IMaxSize\n{\n\n\tprivate static var HELPER_MATRIX:Matrix=new Matrix();\n\t\n\tprivate var _maxSize:Point;\n\n\t//private var _filterChain:GAFFilterChain;\n\tprivate var _filterConfig:CFilter;\n\tprivate var _filterScale:Float;\n\t\n\tpublic function new() \n\t{\n\t\tsuper();\n\t\t\n\t}\n\t\n\tpublic var transformationMatrix(get_transformationMatrix,set_transformationMatrix):Matrix;\n\tprivate function get_transformationMatrix():Matrix {\n\t\treturn localTransform;\n\t\t\n\t}\n\tprivate function set_transformationMatrix(matrix:Matrix):Matrix {\n\t\treturn localTransform=matrix;\n\t}\n\t\n\tpublic var maxSize(get_maxSize, set_maxSize):Point;\n \tprivate function get_maxSize():Point\n\t{\n\t\treturn _maxSize;\n\t}\n\n\tprivate function set_maxSize(value:Point):Point\n\t{\n\t\treturn _maxSize=value;\n\t}\n\t\n\t\t/**  */\n\tpublic function setFilterConfig(value:CFilter, scale:Float=1):Void\n\t{\n\t\t//TODO: setFilterConfig\n\t\t//trace (\"TODO: setFilterConfig\");\n\t\t\n\t\t//if(!Starling.current.contextValid)\n\t\t//{\n\t\t\t//return;\n\t\t//}\n//\n\t\t//if(_filterConfig !=value || _filterScale !=scale)\n\t\t//{\n\t\t\t//if(value!=null)\n\t\t\t//{\n\t\t\t\t//_filterConfig=value;\n\t\t\t\t//_filterScale=scale;\n//\n\t\t\t\t//if(_filterChain)\n\t\t\t\t//{\n\t\t\t\t\t//_filterChain.dispose();\n\t\t\t\t//}\n\t\t\t\t//else\n\t\t\t\t//{\n\t\t\t\t\t//_filterChain=new GAFFilterChain();\n\t\t\t\t//}\n//\n\t\t\t\t//_filterChain.setFilterData(_filterConfig);\n//\n\t\t\t\t//filter=_filterChain;\n\t\t\t//}\n\t\t\t//else\n\t\t\t//{\n\t\t\t\t//if(filter)\n\t\t\t\t//{\n\t\t\t\t\t//filter.dispose();\n\t\t\t\t\t//filter=null;\n\t\t\t\t//}\n//\n\t\t\t\t//_filterChain=null;\n\t\t\t\t//_filterConfig=null;\n\t\t\t\t//_filterScale=NaN;\n\t\t\t//}\n\t\t//}\n\t}\n\t\n\tpublic function invalidateOrientation():Void\n\t{\n\t\t//_orientationChanged=true;\n\t}\n\t\n\tpublic var pivotMatrix(get_pivotMatrix, null):Matrix;\n \tprivate function get_pivotMatrix():Matrix\n\t{\n\t\t//HELPER_MATRIX.copyFrom(_pivotMatrix);\n\t\tHELPER_MATRIX.identity();\n\n\t\t//if(_pivotChanged)\n\t\t//{\n\t\t\t//HELPER_MATRIX.tx=pivotX;\n\t\t\t//HELPER_MATRIX.ty=pivotY;\n\t\t//}\n\n\t\treturn HELPER_MATRIX;\n\t}\n\t\n}","package com.github.haxePixiGAF.display;\n\nimport com.github.haxePixiGAF.data.config.CFilter;\nimport haxe.extern.EitherType;\nimport js.Lib;\nimport pixi.core.display.DisplayObject.DestroyOptions;\nimport pixi.core.math.Matrix;\nimport pixi.core.math.Point;\nimport pixi.core.sprites.Sprite;\n\nusing com.github.haxePixiGAF.utils.MatrixUtility;\n\n/**\n * TODO : check doublons (scale, scaleX, pivot, pivotX) et supprimer ce qui est en trop\n * @author Mathieu Anthoine\n */\n/**\n * GAFImage represents static GAF display object that is part of the<code>GAFMovieClip</code>.\n */\n@:expose(\"GAF.GAFImage\")\nclass GAFImage extends Sprite implements IGAFImage implements IMaxSize implements IGAFDebug\n{\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PUBLIC VARIABLES\n\t//\n\t//--------------------------------------------------------------------------\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PRIVATE VARIABLES\n\t//\n\t//--------------------------------------------------------------------------\n\n\t//private static inline var V_DATA_ATTR:String=\"position\";\n\n\t//private static var HELPER_POINT:Point=new Point();\n\t//private static var HELPER_POINT_3D:Vector3D=new Vector3D();\n\tprivate static var HELPER_MATRIX:Matrix=new Matrix();\n\t//private static var HELPER_MATRIX_3D:Matrix3D=new Matrix3D();\n\n\tprivate var _assetTexture:IGAFTexture;\n\n\t//private var _filterChain:GAFFilterChain;\n\t//private var _filterConfig:CFilter;\n\t//private var _filterScale:Float;\n\n\tprivate var _maxSize:Point;\n\n\t//private var _pivotChanged:Bool=false;\n\n\tpublic var __debugOriginalAlpha:Float=null;\n\n\t//private var _orientationChanged:Bool=false;\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  CONSTRUCTOR\n\t//\n\t//--------------------------------------------------------------------------\n\n\t/**\n\t * Creates a new<code>GAFImage</code>instance.\n\t * @param assetTexture<code>IGAFTexture</code>from which it will be created.\n\t */\n\tpublic function new(assetTexture:IGAFTexture)\n\t{\n\t\t_assetTexture=assetTexture.clone();\n\n\t\tsuper(_assetTexture.texture);\n\t\t\n\t}\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PUBLIC METHODS\n\t//\n\t//--------------------------------------------------------------------------\n\n\t/**\n\t * Creates a new instance of GAFImage.\n\t */\n\tpublic function copy():GAFImage\n\t{\n\t\treturn new GAFImage(_assetTexture);\n\t}\n\n\tpublic function invalidateOrientation():Void\n\t{\n\t\t//_orientationChanged = true;\n\t}\n\n\tpublic var debugColors(null, set_debugColors):Array<Int>;\n \tprivate function set_debugColors(value:Array<Int>):Array<Int>\n\t{\n\t\treturn null;\n\t\t\n\t\t/*var alpha0:Float;\n\t\tvar alpha1:Float;\n\n\t\tswitch(value.length)\n\t\t{\n\t\t\tcase 1:\n\t\t\t\tcolor=value[0];\n\t\t\t\talpha=(value[0]>>>24)/ 255;\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tsetVertexColor(0, value[0]);\n\t\t\t\tsetVertexColor(1, value[0]);\n\t\t\t\tsetVertexColor(2, value[1]);\n\t\t\t\tsetVertexColor(3, value[1]);\n\n\t\t\t\talpha0=(value[0]>>>24)/ 255;\n\t\t\t\talpha1=(value[1]>>>24)/ 255;\n\t\t\t\tsetVertexAlpha(0, alpha0);\n\t\t\t\tsetVertexAlpha(1, alpha0);\n\t\t\t\tsetVertexAlpha(2, alpha1);\n\t\t\t\tsetVertexAlpha(3, alpha1);\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tsetVertexColor(0, value[0]);\n\t\t\t\tsetVertexColor(1, value[0]);\n\t\t\t\tsetVertexColor(2, value[1]);\n\t\t\t\tsetVertexColor(3, value[2]);\n\n\t\t\t\talpha0=(value[0]>>>24)/ 255;\n\t\t\t\tsetVertexAlpha(0, alpha0);\n\t\t\t\tsetVertexAlpha(1, alpha0);\n\t\t\t\tsetVertexAlpha(2,(value[1]>>>24)/ 255);\n\t\t\t\tsetVertexAlpha(3,(value[2]>>>24)/ 255);\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\tsetVertexColor(0, value[0]);\n\t\t\t\tsetVertexColor(1, value[1]);\n\t\t\t\tsetVertexColor(2, value[2]);\n\t\t\t\tsetVertexColor(3, value[3]);\n\n\t\t\t\tsetVertexAlpha(0,(value[0]>>>24)/ 255);\n\t\t\t\tsetVertexAlpha(1,(value[1]>>>24)/ 255);\n\t\t\t\tsetVertexAlpha(2,(value[2]>>>24)/ 255);\n\t\t\t\tsetVertexAlpha(3,(value[3]>>>24)/ 255);\n\t\t\t\tbreak;\n\t\t}*/\n\t\t\t\n\t}\n\n\t/**\n\t * Change the texture of the<code>GAFImage</code>to a new one.\n\t * @param newTexture the new<code>IGAFTexture</code>which will be used to replace existing one.\n\t */\n\tpublic function changeTexture(newTexture:IGAFTexture):Void\n\t{\n\t\ttexture=newTexture.texture;\n\t\t//readjustSize();\n\t\t_assetTexture.copyFrom(newTexture);\n\t}\n\n\tpublic function setFilterConfig(value:CFilter, scale:Float=1):Void\n\t{\n\t\t//trace (\"setFilterConfig: TODO\");\n\t\t\n\t\t/*if(!Starling.current.contextValid)\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\tif(_filterConfig !=value || _filterScale !=scale)\n\t\t{\n\t\t\tif(value)\n\t\t\t{\n\t\t\t\t_filterConfig=value;\n\t\t\t\t_filterScale=scale;\n\n\t\t\t\tif(_filterChain)\n\t\t\t\t{\n\t\t\t\t\t_filterChain.dispose();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t_filterChain=new GAFFilterChain();\n\t\t\t\t}\n\n\t\t\t\t_filterChain.setFilterData(_filterConfig);\n\n\t\t\t\tfilter=_filterChain;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(filter)\n\t\t\t\t{\n\t\t\t\t\tfilter.dispose();\n\t\t\t\t\tfilter=null;\n\t\t\t\t}\n\n\t\t\t\t_filterChain=null;\n\t\t\t\t_filterConfig=null;\n\t\t\t\t_filterScale=NaN;\n\t\t\t}\n\t\t}*/\n\t}\n\n\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PRIVATE METHODS\n\t//\n\t//--------------------------------------------------------------------------\n\n\tpublic function __debugHighlight():Void\n\t{\n\t\tif(Math.isNaN(__debugOriginalAlpha))\n\t\t{\n\t\t\t__debugOriginalAlpha=alpha;\n\t\t}\n\t\talpha=1;\n\t}\n\n\tpublic function __debugLowlight():Void\n\t{\n\t\tif(Math.isNaN(__debugOriginalAlpha))\n\t\t{\n\t\t\t__debugOriginalAlpha=alpha;\n\t\t}\n\t\talpha=.05;\n\t}\n\n\tpublic function __debugResetLight():Void\n\t{\n\t\tif(!Math.isNaN(__debugOriginalAlpha))\n\t\t{\n\t\t\talpha=__debugOriginalAlpha;\n\t\t\t__debugOriginalAlpha=null;\n\t\t}\n\t}\n\n\t//[Inline]\n\tprivate function updateTransformMatrix():Void\n\t{\n\t\t//if(_orientationChanged)\n\t\t//{\n\t\t\t//transformationMatrix=transformationMatrix;\n\t\t\t//_orientationChanged=false;\n\t\t//}\n\t}\n\n\t//--------------------------------------------------------------------------\n\t//\n\t// OVERRIDDEN METHODS\n\t//\n\t//--------------------------------------------------------------------------\n\n\t/**\n\t * Disposes all resources of the display object.\n\t */\n\toverride public function destroy(?options:EitherType<Bool, DestroyOptions>):Void\n\t{\n\t\t//if(filter!=null)\n\t\t//{\n\t\t\t//filter.dispose();\n\t\t\t//filter=null;\n\t\t//}\n\t\t_assetTexture=null;\n\t\t//_filterConfig=null;\n\n\t\tsuper.destroy(options);\n\t}\n\n\t\n\t//TODO: getGAFGetbounds\n\t\n\t//override public function getBounds(targetSpace:DisplayObject, resultRect:Rectangle=null):Rectangle\n\t//{\n\t\t//if(!resultRect)resultRect=new Rectangle(0,0,0,0);\n//\n\t\t//if(targetSpace==this)// optimization\n\t\t//{\n\t\t\t//vertexData.getPoint(3,V_DATA_ATTR, HELPER_POINT);\n\t\t\t//resultRect.setTo(0.0, 0.0, HELPER_POINT.x, HELPER_POINT.y);\n\t\t//}\n\t\t//else if(targetSpace==parent && rotation==0.0 && isEquivalent(skewX, skewY))// optimization\n\t\t//{\n\t\t\t//var scaleX:Float=scaleX;\n\t\t\t//var scaleY:Float=scaleY;\n\t\t\t//vertexData.getPoint(3,V_DATA_ATTR, HELPER_POINT);\n\t\t\t//resultRect.setTo(x - pivotX * scaleX,\t  y - pivotY * scaleY,\n\t\t\t\t\t//HELPER_POINT.x * scaleX, HELPER_POINT.y * scaleY);\n\t\t\t//if(scaleX<0){ resultRect.width  *=-1;resultRect.x -=resultRect.width;}\n\t\t\t//if(scaleY<0){ resultRect.height *=-1;resultRect.y -=resultRect.height;}\n\t\t//}\n\t\t//else if(is3D && stage)\n\t\t//{\n\t\t\t//stage.getCameraPosition(targetSpace, HELPER_POINT_3D);\n\t\t\t//getTransformationMatrix3D(targetSpace, HELPER_MATRIX_3D);\n\t\t\t//vertexData.getBoundsProjected(V_DATA_ATTR,HELPER_MATRIX_3D, HELPER_POINT_3D, 0, 4, resultRect);\n\t\t//}\n\t\t//else\n\t\t//{\n\t\t\t//getTransformationMatrix(targetSpace, HELPER_MATRIX);\n\t\t\t//vertexData.getBounds(V_DATA_ATTR,HELPER_MATRIX, 0, 4, resultRect);\n\t\t//}\n//\n\t\t//return resultRect;\n\t//}\n\n\tprivate function isEquivalent(a:Float, b:Float, epsilon:Float=0.0001):Bool\n\t{\n\t\treturn(a - epsilon<b)&&(a + epsilon>b);\n\t}\n\n\tpublic var pivotX(null, set_pivotX):Float;\n \tprivate function set_pivotX(value:Float):Float\n\t{\n\t\t//_pivotChanged = true;\n\t\treturn pivot.x = value;\n\t}\n\n\tpublic var pivotY(null, set_pivotY):Float;\n \tprivate function set_pivotY(value:Float):Float\n\t{\n\t\t//_pivotChanged=true;\n\t\treturn pivot.y=value;\n\t}\n\n\t//override public function get x():Float\n\t//{\n\t\t//updateTransformMatrix();\n\t\t//return super.x;\n\t//}\n\n\t//override public function get y():Float\n\t//{\n\t\t//updateTransformMatrix();\n\t\t//return super.y;\n\t//}\n\n\t//override public var rotation(get_rotation, set_rotation):Float;\n \t//private function get_rotation():Float\n\t//{\n\t\t//updateTransformMatrix();\n\t\t//return super.rotation;\n\t//}\n\n\tpublic var scaleX(get_scaleX, null):Float;\n \tprivate function get_scaleX():Float\n\t{\n\t\t//updateTransformMatrix();\n\t\treturn scale.x;\n\t}\n\n\tpublic var scaleY(get_scaleY, null):Float;\n \tprivate function get_scaleY():Float\n\t{\n\t\t//updateTransformMatrix();\n\t\treturn scale.y;\n\t}\n\n\tpublic var skewX(get_skewX, null):Float;\n \tprivate function get_skewX():Float\n\t{\n\t\t//updateTransformMatrix();\n\t\treturn skew.x;\n\t}\n\n\tpublic var skewY(get_skewY, null):Float;\n \tprivate function get_skewY():Float\n\t{\n\t\t//updateTransformMatrix();\n\t\treturn skew.y;\n\t}\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  EVENT HANDLERS\n\t//\n\t//--------------------------------------------------------------------------\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  GETTERS AND SETTERS\n\t//\n\t//--------------------------------------------------------------------------\n\n\tpublic var maxSize(get_maxSize, set_maxSize):Point;\n \tprivate function get_maxSize():Point\n\t{\n\t\treturn _maxSize;\n\t}\n\n\tprivate function set_maxSize(value:Point):Point\n\t{\n\t\treturn _maxSize=value;\n\t}\n\n\t/**\n\t * Returns current<code>IGAFTexture</code>.\n\t * @return current<code>IGAFTexture</code>\n\t */\n\tpublic var assetTexture(get_assetTexture, null):IGAFTexture;\n \t\n\t@:keep\n\tprivate function get_assetTexture():IGAFTexture\n\t{\n\t\treturn _assetTexture;\n\t}\n\n\tpublic var pivotMatrix(get_pivotMatrix, null):Matrix;\n \tprivate function get_pivotMatrix():Matrix\n\t{\n\t\tHELPER_MATRIX.copyFrom(_assetTexture.pivotMatrix);\n\t\t//if(_pivotChanged)\n\t\t//{\n\t\t\t//HELPER_MATRIX.tx=pivotX;\n\t\t\t//HELPER_MATRIX.ty=pivotY;\n\t\t//}\n\t\t\n\t\treturn HELPER_MATRIX;\n\t}\n\t\n\tpublic var transformationMatrix(get_transformationMatrix,set_transformationMatrix):Matrix;\n\tprivate function get_transformationMatrix():Matrix {\n\t\treturn localTransform;\n\t\t\n\t}\n\tprivate function set_transformationMatrix(matrix:Matrix):Matrix {\n\t\treturn localTransform=matrix;\n\t}\n\t\n\tpublic var textureSmoothing(get_textureSmoothing,set_textureSmoothing):String;\n\tprivate function get_textureSmoothing():String {\n\t\t//return _style.textureSmoothing;\n\t\t//TODO get_textureSmoothing\n\t\treturn \"\";\n\t}\n\t\n\tprivate function set_textureSmoothing(value:String):String {\n\t\t//TODO set_textureSmoothing\n\t\t//return _style.textureSmoothing = value;\n\t\treturn \"\";\n\t}\n\t\n\t\t\n\tstatic function __init__():Void {\n        #if js\n        untyped Object.defineProperty(GAFImage.prototype, \"assetTexture\", { get: GAFImage.prototype.get_assetTexture });\n        #end\n    }\n\t\n}","package com.github.haxePixiGAF.display;\n\nimport com.github.haxePixiGAF.data.GAFAsset;\nimport com.github.haxePixiGAF.data.GAFTimeline;\nimport com.github.haxePixiGAF.data.GAFTimelineConfig;\nimport com.github.haxePixiGAF.data.config.CAnimationFrame;\nimport com.github.haxePixiGAF.data.config.CAnimationFrameInstance;\nimport com.github.haxePixiGAF.data.config.CAnimationObject;\nimport com.github.haxePixiGAF.data.config.CAnimationSequence;\nimport com.github.haxePixiGAF.data.config.CFilter;\nimport com.github.haxePixiGAF.data.config.CFrameAction;\nimport com.github.haxePixiGAF.data.config.CTextFieldObject;\nimport com.github.haxePixiGAF.data.config.CTextureAtlas;\nimport com.github.haxePixiGAF.events.GAFEvent;\nimport com.github.haxePixiGAF.utils.DebugUtility;\nimport haxe.extern.EitherType;\nimport js.Browser;\nimport pixi.core.display.Container;\nimport pixi.core.display.DisplayObject;\nimport pixi.core.math.Matrix;\nimport pixi.core.math.Point;\nimport pixi.core.math.shapes.Rectangle;\nimport pixi.interaction.InteractionEvent;\n\nusing com.github.haxePixiGAF.utils.MatrixUtility;\nusing com.github.haxePixiGAF.utils.EventEmitterUtility;\n\n/**\n * GAFMovieClip represents animation display object that is ready to be used in Starling display list. It has\n * all controls for animation familiar from standard MovieClip(<code>play</code>,<code>stop</code>,<code>gotoAndPlay,</code>etc.)\n * and some more like<code>loop</code>,<code>nPlay</code>,<code>setSequence</code>that helps manage playback\n */\n/**\n * TODO\n * @author Mathieu Anthoine\n */\n@:expose(\"GAF.GAFMovieClip\")\nclass GAFMovieClip extends GAFContainer implements IAnimatable\n{\n\t/** Dispatched when playhead reached first frame of sequence */\n\tpublic static inline var EVENT_TYPE_SEQUENCE_START:String = \"typeSequenceStart\";\n\t\n\t/** Dispatched when playhead reached end frame of sequence */\n\tpublic static inline var EVENT_TYPE_SEQUENCE_END:String = \"typeSequenceEnd\";\n\t\n\t/** Dispatched whenever the movie has displayed its last frame. */\n\t// GAFEvent.COMPLETE\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PUBLIC VARIABLES\n\t//\n\t//--------------------------------------------------------------------------\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PRIVATE VARIABLES\n\t//\n\t//--------------------------------------------------------------------------\n\n\t//TODO TextureSmoothing.BILINEAR\n\tprivate var _smoothing:String = \"\";// TextureSmoothing.BILINEAR;\n\n\tprivate var _displayObjectsDictionary:Map<String,IGAFDisplayObject>;\n\tprivate var _stencilMasksDictionary:Map<String,DisplayObject>;\n\tprivate var _displayObjectsVector:Array<IGAFDisplayObject>;\n\tprivate var _imagesVector:Array<IGAFImage>;\n\tprivate var _mcVector:Array<GAFMovieClip>;\n\n\tprivate var _playingSequence:CAnimationSequence;\n\tprivate var _timelineBounds:Rectangle;\n\t//TODO _boundsAndPivot\n\t//private var _boundsAndPivot:MeshBatch;\n\tprivate var _config:GAFTimelineConfig;\n\tprivate var _gafTimeline:GAFTimeline;\n\n\tprivate var _loop:Bool=true;\n\tprivate var _skipFrames:Bool=true;\n\tprivate var _reset:Bool=false;\n\tprivate var _masked:Bool=false;\n\tprivate var _inPlay:Bool=false;\n\tprivate var _hidden:Bool=false;\n\tprivate var _reverse:Bool=false;\n\tprivate var _started:Bool=false;\n\tprivate var _disposed:Bool=false;\n\tprivate var _hasFilter:Bool=false;\n\tprivate var _useClipping:Bool=false;\n\tprivate var _alphaLessMax:Bool=false;\n\tprivate var _addToJuggler:Bool=false;\n\n\tprivate var _scale:Float;\n\tprivate var _contentScaleFactor:Float;\n\tprivate var _currentTime:Float=0;\n\t// Hold the current time spent animating\n\tprivate var _lastFrameTime:Float=0;\n\tprivate var _frameDuration:Float;\n\t\n\tprivate var _previousTime:Float=-1;\n\n\tprivate var _nextFrame:Int=0;\n\tprivate var _startFrame:Int=0;\n\tprivate var _finalFrame:Int=0;\n\tprivate var _currentFrame:Int=0;\n\tprivate var _totalFrames:Int=0;\n\n\tprivate var __debugOriginalAlpha:Float=null;\n\n\n\t// --------------------------------------------------------------------------\n\t//\n\t//  CONSTRUCTOR\n\t//\n\t//--------------------------------------------------------------------------\n\n\t/**\n\t * Creates a new GAFMovieClip instance.\n\t *\n\t * @param gafTimeline<code>GAFTimeline</code>from what<code>GAFMovieClip</code>will be created\n\t * @param fps defines the frame rate of the movie clip. If not set - the stage config frame rate will be used instead.\n\t * @param addToJuggler if<code>true - GAFMovieClip</code>will listen<code>requestAnimationFrame</code>\n\t * and removed automatically on<code>dispose</code>\n\t */\n\tpublic function new(gafTimeline:GAFTimeline, pFps:Int=-1, addToJuggler:Bool=true)\n\t{\n\t\tsuper();\n\t\t\n\t\t_gafTimeline=gafTimeline;\n\t\t_config=gafTimeline.config;\n\t\t_scale=gafTimeline.scale;\n\t\t_contentScaleFactor=gafTimeline.contentScaleFactor;\n\t\t_addToJuggler=addToJuggler;\n\n\t\tinitialize(gafTimeline.textureAtlas, gafTimeline.gafAsset);\n\n\t\tif(_config.bounds!=null)\n\t\t{\n\t\t\t_timelineBounds=_config.bounds.clone();\n\t\t}\n\t\tif(pFps>0)\n\t\t{\n\t\t\tfps=pFps;\n\t\t}\n\n\t\tdraw();\n\t}\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PUBLIC METHODS\n\t//\n\t//--------------------------------------------------------------------------\n\n\t/** \n\t * Returns the child display object that exists with the specified ID. Use to obtain animation's parts\n\t *\n\t * @param id Child ID\n\t * @return The child display object with the specified ID\n\t */\n\tpublic function getChildByID(id:String):IGAFDisplayObject\n\t{\n\t\treturn _displayObjectsDictionary[id];\n\t}\n\n\t/** \n\t * Returns the mask display object that exists with the specified ID. Use to obtain animation's masks\n\t *\n\t * @param id Mask ID\n\t * @return The mask display object with the specified ID\n\t */\n\tpublic function getMaskByID(id:String):DisplayObject\n\t{\n\t\treturn _stencilMasksDictionary[id];\n\t}\n\n\t/**\n\t * Shows mask display object that exists with the specified ID. Used for debug purposes only!\n\t *\n\t * @param id Mask ID\n\t */\n\tpublic function showMaskByID(id:String):Void\n\t{\n\t\tvar maskObject:IGAFDisplayObject=_displayObjectsDictionary[id];\n\t\tvar maskAsDisplayObject:DisplayObject=cast(maskObject, DisplayObject);\n\t\tvar stencilMaskObject:DisplayObject=_stencilMasksDictionary[id];\n\t\tif(maskObject!=null && stencilMaskObject!=null)\n\t\t{\n\t\t\tmaskAsDisplayObject.mask=stencilMaskObject;\n\t\t\taddChild(stencilMaskObject);\n\t\t\taddChild(maskAsDisplayObject);\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttrace(\"WARNING:mask object is missing. It might be disposed.\");\n\t\t}\n\t}\n\n\t/**\n\t * Hides mask display object that previously has been shown using<code>showMaskByID</code>method.\n\t * Used for debug purposes only!\n\t *\n\t * @param id Mask ID\n\t */\n\tpublic function hideMaskByID(id:String):Void\n\t{\n\t\tvar maskObject:IGAFDisplayObject=_displayObjectsDictionary[id];\n\t\tvar maskAsDisplayObject:DisplayObject=cast(maskObject, DisplayObject);\n\t\tvar stencilMaskObject:DisplayObject=_stencilMasksDictionary[id];\n\t\tif(stencilMaskObject!=null)\n\t\t{\n\t\t\tif(stencilMaskObject.parent==this)\n\t\t\t{\n\t\t\t\tstencilMaskObject.parent.mask=null;\n\t\t\t\tremoveChild(stencilMaskObject);\n\t\t\t\tremoveChild(maskAsDisplayObject);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttrace(\"WARNING:mask object is missing. It might be disposed.\");\n\t\t}\n\t}\n\n\t/**\n\t * Clear playing sequence. If animation already in play just continue playing without sequence limitation\n\t */\n\tpublic function clearSequence():Void\n\t{\n\t\t_playingSequence=null;\n\t}\n\n\t/**\n\t * Returns id of the sequence where animation is right now. If there is no sequences - returns<code>null</code>.\n\t *\n\t * @return id of the sequence\n\t */\n\tpublic var currentSequence(get_currentSequence, null):String;\n \tprivate function get_currentSequence():String\n\t{\n\t\tvar sequence:CAnimationSequence=_config.animationSequences.getSequenceByFrame(currentFrame);\n\t\tif(sequence!=null)\n\t\t{\n\t\t\treturn sequence.id;\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * Set sequence to play\n\t *\n\t * @param id Sequence ID\n\t * @param play Play or not immediately.<code>true</code>- starts playing from sequence start frame.<code>false</code>- go to sequence start frame and stop\n\t * @return sequence to play\n\t */\n\tpublic function setSequence(id:String, play:Bool=true):CAnimationSequence\n\t{\n\t\t_playingSequence=_config.animationSequences.getSequenceByID(id);\n\n\t\tif(_playingSequence!=null)\n\t\t{\n\t\t\tvar startFrame:Int=_reverse ? _playingSequence.endFrameNo - 1:_playingSequence.startFrameNo;\n\t\t\tif(play)\n\t\t\t{\n\t\t\t\tgotoAndPlay(startFrame);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tgotoAndStop(startFrame);\n\t\t\t}\n\t\t}\n\n\t\treturn _playingSequence;\n\t}\n\n\t/**\n\t * Moves the playhead in the timeline of the movie clip<code>play()</code>or<code>play(false)</code>.\n\t * Or moves the playhead in the timeline of the movie clip and all child movie clips<code>play(true)</code>.\n\t * Use<code>play(true)</code>in case when animation contain nested timelines for correct playback right after\n\t * initialization(like you see in the original swf file).\n\t * @param applyToAllChildren Specifies whether playhead should be moved in the timeline of the movie clip\n\t *(<code>false</code>)or also in the timelines of all child movie clips(<code>true</code>).\n\t */\n\tpublic function play(applyToAllChildren:Bool=false):Void\n\t{\n\t\t\n\t\t_started=true;\n\n\t\tif(applyToAllChildren)\n\t\t{\n\t\t\tvar i:Int=_mcVector.length;\n\t\t\twhile(i-->0)\n\t\t\t{\n\t\t\t\t_mcVector[i]._started=true;\n\t\t\t}\n\t\t}\n\n\t\t_play(applyToAllChildren, true);\n\t}\n\n\t/**\n\t * Stops the playhead in the movie clip<code>stop()</code>or<code>stop(false)</code>.\n\t * Or stops the playhead in the movie clip and in all child movie clips<code>stop(true)</code>.\n\t * Use<code>stop(true)</code>in case when animation contain nested timelines for full stop the\n\t * playhead in the movie clip and in all child movie clips.\n\t * @param applyToAllChildren Specifies whether playhead should be stopped in the timeline of the\n\t * movie clip(<code>false</code>)or also in the timelines of all child movie clips(<code>true</code>)\n\t */\n\tpublic function stop(applyToAllChildren:Bool=false):Void\n\t{\n\t\t\n\t\t_started=false;\n\n\t\tif(applyToAllChildren)\n\t\t{\n\t\t\tvar i:Int=_mcVector.length;\n\t\t\twhile(i-->0)\n\t\t\t{\n\t\t\t\t_mcVector[i]._started=false;\n\t\t\t}\n\t\t}\n\n\t\t_stop(applyToAllChildren, true);\n\t}\n\n\t/**\n\t * Brings the playhead to the specified frame of the movie clip and stops it there. First frame is \"1\"\n\t *\n\t * @param frame A number representing the frame number, or a string representing the label of the frame, to which the playhead is sent.\n\t */\n\tpublic function gotoAndStop(frame:Dynamic):Void\n\t{\n\t\tcheckAndSetCurrentFrame(frame);\n\n\t\tstop();\n\t}\n\n\t/**\n\t * Starts playing animation at the specified frame. First frame is \"1\"\n\t *\n\t * @param frame A number representing the frame number, or a string representing the label of the frame, to which the playhead is sent.\n\t */\n\tpublic function gotoAndPlay(frame:Dynamic):Void\n\t{\n\t\tcheckAndSetCurrentFrame(frame);\n\n\t\tplay();\n\t}\n\n\t/**\n\t * Set the<code>loop</code>value to the GAFMovieClip instance and for the all children.\n\t */\n\tpublic function loopAll(loop:Bool):Void\n\t{\n\t\t//TODO: loop\n\t\t//loop=loop;\n\n\t\tvar i:Int=_mcVector.length;\n\t\twhile(i-->0)\n\t\t{\n\t\t\t_mcVector[i].loop=loop;\n\t\t}\n\t}\n\n\t/** \n\t * Advances all objects by a certain time(in seconds).\n\t * @see starling.animation.IAnimatable\n\t */\n\tpublic function advanceTime(passedTime:Float):Void\n\t{\n\t\tif (_previousTime==-1) _previousTime = passedTime;\n\t\tvar lTime:Float = (passedTime - _previousTime) / 1000;\n\t\t_previousTime = passedTime;\n\n\t\tif(_disposed)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\telse if(_config.disposed)\n\t\t{\n\t\t\tdestroy();\n\t\t\treturn;\n\t\t}\n\n\t\tif(_inPlay && _frameDuration !=Math.POSITIVE_INFINITY)\n\t\t{\n\t\t\t_currentTime +=lTime;\n\n\t\t\tvar framesToPlay:Int=Std.int((_currentTime - _lastFrameTime)/ _frameDuration);\n\t\t\tif(_skipFrames)\n\t\t\t{\n\t\t\t\t//here we skip the drawing of all frames to be played right now, but the last one\n\t\t\t\tfor(i in 0...framesToPlay)\n\t\t\t\t{\n\t\t\t\t\tif(_inPlay)\n\t\t\t\t\t{\n\t\t\t\t\t\tchangeCurrentFrame((i + 1)!=framesToPlay);\n\t\t\t\t\t}\n\t\t\t\t\telse //if a playback was Interrupted by some action or an event\n\t\t\t\t\t{\n\t\t\t\t\t\tif(!_disposed)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdraw();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(framesToPlay>0)\n\t\t\t{\n\t\t\t\tchangeCurrentFrame(false);\n\t\t\t}\n\t\t}\n\t\tif(_mcVector!=null)\n\t\t{\n\t\t\tfor(i in 0..._mcVector.length)\n\t\t\t{\n\t\t\t\t_mcVector[i].advanceTime(passedTime);\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (_addToJuggler) Browser.window.requestAnimationFrame(advanceTime);\n\t}\n\n\t/** Shows bounds of a whole animation with a pivot point.\n\t * Used for debug purposes.\n\t */\n\tpublic function showBounds(value:Bool):Void\n\t{\n\t\tif(_config.bounds!=null)\n\t\t{\n\t\t\t//TODO showBounds\n\t\t\ttrace (\"TODO showBounds\");\n\t\t\t\n\t\t\t//if(!_boundsAndPivot)\n\t\t\t//{\n\t\t\t\t//_boundsAndPivot=new MeshBatch();\n\t\t\t\t//updateBounds(_config.bounds);\n\t\t\t//}\n//\n\t\t\t//if(value)\n\t\t\t//{\n\t\t\t\t//addChild(_boundsAndPivot);\n\t\t\t//}\n\t\t\t//else\n\t\t\t//{\n\t\t\t\t//removeChild(_boundsAndPivot);\n\t\t\t//}\n\t\t}\n\t}\n\n\t/**\n\t * Creates a new instance of GAFMovieClip.\n\t */\n\tpublic function copy():GAFMovieClip\n\t{\n\t\treturn new GAFMovieClip(_gafTimeline, Std.int(fps), _addToJuggler);\n\t}\n\t\n\t/**\n\t * give access to fields created dynamically\n\t * @param\t\n\t */\n\n\t \n\tpublic function getField (pName:String) {\n\t\tif (!Reflect.hasField(this, pName)) throw \"Field \"+pName+\" does not exist.\";\n\t\treturn Reflect.field(this,pName);\n\t}\n\t \n\t//--------------------------------------------------------------------------\n\t//\n\t//  PRIVATE METHODS\n\t//\n\t// --------------------------------------------------------------------------\n\n\tprivate function _gotoAndStop(frame:Dynamic):Void\n\t{\n\t\tcheckAndSetCurrentFrame(frame);\n\n\t\t_stop();\n\t}\n\n\tprivate function _play(applyToAllChildren:Bool=false, calledByUser:Bool=false):Void\n\t{\n\t\tif(_inPlay && !applyToAllChildren)\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\tvar i:Int=0, l:Int=0;\n\n\t\tif(_totalFrames>1)\n\t\t{\n\t\t\t_inPlay=true;\n\t\t}\n\n\t\tif(applyToAllChildren && _config.animationConfigFrames.frames.length>0)\n\t\t{\n\t\t\tvar frameConfig:CAnimationFrame=_config.animationConfigFrames.frames[_currentFrame];\n\t\t\tif(frameConfig.actions!=null)\n\t\t\t{\n\t\t\t\tvar action:CFrameAction;\n\t\t\t\tvar l:UInt = frameConfig.actions.length;\n\t\t\t\tfor(i in 0...l)\n\t\t\t\t{\n\t\t\t\t\taction=frameConfig.actions[i];\n\t\t\t\t\tif(action.type==CFrameAction.STOP\n\t\t\t\t\t\t\t||(action.type==CFrameAction.GOTO_AND_STOP\n\t\t\t\t\t\t\t&& Std.parseInt(action.params[0])==currentFrame))\n\t\t\t\t\t{\n\t\t\t\t\t\t_inPlay=false;\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar child:Container;\n\t\t\tvar childMC:GAFMovieClip;\n\t\t\tl = children.length;\n\t\t\tfor(i in 0...l)\n\t\t\t{\n\t\t\t\tchild=cast(getChildAt(i),Container);\n\t\t\t\tif(Std.is(child, GAFMovieClip))\n\t\t\t\t{\n\t\t\t\t\tchildMC=cast(child, GAFMovieClip);\n\t\t\t\t\tif(calledByUser)\n\t\t\t\t\t{\n\t\t\t\t\t\tchildMC.play(true);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tchildMC._play(true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\trunActions();\n\n\t\t_reset=false;\n\t}\n\n\tprivate function _stop(applyToAllChildren:Bool=false, calledByUser:Bool=false):Void\n\t{\n\t\t_inPlay=false;\n\n\t\tif(applyToAllChildren\n\t\t&& _config.animationConfigFrames.frames.length>0)\n\t\t{\n\t\t\tvar child:Container;\n\t\t\tvar childMC:GAFMovieClip;\n\t\t\tfor(i in 0...children.length)\n\t\t\t{\n\t\t\t\tchild = cast (getChildAt(i), Container);\n\t\t\t\tif(Std.is(child, GAFMovieClip))\n\t\t\t\t{\n\t\t\t\t\tchildMC=cast(child, GAFMovieClip);\n\t\t\t\t\tif(calledByUser)\n\t\t\t\t\t{\n\t\t\t\t\t\tchildMC.stop(true);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tchildMC._stop(true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate function checkPlaybackEvents():Void\n\t{\n\t\tvar sequence:CAnimationSequence;\n\t\tif(hasEventListener(EVENT_TYPE_SEQUENCE_START))\n\t\t{\n\t\t\tsequence=_config.animationSequences.getSequenceStart(_currentFrame + 1);\n\t\t\tif(sequence!=null)\n\t\t\t{\n\t\t\t\temit(EVENT_TYPE_SEQUENCE_START,{target:this,bubbles:false,data:sequence});\n\t\t\t}\n\t\t}\n\t\tif(hasEventListener(EVENT_TYPE_SEQUENCE_END))\n\t\t{\n\t\t\tsequence=_config.animationSequences.getSequenceEnd(_currentFrame + 1);\n\t\t\tif(sequence!=null)\n\t\t\t{\n\t\t\t\temit(EVENT_TYPE_SEQUENCE_END,{target:this,bubbles:false,data:sequence});\n\t\t\t}\n\t\t}\n\t\tif(hasEventListener(GAFEvent.COMPLETE))\n\t\t{\n\t\t\tif(_currentFrame==_finalFrame)\n\t\t\t{\n\t\t\t\temit(GAFEvent.COMPLETE);\n\t\t\t}\n\t\t}\n\t\t\n\t}\n\n\tprivate function runActions():Void\n\t{\n\t\tif(_config.animationConfigFrames.frames.length==0)\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\tvar i:Int=0, l:Int=0;\n\t\tvar actions:Array<CFrameAction> = _config.animationConfigFrames.frames[_currentFrame].actions;\n\t\tif(actions!=null)\n\t\t{\n\t\t\tvar action:CFrameAction;\n\t\t\tvar l:UInt = actions.length;\n\t\t\tfor(i in 0...l)\n\t\t\t{\n\t\t\t\taction=actions[i];\n\t\t\t\tswitch(action.type)\n\t\t\t\t{\n\t\t\t\t\tcase CFrameAction.STOP:\n\t\t\t\t\t\tstop();\n\t\t\t\t\tcase CFrameAction.PLAY:\n\t\t\t\t\t\tplay();\n\t\t\t\t\tcase CFrameAction.GOTO_AND_STOP:\n\t\t\t\t\t\tgotoAndStop(action.params[0]);\n\t\t\t\t\tcase CFrameAction.GOTO_AND_PLAY:\n\t\t\t\t\t\tgotoAndPlay(action.params[0]);\n\t\t\t\t\tcase CFrameAction.DISPATCH_EVENT:\n\t\t\t\t\t\tvar actionType:String=action.params[0];\n\t\t\t\t\t\tif(hasEventListener(actionType))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar bubbles:Bool = false;\n\t\t\t\t\t\t\tvar data:Dynamic=null;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tswitch(action.params.length)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcase 4:\n\t\t\t\t\t\t\t\t\tdata=action.params[3];\n\t\t\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\t\t\t// cancelable param is not used\n\t\t\t\t\t\t\t\t\tbubbles=cast(action.params[1],Bool);\n\t\t\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\t\t\tbubbles=cast(action.params[1],Bool);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\temit(actionType, {target:this,bubbles:bubbles, data:data});\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//if(actionType==CSound.GAF_PLAY_SOUND && GAF.autoPlaySounds)\n\t\t\t\t\t\t//{\n\t\t\t\t\t\t\t//_gafTimeline.startSound(currentFrame);\n\t\t\t\t\t\t//}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate function checkAndSetCurrentFrame(frame:Dynamic):Void\n\t{\n\t\tif (Std.is(frame,Int) && cast(frame,Int) > 0)\n\t\t{\n\t\t\tif(frame>_totalFrames)\n\t\t\t{\n\t\t\t\tframe=_totalFrames;\n\t\t\t}\n\t\t}\n\t\telse if(Std.is(frame, String))\n\t\t{\n\t\t\tvar label:String=frame;\n\t\t\tframe=_config.animationSequences.getStartFrameNo(label);\n\n\t\t\tif(frame==0)\n\t\t\t{\n\t\t\t\tthrow \"Frame label \" + label + \" not found\";\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tframe=1;\n\t\t}\n\n\t\tif(_playingSequence!=null && !_playingSequence.isSequenceFrame(frame))\n\t\t{\n\t\t\t_playingSequence=null;\n\t\t}\n\n\t\tif(_currentFrame !=frame - 1)\n\t\t{\n\t\t\t_currentFrame=cast(frame,UInt) - 1;\n\t\t\trunActions();\n\t\t\t//actions may Interrupt playback and lead to content disposition\n\t\t\tif(!_disposed)\n\t\t\t{\n\t\t\t\tdraw();\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate function clearDisplayList():Void\n\t{\n\t\tremoveChildren();\n\t}\n\n\tprivate function draw():Void\n\t{\n\t\t\n\t\tvar i:Int=0;\n\t\tvar l:Int=0;\n\n\t\tif(_config.debugRegions!=null)\n\t\t{\n\t\t\t// Non optimized way when there are debug regions\n\t\t\tclearDisplayList();\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Just hide the children to avoid dispatching a lot of events and alloc temporary arrays\n\t\t\tvar l:UInt = _displayObjectsVector.length;\n\t\t\tfor(i in 0...l)\n\t\t\t{\n\t\t\t\t_displayObjectsVector[i].alpha=0;\n\t\t\t}\n\n\t\t\tl = _mcVector.length;\n\t\t\t\n\t\t\tfor(i in 0...l)\n\t\t\t{\n\t\t\t\t_mcVector[i]._hidden=true;\n\t\t\t}\n\t\t}\n\n\t\tvar frames:Array<CAnimationFrame>=_config.animationConfigFrames.frames;\n\t\tif(frames.length>_currentFrame)\n\t\t{\n\t\t\tvar mc:GAFMovieClip;\n\t\t\tvar objectPivotMatrix:Matrix;\n\t\t\tvar displayObject:IGAFDisplayObject;\n\t\t\tvar instance:CAnimationFrameInstance;\n\t\t\tvar stencilMaskObject:DisplayObject;\n\n\t\t\tvar animationObjectsDictionary:Map<String,CAnimationObject>=_config.animationObjects.animationObjectsDictionary;\n\t\t\tvar frameConfig:CAnimationFrame=frames[_currentFrame];\n\t\t\tvar instances:Array<CAnimationFrameInstance>=frameConfig.instances;\n\t\t\tl=instances.length;\n\t\t\ti=0;\n\t\t\twhile(i<l)\n\t\t\t{\n\t\t\t\tinstance=instances[i++];\n\n\t\t\t\tdisplayObject = _displayObjectsDictionary[instance.id];\n\t\t\t\t\n\t\t\t\tif(displayObject!=null)\n\t\t\t\t{\n\t\t\t\t\tobjectPivotMatrix=getTransformMatrix(displayObject, GAFContainer.HELPER_MATRIX);\n\t\t\t\t\tif (Std.is(displayObject, GAFMovieClip)) mc = cast(displayObject, GAFMovieClip);\n\t\t\t\t\telse mc = null;\n\t\t\t\t\t\n\t\t\t\t\tif(mc!=null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(instance.alpha<0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmc.reset();\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if(mc._reset && mc._started)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmc._play(true);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmc._hidden=false;\n\t\t\t\t\t}\n\n\t\t\t\t\tif(instance.alpha<=0)\n\t\t\t\t\t{\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tdisplayObject.alpha=instance.alpha;\n\n\t\t\t\t\t//if display object is not a mask\n\t\t\t\t\tif(!animationObjectsDictionary[instance.id].mask)\n\t\t\t\t\t{\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\t//if display object is under mask\n\t\t\t\t\t\tif(instance.maskID!=\"\")\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\trenderDebug(mc, instance, true);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tstencilMaskObject=_stencilMasksDictionary[instance.maskID];\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif(stencilMaskObject!=null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tinstance.applyTransformMatrix(displayObject.transformationMatrix, objectPivotMatrix, _scale);\n\t\t\t\t\t\t\t\tdisplayObject.invalidateOrientation();\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tcast(displayObject, DisplayObject).mask = stencilMaskObject;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\taddChild(stencilMaskObject);\n\t\t\t\t\t\t\t\taddChild(cast(displayObject, DisplayObject));\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse //if display object is not masked\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\trenderDebug(mc, instance, _masked);\n\t\t\t\t\t\t\tinstance.applyTransformMatrix(displayObject.transformationMatrix, objectPivotMatrix, _scale);\n\t\t\t\t\t\t\tdisplayObject.invalidateOrientation();\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tdisplayObject.setFilterConfig(instance.filter, _scale);\n\t\t\t\t\t\t\taddChild(cast(displayObject,DisplayObject));\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif(mc!=null && mc._started)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmc._play(true);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif(DebugUtility.RENDERING_DEBUG && Std.is(displayObject,IGAFDebug))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar colors:Array<Int>=DebugUtility.getRenderingDifficultyColor(instance, _alphaLessMax, _masked, _hasFilter);\n\t\t\t\t\t\t\tcast(displayObject,IGAFDebug).debugColors=colors;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\n\t\t\t\t\t\tvar maskObject:IGAFDisplayObject=_displayObjectsDictionary[instance.id];\n\t\t\t\t\t\tif(maskObject!=null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar maskInstance:CAnimationFrameInstance=frameConfig.getInstanceByID(instance.id);\n\t\t\t\t\t\t\tif(maskInstance!=null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgetTransformMatrix(maskObject, GAFContainer.HELPER_MATRIX);\n\t\t\t\t\t\t\t\tmaskInstance.applyTransformMatrix(maskObject.transformationMatrix, GAFContainer.HELPER_MATRIX, _scale);\n\t\t\t\t\t\t\t\tmaskObject.invalidateOrientation();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tthrow \"Unable to find mask with ID \" + instance.id;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (Std.is(maskObject, GAFMovieClip)) mc = cast(maskObject, GAFMovieClip);\n\t\t\t\t\t\t\telse mc = null;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif(mc!=null && mc._started)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tmc._play(true);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif(_config.debugRegions!=null)\n\t\t{\n\t\t\taddDebugRegions();\n\t\t}\n\n\t\tcheckPlaybackEvents();\n\t}\n\n\tprivate function renderDebug(mc:GAFMovieClip, instance:CAnimationFrameInstance, masked:Bool):Void\n\t{\n\n\t\tif(DebugUtility.RENDERING_DEBUG && mc!=null)\n\t\t{\n\t\t\t//TODO renderDebug\n\t\t\ttrace (\"TODO renderDebug\");\n\t\t\t//var hasFilter:Bool=(instance.filter !=null)|| _hasFilter;\n\t\t\t////var alphaLessMax:Bool=instance.alpha<GAF.maxAlpha || _alphaLessMax;\n\t\t\t//var alphaLessMax:Bool=instance.alpha<GAF.maxAlpha || _alphaLessMax;\n\t\t\t//\n\t\t\t//var changed:Bool=false;\n\t\t\t//if(mc._alphaLessMax !=alphaLessMax)\n\t\t\t//{\n\t\t\t\t//mc._alphaLessMax=alphaLessMax;\n\t\t\t\t//changed=true;\n\t\t\t//}\n\t\t\t//if(mc._masked !=masked)\n\t\t\t//{\n\t\t\t\t//mc._masked=masked;\n\t\t\t\t//changed=true;\n\t\t\t//}\n\t\t\t//if(mc._hasFilter !=hasFilter)\n\t\t\t//{\n\t\t\t\t//mc._hasFilter=hasFilter;\n\t\t\t\t//changed=true;\n\t\t\t//}\n\t\t\t//if(changed)\n\t\t\t//{\n\t\t\t\t//mc.draw();\n\t\t\t//}\n\t\t}\n\t}\n\n\tprivate function addDebugRegions():Void\n\t{\n\t\t//TODO addDebugRegions\n\t\ttrace (\"TODO addDebugRegions\");\n\t\t\n\t\t//var debugView:Quad;\n\t\t//for (debugRegion in _config.debugRegions)\n\t\t//{\n\t\t\t//switch(debugRegion.type)\n\t\t\t//{\n\t\t\t\t//case GAFDebugInformation.TYPE_POINT:\n\t\t\t\t\t//debugView=new Quad(4, 4, debugRegion.color);\n\t\t\t\t\t//debugView.x=debugRegion.point.x - 2;\n\t\t\t\t\t//debugView.y=debugRegion.point.y - 2;\n\t\t\t\t\t//debugView.alpha=debugRegion.alpha;\n\t\t\t\t\t//break;\n\t\t\t\t//case GAFDebugInformation.TYPE_RECT:\n\t\t\t\t\t//debugView=new Quad(debugRegion.rect.width, debugRegion.rect.height, debugRegion.color);\n\t\t\t\t\t//debugView.x=debugRegion.rect.x;\n\t\t\t\t\t//debugView.y=debugRegion.rect.y;\n\t\t\t\t\t//debugView.alpha=debugRegion.alpha;\n\t\t\t\t\t//break;\n\t\t\t//}\n//\n\t\t\t//addChild(debugView);\n\t\t//}\n\t}\n\n\tprivate function reset():Void\n\t{\n\t\t_gotoAndStop((_reverse ? _finalFrame:_startFrame)+ 1);\n\t\t_reset=true;\n\t\t_currentTime=0;\n\t\t_lastFrameTime=0;\n\n\t\tvar i:Int=_mcVector.length;\n\t\twhile(i-->0)\n\t\t{\n\t\t\t_mcVector[i].reset();\n\t\t}\n\t}\n\t\n\tprivate function initialize(textureAtlas:CTextureAtlas, gafAsset:GAFAsset):Void\n\t{\n\t\t_displayObjectsDictionary=new Map<String,IGAFDisplayObject>();\n\t\t_stencilMasksDictionary=new Map<String,DisplayObject>();\n\t\t_displayObjectsVector=[];\n\t\t_imagesVector=[];\n\t\t_mcVector=[];\n\n\t\t_currentFrame=0;\n\t\t_totalFrames = _config.framesCount;\n\t\tfps=_config.stageConfig!=null ? _config.stageConfig.fps: 60;\n\n\t\tvar animationObjectsDictionary:Map<String,CAnimationObject>=_config.animationObjects.animationObjectsDictionary;\n\n\t\tvar displayObject:DisplayObject=null;\n\t\t\n\t\tfor (animationObjectConfig in animationObjectsDictionary)\n\t\t{\n\t\t\t\n\t\t\tswitch(animationObjectConfig.type)\n\t\t\t{\n\t\t\t\tcase CAnimationObject.TYPE_TEXTURE:\n\t\t\t\t\t\n\t\t\t\t\tvar texture:IGAFTexture = textureAtlas.getTexture(animationObjectConfig.regionID);\n\t\t\t\t\t\n\t\t\t\t\tif(Std.is(texture, GAFScale9Texture) && !animationObjectConfig.mask)// GAFScale9Image doesn't work as mask\n\t\t\t\t\t{\n\t\t\t\t\t\t//TODO initialize GAFScale9Texture\n\t\t\t\t\t\ttrace (\"TODO initialize GAFScale9Texture\");\n\t\t\t\t\t\t//displayObject=new GAFScale9Image(cast(texture,GAFScale9Texture));\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayObject = new GAFImage(texture);\n\t\t\t\t\t\tcast(displayObject,GAFImage).textureSmoothing=_smoothing;\n\t\t\t\t\t}\n\t\t\t\tcase CAnimationObject.TYPE_TEXTFIELD:\n\t\t\t\t\tvar tfObj:CTextFieldObject=_config.textFields.textFieldObjectsDictionary[animationObjectConfig.regionID];\n\t\t\t\t\tdisplayObject = new GAFTextField(tfObj, _scale, _contentScaleFactor);\n\t\t\t\tcase CAnimationObject.TYPE_TIMELINE:\n\t\t\t\t\tvar timeline:GAFTimeline=gafAsset.getGAFTimelineByID(animationObjectConfig.regionID);\n\t\t\t\t\tdisplayObject=new GAFMovieClip(timeline, Std.int(fps), false);\n\t\t\t}\n\n\t\t\tif(animationObjectConfig.maxSize!=null && Std.is(displayObject,IMaxSize))\n\t\t\t{\n\t\t\t\tvar maxSize:Point=new Point(\n\t\t\t\t\t\tanimationObjectConfig.maxSize.x * _scale,\n\t\t\t\t\t\tanimationObjectConfig.maxSize.y * _scale);\n\t\t\t\tcast(displayObject,IMaxSize).maxSize=maxSize;\n\t\t\t}\n\n\t\t\taddDisplayObject(animationObjectConfig.instanceID, displayObject);\n\t\t\tif(animationObjectConfig.mask)\n\t\t\t{\n\t\t\t\taddDisplayObject(animationObjectConfig.instanceID, displayObject, true);\n\t\t\t}\n\n\t\t\tif(_config.namedParts !=null)\n\t\t\t{\n\t\t\t\tvar instanceName:String=_config.namedParts[animationObjectConfig.instanceID];\n\t\t\t\tif (instanceName != null)\n\t\t\t\t{\n\t\t\t\t\tif(!Reflect.hasField(this, instanceName))\n\t\t\t\t\t{\n\t\t\t\t\t\tReflect.setField(this, _config.namedParts[animationObjectConfig.instanceID], displayObject);\n\t\t\t\t\t}\n\t\t\t\t\tdisplayObject.name=instanceName;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif(_addToJuggler)\n\t\t{\n\t\t\tBrowser.window.requestAnimationFrame(advanceTime);\n\t\t}\n\t}\n\n\tprivate function addDisplayObject(id:String, displayObject:DisplayObject, asMask:Bool=false):Void\n\t{\n\t\tif(asMask)\n\t\t{\n\t\t\t_stencilMasksDictionary[id] = displayObject;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t_displayObjectsDictionary[id]=cast(displayObject,IGAFDisplayObject);\n\t\t\t_displayObjectsVector[_displayObjectsVector.length]=cast(displayObject, IGAFDisplayObject);\n\t\t\tif(Std.is(displayObject, IGAFImage))\n\t\t\t{\n\t\t\t\t_imagesVector[_imagesVector.length]=cast(displayObject, IGAFImage);\n\t\t\t}\n\t\t\telse if(Std.is(displayObject, GAFMovieClip))\n\t\t\t{\n\t\t\t\t_mcVector[_mcVector.length]=cast(displayObject, GAFMovieClip);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate function updateBounds(bounds:Rectangle):Void\n\t{\n\t\t//TODO updateBounds\n\t\ttrace (\"TODO updateBounds\");\n\t\t\n\t\t//_boundsAndPivot.clear();\n\t\t////bounds\n\t\t//if(bounds.width>0 &&  bounds.height>0)\n\t\t//{\n\t\t\t//var quad:Quad=new Quad(bounds.width * _scale, 2, 0xff0000);\n\t\t\t//quad.x=bounds.x * _scale;\n\t\t\t//quad.y=bounds.y * _scale;\n\t\t\t//_boundsAndPivot.addMesh(quad);\n\t\t\t//quad=new Quad(bounds.width * _scale, 2, 0xff0000);\n\t\t\t//quad.x=bounds.x * _scale;\n\t\t\t//quad.y=bounds.bottom * _scale - 2;\n\t\t\t//_boundsAndPivot.addMesh(quad);\n\t\t\t//quad=new Quad(2, bounds.height * _scale, 0xff0000);\n\t\t\t//quad.x=bounds.x * _scale;\n\t\t\t//quad.y=bounds.y * _scale;\n\t\t\t//_boundsAndPivot.addMesh(quad);\n\t\t\t//quad=new Quad(2, bounds.height * _scale, 0xff0000);\n\t\t\t//quad.x=bounds.right * _scale - 2;\n\t\t\t//quad.y=bounds.y * _scale;\n\t\t\t//_boundsAndPivot.addMesh(quad);\n\t\t//}\n\t\t////pivot point\n\t\t//quad=new Quad(5, 5, 0xff0000);\n\t\t//_boundsAndPivot.addMesh(quad);\n\t}\n\n\n\tpublic function __debugHighlight():Void\n\t{\n\n\t\tif(Math.isNaN(__debugOriginalAlpha))\n\t\t{\n\t\t\t__debugOriginalAlpha=alpha;\n\t\t}\n\t\talpha=1;\n\t}\n\n\tpublic function __debugLowlight():Void\n\t{\n\n\t\tif(Math.isNaN(__debugOriginalAlpha))\n\t\t{\n\t\t\t__debugOriginalAlpha=alpha;\n\t\t}\n\t\talpha=.05;\n\t}\n\n\tpublic function __debugResetLight():Void\n\t{\n\n\t\tif(!Math.isNaN(__debugOriginalAlpha))\n\t\t{\n\t\t\talpha=__debugOriginalAlpha;\n\t\t\t__debugOriginalAlpha=null;\n\t\t}\n\t}\n\n\t//--------------------------------------------------------------------------\n\t//\n\t// OVERRIDDEN METHODS\n\t//\n\t//--------------------------------------------------------------------------\n\n\t/** Removes a child at a certain index. The index positions of any display objects above\n\t *  the child are decreased by 1. If requested, the child will be disposed right away. */\n\toverride public function removeChildAt(index:Int/*, dispose:Bool=false*/):DisplayObject\n\t{\n\t\t//TODO: removeChildAt\n\t\ttrace (\"TODO: removeChildAt\");\n\t\t\n\t\t//if(dispose)\n\t\t//{\n\t\t\t//var key:String;\n\t\t\t//var instanceName:String;\n\t\t\t//var child:DisplayObject=getChildAt(index);\n\t\t\t//if(Std.is(child, IGAFDisplayObject))\n\t\t\t//{\n\t\t\t\t//var id:Int=_mcVector.indexOf(cast(child,GAFMovieClip));\n\t\t\t\t//if(id>=0)\n\t\t\t\t//{\n\t\t\t\t\t//_mcVector.splice(id, 1);\n\t\t\t\t//}\n\t\t\t\t//id=_imagesVector.indexOf(cast(child,IGAFImage));\n\t\t\t\t//if(id>=0)\n\t\t\t\t//{\n\t\t\t\t\t//_imagesVector.splice(id, 1);\n\t\t\t\t//}\n\t\t\t\t//id=_displayObjectsVector.indexOf(cast(child,IGAFDisplayObject));\n\t\t\t\t//if(id>=0)\n\t\t\t\t//{\n\t\t\t\t\t//_displayObjectsVector.splice(id, 1);\n//\n\t\t\t\t\t//for(key in _displayObjectsDictionary.keys())\n\t\t\t\t\t//{\n\t\t\t\t\t\t//if(_displayObjectsDictionary[key]==child)\n\t\t\t\t\t\t//{\n\t\t\t\t\t\t\t//if(_config.namedParts !=null)\n\t\t\t\t\t\t\t//{\n\t\t\t\t\t\t\t\t//instanceName=_config.namedParts[key];\n\t\t\t\t\t\t\t\t//if(instanceName!=null && Reflect.hasField(this,instanceName))\n\t\t\t\t\t\t\t\t//{\n\t\t\t\t\t\t\t\t\t////delete this[instanceName];\n\t\t\t\t\t\t\t\t\t//Reflect.deleteField(this, instanceName);\n\t\t\t\t\t\t\t\t//}\n\t\t\t\t\t\t\t//}\n//\n\t\t\t\t\t\t\t////delete _displayObjectsDictionary[key];\n\t\t\t\t\t\t\t//_displayObjectsDictionary[key] = null;\n\t\t\t\t\t\t\t//break;\n\t\t\t\t\t\t//}\n\t\t\t\t\t//}\n\t\t\t\t//}\n//\n\t\t\t\t//for(key in _stencilMasksDictionary.keys())\n\t\t\t\t//{\n\t\t\t\t\t//if(_stencilMasksDictionary[key]==child)\n\t\t\t\t\t//{\n\t\t\t\t\t\t//if(_config.namedParts !=null)\n\t\t\t\t\t\t//{\n\t\t\t\t\t\t\t//instanceName=_config.namedParts[key];\n\t\t\t\t\t\t\t//if(instanceName!=null && Reflect.hasField(this,instanceName))\n\t\t\t\t\t\t\t//{\n\t\t\t\t\t\t\t\t////delete this[instanceName];\n\t\t\t\t\t\t\t\t//Reflect.deleteField(this, instanceName);\n\t\t\t\t\t\t\t//}\n\t\t\t\t\t\t//}\n//\n\t\t\t\t\t\t////delete _stencilMasksDictionary[key];\n\t\t\t\t\t\t//_stencilMasksDictionary[key]=null;\n\t\t\t\t\t\t//break;\n\t\t\t\t\t//}\n\t\t\t\t//}\n\t\t\t//}\n\t\t//}\n\n\t\t//return super.removeChildAt(index, dispose);\n\t\tgetChildAt(index).destroy();\n\t\treturn super.removeChildAt(index);\n\t}\n\n\t/** Returns a child object with a certain name(non-recursively). */\n\toverride public function getChildByName(name:String):DisplayObject\n\t{\n\t\tvar numChildren:Int=_displayObjectsVector.length;\n\t\tfor(i in 0...numChildren)\n\t\t\tif(_displayObjectsVector[i].name==name)\n\t\t\t\treturn cast(_displayObjectsVector[i],DisplayObject);\n\t\treturn super.getChildByName(name);\n\t}\n\n\t/**\n\t * Disposes all resources of the display object instance. Note:this method won't delete used texture atlases from GPU memory.\n\t * To delete texture atlases from GPU memory use<code>unloadFromVideoMemory()</code>method for<code>GAFTimeline</code>instance\n\t * from what<code>GAFMovieClip</code>was instantiated.\n\t * Call this method every time before delete no longer required instance! Otherwise GPU memory leak may occur!\n\t */\t\n\toverride public function destroy(?options:EitherType<Bool, DestroyOptions>):Void\n\t{\n\t\t//TODO destroy\n\t\t\n\t\tif(_disposed)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\tstop();\n\n\t\tvar l:Int=_displayObjectsVector.length;\n\t\tfor(i in 0...l)\n\t\t{\n\t\t\t_displayObjectsVector[i].destroy();\n\t\t}\n\n\t\tfor(lMask in _stencilMasksDictionary)\n\t\t{\n\t\t\tlMask.destroy();\n\t\t}\n//\n\t\t//if(_boundsAndPivot)\n\t\t//{\n\t\t\t//_boundsAndPivot.dispose();\n\t\t\t//_boundsAndPivot=null;\n\t\t//}\n\n\t\t_displayObjectsDictionary=null;\n\t\t_stencilMasksDictionary=null;\n\t\t_displayObjectsVector=null;\n\t\t_imagesVector=null;\n\t\t_gafTimeline=null;\n\t\t_mcVector=null;\n\t\t_config=null;\n\n\t\tif(parent!=null)\n\t\t{\n\t\t\tparent.removeChild(this);\n\t\t}\n\t\tsuper.destroy(options);\n\n\t\t_disposed=true;\n\t}\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  EVENT HANDLERS\n\t//\n\t//--------------------------------------------------------------------------\n\n\tprivate function changeCurrentFrame(isSkipping:Bool):Void\n\t{\n\t\t_nextFrame=_currentFrame +(_reverse ? -1:1);\n\t\t_startFrame=(_playingSequence!=null ? _playingSequence.startFrameNo:1)- 1;\n\t\t_finalFrame=(_playingSequence!=null ? _playingSequence.endFrameNo:_totalFrames)- 1;\n\n\t\tif(_nextFrame>=_startFrame && _nextFrame<=_finalFrame)\n\t\t{\n\t\t\t_currentFrame=_nextFrame;\n\t\t\t_lastFrameTime +=_frameDuration;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(!_loop)\n\t\t\t{\n\t\t\t\tstop();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t_currentFrame=_reverse ? _finalFrame:_startFrame;\n\t\t\t\t_lastFrameTime +=_frameDuration;\n\t\t\t\tvar resetInvisibleChildren:Bool=true;\n\t\t\t}\n\t\t}\n\n\t\trunActions();\n\n\t\t//actions may Interrupt playback and lead to content disposition\n\t\tif(_disposed)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\telse if(_config.disposed)\n\t\t{\n\t\t\tdestroy();\n\t\t\treturn;\n\t\t}\n\n\t\tif(!isSkipping)\n\t\t{\n\t\t\t// Draw will trigger events if any\n\t\t\tdraw();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcheckPlaybackEvents();\n\t\t}\n\n\t\t//if(resetInvisibleChildren)\n\t\t//{\n\t\t\t////reset timelines that aren't visible\n\t\t\t//var i:Int=_mcVector.length;\n\t\t\t//while(i-->0)\n\t\t\t//{\n\t\t\t\t//if(_mcVector[i]._hidden)\n\t\t\t\t//{\n\t\t\t\t\t//_mcVector[i].reset();\n\t\t\t\t//}\n\t\t\t//}\n\t\t//}\n\t}\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  GETTERS AND SETTERS\n\t//\n\t//--------------------------------------------------------------------------\n\n\t/**\n\t * Specifies the number of the frame in which the playhead is located in the timeline of the GAFMovieClip instance. First frame is \"1\"\n\t */\n\tpublic var currentFrame(get_currentFrame, null):Int;\n \t\n\t//@:keep\n\tprivate function get_currentFrame():Int\n\t{\n\t\treturn _currentFrame + 1;// Like in standart AS3 API for MovieClip first frame is \"1\" instead of \"0\"(but Internally used \"0\")\n\t}\n\n\t/**\n\t * The total number of frames in the GAFMovieClip instance.\n\t */\n\tpublic var totalFrames(get_totalFrames, null):Int;\n \t\n\t//@:keep\n\tprivate function get_totalFrames():Int\n\t{\n\t\treturn _totalFrames;\n\t}\n\n\t/**\n\t * Indicates whether GAFMovieClip instance already in play\n\t */\n\tpublic var inPlay(get_inPlay, null):Bool;\n \t\n\t//@:keep\n\tprivate function get_inPlay():Bool\n\t{\n\t\treturn _inPlay;\n\t}\n\n\t/**\n\t * Indicates whether GAFMovieClip instance continue playing from start frame after playback reached animation end\n\t */\n\tpublic var loop(get_loop, set_loop):Bool;\n \t\n\t//@:keep\n\tprivate function get_loop():Bool\n\t{\n\t\treturn _loop;\n\t}\n\n\t//@:keep\n\tprivate function set_loop(loop:Bool):Bool\n\t{\n\t\treturn _loop=loop;\n\t}\n\n\t/**\n\t * The smoothing filter that is used for the texture. Possible values are<code>TextureSmoothing.BILINEAR, TextureSmoothing.NONE, TextureSmoothing.TRILINEAR</code>\n\t */\n\t//@:keep\n\tprivate function set_smoothing(value:String):String\n\t{\n\t\t//if(TextureSmoothing.isValid(value))\n\t\t//{\n\t\t\t//_smoothing=value;\n//\n\t\t\t//var i:Int=_imagesVector.length;\n\t\t\t//while(i-->0)\n\t\t\t//{\n\t\t\t\t//_imagesVector[i].textureSmoothing=_smoothing;\n\t\t\t//}\n\t\t//}\n\t\t\n\t\treturn null;// _smoothing;\n\t}\n\n\tpublic var smoothing(get_smoothing, set_smoothing):String;\n \t\n\t//@:keep\n\tprivate function get_smoothing():String\n\t{\n\t\treturn null;// _smoothing;\n\t}\n\n\tpublic var useClipping(get_useClipping, set_useClipping):Bool;\n \t\n\t//@:keep\n\tprivate function get_useClipping():Bool\n\t{\n\t\treturn _useClipping;\n\t}\n\n\n\n\t/**\n\t * if set<code>true</code>-<code>GAFMivieclip</code>will be clipped with flash stage dimensions\n\t */\n\t//@:keep\n\tprivate function set_useClipping(value:Bool):Bool\n\t{\n\t\t_useClipping=value;\n\n\t\tif(_useClipping && _config.stageConfig!=null)\n\t\t{\n\t\t\t//mask=new Quad(_config.stageConfig.width * _scale, _config.stageConfig.height * _scale);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmask=null;\n\t\t}\n\t\t\n\t\treturn value;\n\t}\n\n\tpublic var fps(get_fps, set_fps):Float;\n\t\n\t//@:keep\n \tprivate function get_fps():Float\n\t{\n\t\tif(_frameDuration==Math.POSITIVE_INFINITY)\n\t\t{\n\t\t\treturn 0;\n\t\t}\n\t\treturn 1 / _frameDuration;\n\t}\n\n\t/**\n\t * Sets an individual frame rate for<code>GAFMovieClip</code>. If this value is lower than stage fps -  the<code>GAFMovieClip</code>will skip frames.\n\t */\n\t//@:keep\n\tprivate function set_fps(value:Float):Float\n\t{\n\t\tif(value<=0)\n\t\t{\n\t\t\t_frameDuration=Math.POSITIVE_INFINITY;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t_frameDuration=1 / value;\n\t\t}\n\n\t\tvar i:Int=_mcVector.length;\n\t\twhile(i-->0)\n\t\t{\n\t\t\t_mcVector[i].fps=value;\n\t\t}\n\t\t\n\t\treturn value;\n\t\t\n\t}\n\n\tpublic var reverse(get_reverse, set_reverse):Bool;\n\t\n\t//@:keep\n \tprivate function get_reverse():Bool\n\t{\n\t\treturn _reverse;\n\t}\n\n\t/**\n\t * If<code>true</code>animation will be playing in reverse mode\n\t */\n\t//@:keep\n\tprivate function set_reverse(value:Bool):Bool\n\t{\n\t\t_reverse=value;\n\n\t\tvar i:Int=_mcVector.length;\n\t\twhile(i-->0)\n\t\t{\n\t\t\t_mcVector[i]._reverse=value;\n\t\t}\n\t\t\n\t\treturn _reverse;\n\t}\n\n\tpublic var skipFrames(get_skipFrames, set_skipFrames):Bool;\n\t\n\t//@:keep\n \tprivate function get_skipFrames():Bool\n\t{\n\t\treturn _skipFrames;\n\t}\n\n\t/**\n\t * Indicates whether GAFMovieClip instance should skip frames when application fps drops down or play every frame not depending on application fps.\n\t * Value false will force GAFMovieClip to play each frame not depending on application fps(the same behavior as in regular Flash Movie Clip).\n\t * Value true will force GAFMovieClip to play animation \"in time\". And when application fps drops down it will start skipping frames(default behavior).\n\t */\n\t//@:keep\n\tprivate function set_skipFrames(value:Bool):Bool\n\t{\n\t\t_skipFrames=value;\n\n\t\tvar i:Int=_mcVector.length;\n\t\twhile(i-->0)\n\t\t{\n\t\t\t_mcVector[i]._skipFrames=value;\n\t\t}\n\t\t\n\t\treturn _skipFrames;\n\t}\n\n\n\t\n\t//--------------------------------------------------------------------------\n\t//\n\t//  STATIC METHODS\n\t//\n\t//--------------------------------------------------------------------------\n\n\t//[Inline]\n\tprivate static function getTransformMatrix(displayObject:IGAFDisplayObject, matrix:Matrix):Matrix\n\t{\n\t\tmatrix.copyFrom(displayObject.pivotMatrix);\n\t\treturn matrix;\n\t}\n\t\n\tstatic function __init__():Void {\n        #if js\n        untyped Object.defineProperty(GAFMovieClip.prototype, \"currentFrame\", { get: GAFMovieClip.prototype.get_currentFrame });\n        untyped Object.defineProperty(GAFMovieClip.prototype, \"totalFrames\", { get: GAFMovieClip.prototype.get_totalFrames });\n        untyped Object.defineProperty(GAFMovieClip.prototype, \"inPlay\", { get: GAFMovieClip.prototype.get_inPlay });\n        untyped Object.defineProperty(GAFMovieClip.prototype, \"loop\", { get: GAFMovieClip.prototype.get_loop, set: GAFMovieClip.prototype.set_loop });\n        untyped Object.defineProperty(GAFMovieClip.prototype, \"smoothing\", { get: GAFMovieClip.prototype.get_smoothing, set: GAFMovieClip.prototype.set_smoothing });\n        untyped Object.defineProperty(GAFMovieClip.prototype, \"useClipping\", { get: GAFMovieClip.prototype.get_useClipping, set: GAFMovieClip.prototype.set_useClipping });\n        untyped Object.defineProperty(GAFMovieClip.prototype, \"fps\", { get: GAFMovieClip.prototype.get_fps, set: GAFMovieClip.prototype.set_fps });\n        untyped Object.defineProperty(GAFMovieClip.prototype, \"reverse\", { get: GAFMovieClip.prototype.get_reverse, set: GAFMovieClip.prototype.set_reverse });\n        untyped Object.defineProperty(GAFMovieClip.prototype, \"skipFrames\", { get: GAFMovieClip.prototype.get_skipFrames, set: GAFMovieClip.prototype.set_skipFrames });\n        #end\n    }\n\n\t\n}","package com.github.haxePixiGAF.display;\n\nimport com.github.haxePixiGAF.data.textures.TextureWrapper;\nimport pixi.core.math.Matrix;\nimport pixi.core.math.shapes.Rectangle;\n\nusing com.github.haxePixiGAF.utils.MatrixUtility;\n\n/**\n * TODO\n * @author Mathieu Anthoine\n * \n */\nclass GAFScale9Texture implements IGAFTexture\n{\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PUBLIC VARIABLES\n\t//\n\t//--------------------------------------------------------------------------\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PRIVATE VARIABLES\n\t//\n\t//--------------------------------------------------------------------------\n\n\t/**\n\t * \n\t */\n\tprivate static inline var DIMENSIONS_ERROR:String=\"The width and height of the scale9Grid must be greater than zero.\";\n\t/**\n\t * \n\t */\n\tprivate static var HELPER_RECTANGLE:Rectangle = new Rectangle(0, 0, 0, 0);\n\n\tprivate var _id:String;\n\tprivate var _texture:TextureWrapper;\n\tprivate var _pivotMatrix:Matrix;\n\tprivate var _scale9Grid:Rectangle;\n\n\t//private var _topLeft:Texture;\n\t//private var _topCenter:Texture;\n\t//private var _topRight:Texture;\n\t//private var _middleLeft:Texture;\n\t//private var _middleCenter:Texture;\n\t//private var _middleRight:Texture;\n\t//private var _bottomLeft:Texture;\n\t//private var _bottomCenter:Texture;\n\t//private var _bottomRight:Texture;\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  CONSTRUCTOR\n\t//\n\t//--------------------------------------------------------------------------\n\n\tpublic function new(id:String, texture:TextureWrapper, pivotMatrix:Matrix, scale9Grid:Rectangle)\n\t{\n\t\t_id=id;\n\t\t_pivotMatrix=pivotMatrix;\n\n\t\t//if(scale9Grid.width<=0 || scale9Grid.height<=0)\n\t\t//{\n\t\t\t//throw new ArgumentError(DIMENSIONS_ERROR);\n\t\t//}\n\t\t//_texture=texture;\n\t\t_scale9Grid=scale9Grid;\n\t\tinitialize();\n\t}\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PUBLIC METHODS\n\t//\n\t//--------------------------------------------------------------------------\n\tpublic function copyFrom(newTexture:IGAFTexture):Void\n\t{\n\t\tif(Std.is(newTexture, GAFScale9Texture))\n\t\t{\n\t\t\t_id=newTexture.id;\n\t\t\t_texture=newTexture.texture;\n\t\t\t_pivotMatrix.copyFrom(newTexture.pivotMatrix);\n\t\t\t//_scale9Grid.copyFrom(cast(newTexture,GAFScale9Texture).scale9Grid);\n\t\t\t//_topLeft=(newTexture as GAFScale9Texture).topLeft;\n\t\t\t//_topCenter=(newTexture as GAFScale9Texture).topCenter;\n\t\t\t//_topRight=(newTexture as GAFScale9Texture).topRight;\n\t\t\t//_middleLeft=(newTexture as GAFScale9Texture).middleLeft;\n\t\t\t//_middleCenter=(newTexture as GAFScale9Texture).middleCenter;\n\t\t\t//_middleRight=(newTexture as GAFScale9Texture).middleRight;\n\t\t\t//_bottomLeft=(newTexture as GAFScale9Texture).bottomLeft;\n\t\t\t//_bottomCenter=(newTexture as GAFScale9Texture).bottomCenter;\n\t\t\t//_bottomRight=(newTexture as GAFScale9Texture).bottomRight;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthrow \"Incompatiable types GAFScale9Texture and \"+Type.getClassName(Type.getClass(newTexture));\n\t\t}\n\t}\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PRIVATE METHODS\n\t//\n\t//--------------------------------------------------------------------------\n\n\tprivate function initialize():Void\n\t{\n\t\t//var textureFrame:Rectangle=_texture.frame;\n\t\t//if(!textureFrame)\n\t\t//{\n\t\t\t//textureFrame=HELPER_RECTANGLE;\n\t\t\t//textureFrame.setTo(0, 0, _texture.width, _texture.height);\n\t\t//}\n\t\t//var leftWidth:Float=_scale9Grid.left;\n\t\t//var centerWidth:Float=_scale9Grid.width;\n\t\t//var rightWidth:Float=textureFrame.width - _scale9Grid.width - _scale9Grid.x;\n\t\t//var topHeight:Float=_scale9Grid.y;\n\t\t//var middleHeight:Float=_scale9Grid.height;\n\t\t//var bottomHeight:Float=textureFrame.height - _scale9Grid.height - _scale9Grid.y;\n//\n\t\t//var regionLeftWidth:Float=leftWidth + textureFrame.x;\n\t\t//var regionTopHeight:Float=topHeight + textureFrame.y;\n\t\t//var regionRightWidth:Float=rightWidth -(textureFrame.width - _texture.width)- textureFrame.x;\n\t\t//var regionBottomHeight:Float=bottomHeight -(textureFrame.height - _texture.height)- textureFrame.y;\n//\n\t\t//var hasLeftFrame:Bool=regionLeftWidth !=leftWidth;\n\t\t//var hasTopFrame:Bool=regionTopHeight !=topHeight;\n\t\t//var hasRightFrame:Bool=regionRightWidth !=rightWidth;\n\t\t//var hasBottomFrame:Bool=regionBottomHeight !=bottomHeight;\n//\n\t\t//var topLeftRegion:Rectangle=new Rectangle(0, 0, regionLeftWidth, regionTopHeight);\n\t\t//var topLeftFrame:Rectangle=(hasLeftFrame || hasTopFrame)? new Rectangle(textureFrame.x, textureFrame.y, leftWidth, topHeight):null;\n\t\t//_topLeft=Texture.fromTexture(_texture, topLeftRegion, topLeftFrame);\n//\n\t\t//var topCenterRegion:Rectangle=new Rectangle(regionLeftWidth, 0, centerWidth, regionTopHeight);\n\t\t//var topCenterFrame:Rectangle=hasTopFrame ? new Rectangle(0, textureFrame.y, centerWidth, topHeight):null;\n\t\t//_topCenter=Texture.fromTexture(_texture, topCenterRegion, topCenterFrame);\n//\n\t\t//var topRightRegion:Rectangle=new Rectangle(regionLeftWidth + centerWidth, 0, regionRightWidth, regionTopHeight);\n\t\t//var topRightFrame:Rectangle=(hasTopFrame || hasRightFrame)? new Rectangle(0, textureFrame.y, rightWidth, topHeight):null;\n\t\t//_topRight=Texture.fromTexture(_texture, topRightRegion, topRightFrame);\n//\n\t\t//var middleLeftRegion:Rectangle=new Rectangle(0, regionTopHeight, regionLeftWidth, middleHeight);\n\t\t//var middleLeftFrame:Rectangle=hasLeftFrame ? new Rectangle(textureFrame.x, 0, leftWidth, middleHeight):null;\n\t\t//_middleLeft=Texture.fromTexture(_texture, middleLeftRegion, middleLeftFrame);\n//\n\t\t//var middleCenterRegion:Rectangle=new Rectangle(regionLeftWidth, regionTopHeight, centerWidth, middleHeight);\n\t\t//_middleCenter=Texture.fromTexture(_texture, middleCenterRegion);\n//\n\t\t//var middleRightRegion:Rectangle=new Rectangle(regionLeftWidth + centerWidth, regionTopHeight, regionRightWidth, middleHeight);\n\t\t//var middleRightFrame:Rectangle=hasRightFrame ? new Rectangle(0, 0, rightWidth, middleHeight):null;\n\t\t//_middleRight=Texture.fromTexture(_texture, middleRightRegion, middleRightFrame);\n//\n\t\t//var bottomLeftRegion:Rectangle=new Rectangle(0, regionTopHeight + middleHeight, regionLeftWidth, regionBottomHeight);\n\t\t//var bottomLeftFrame:Rectangle=(hasLeftFrame || hasBottomFrame)? new Rectangle(textureFrame.x, 0, leftWidth, bottomHeight):null;\n\t\t//_bottomLeft=Texture.fromTexture(_texture, bottomLeftRegion, bottomLeftFrame);\n//\n\t\t//var bottomCenterRegion:Rectangle=new Rectangle(regionLeftWidth, regionTopHeight + middleHeight, centerWidth, regionBottomHeight);\n\t\t//var bottomCenterFrame:Rectangle=hasBottomFrame ? new Rectangle(0, 0, centerWidth, bottomHeight):null;\n\t\t//_bottomCenter=Texture.fromTexture(_texture, bottomCenterRegion, bottomCenterFrame);\n//\n\t\t//var bottomRightRegion:Rectangle=new Rectangle(regionLeftWidth + centerWidth, regionTopHeight + middleHeight, regionRightWidth, regionBottomHeight);\n\t\t//var bottomRightFrame:Rectangle=(hasBottomFrame || hasRightFrame)? new Rectangle(0, 0, rightWidth, bottomHeight):null;\n\t\t//_bottomRight=Texture.fromTexture(_texture, bottomRightRegion, bottomRightFrame);\n\t}\n\n\t//--------------------------------------------------------------------------\n\t//\n\t// OVERRIDDEN METHODS\n\t//\n\t//--------------------------------------------------------------------------\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  EVENT HANDLERS\n\t//\n\t//--------------------------------------------------------------------------\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  GETTERS AND SETTERS\n\t//\n\t//--------------------------------------------------------------------------\n\n\tpublic var id(get_id, null):String;\n \tprivate function get_id():String\n\t{\n\t\treturn _id;\n\t}\n\n\tpublic var pivotMatrix(get_pivotMatrix, null):Matrix;\n \tprivate function get_pivotMatrix():Matrix\n\t{\n\t\treturn _pivotMatrix;\n\t}\n\n\tpublic var texture(get_texture, null):TextureWrapper;\n \tprivate function get_texture():TextureWrapper\n\t{\n\t\treturn _texture;\n\t}\n\n\tpublic var scale9Grid(get_scale9Grid, null):Rectangle;\n \tprivate function get_scale9Grid():Rectangle\n\t{\n\t\treturn _scale9Grid;\n\t}\n\n\t//public var topLeft(get_topLeft, null):Texture;\n \t//private function get_topLeft():Texture\n\t//{\n\t\t//return _topLeft;\n\t//}\n//\n\t//public var topCenter(get_topCenter, null):Texture;\n \t//private function get_topCenter():Texture\n\t//{\n\t\t//return _topCenter;\n\t//}\n//\n\t//public var topRight(get_topRight, null):Texture;\n \t//private function get_topRight():Texture\n\t//{\n\t\t//return _topRight;\n\t//}\n//\n\t//public var middleLeft(get_middleLeft, null):Texture;\n \t//private function get_middleLeft():Texture\n\t//{\n\t\t//return _middleLeft;\n\t//}\n//\n\t//public var middleCenter(get_middleCenter, null):Texture;\n \t//private function get_middleCenter():Texture\n\t//{\n\t\t//return _middleCenter;\n\t//}\n//\n\t//public var middleRight(get_middleRight, null):Texture;\n \t//private function get_middleRight():Texture\n\t//{\n\t\t//return _middleRight;\n\t//}\n//\n\t//public var bottomLeft(get_bottomLeft, null):Texture;\n \t//private function get_bottomLeft():Texture\n\t//{\n\t\t//return _bottomLeft;\n\t//}\n//\n\t//public var bottomCenter(get_bottomCenter, null):Texture;\n \t//private function get_bottomCenter():Texture\n\t//{\n\t\t//return _bottomCenter;\n\t//}\n//\n\t//public var bottomRight(get_bottomRight, null):Texture;\n \t//private function get_bottomRight():Texture\n\t//{\n\t\t//return _bottomRight;\n\t//}\n\n\tpublic function clone():IGAFTexture\n\t{\n\t\treturn null;// new GAFScale9Texture(_id, _texture, _pivotMatrix.clone(), _scale9Grid);\n\t}\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  STATIC METHODS\n\t//\n\t//--------------------------------------------------------------------------\n}","package com.github.haxePixiGAF.display;\n\nimport com.github.haxePixiGAF.data.GAF;\nimport com.github.haxePixiGAF.data.config.CFilter;\nimport com.github.haxePixiGAF.data.config.CTextFieldObject;\nimport com.github.haxePixiGAF.text.TextFormatAlign;\nimport js.Lib;\nimport pixi.core.display.DisplayObject.DestroyOptions;\nimport pixi.core.graphics.Graphics;\nimport pixi.core.math.Matrix;\nimport pixi.core.math.Point;\nimport pixi.core.text.DefaultStyle;\nimport pixi.core.text.Text;\nimport haxe.extern.EitherType;\nimport pixi.core.text.TextStyle;\n\nusing com.github.haxePixiGAF.utils.MatrixUtility;\n\n/**\n * GAFTextField is a text entry control that extends functionality of the<code>feathers.controls.TextInput</code>\n * for the GAF library needs.\n * All dynamic text fields(including input text fields)in GAF library are instances of the GAFTextField.\n */\n/**\n * TODO\n * @author Mathieu Anthoine\n */\n@:expose(\"GAF.GAFTextField\")\nclass GAFTextField extends GAFContainer implements IGAFDebug\n{\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PUBLIC VARIABLES\n\t//\n\t//--------------------------------------------------------------------------\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PRIVATE VARIABLES\n\t//\n\t//--------------------------------------------------------------------------\n\n\tprivate static var HELPER_POINT:Point=new Point();\n\t\n\tprivate var _scale:Float;\n\tprivate var _csf:Float;\n\n\tprivate var __debugOriginalAlpha:Float=null;\n\n\tprivate var _orientationChanged:Bool;\n\n\tprivate var _config:CTextFieldObject;\n\t\n\tprivate var textField:Text;\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  CONSTRUCTOR\n\t//\n\t//--------------------------------------------------------------------------\n\n\t/**\n\t * @private\n\t * GAFTextField represents text field that is part of the<code>GAFMovieClip</code>\n\t * @param config\n\t * @param scale\n\t * @param csf\n\t */\n\tpublic function new(config:CTextFieldObject, scale:Float=1, csf:Float=1,?debug:Bool=false)\n\t{\n\t\t\n\t\tsuper();\n\t\t\n\t\tconfig.textFormat.wordWrap = true;\n\t\tconfig.textFormat.wordWrapWidth = config.width;\n\t\t\n\t\ttextField = new Text(config.text, config.textFormat);\n\t\t\n\t\tif(Math.isNaN(scale))scale=1;\n\t\tif(Math.isNaN(csf))csf=1;\n\t\t\t\t\n\t\t_scale=scale;\n\t\t_csf=csf;\n\t\t\n\t\tif (config.textFormat.align == TextFormatAlign.CENTER) {\n\t\t\ttextField.anchor.x = 0.5;\n\t\t\ttextField.x = config.width / 2;\n\t\t}\n\t\telse if (config.textFormat.align == TextFormatAlign.RIGHT) {\n\t\t\ttextField.anchor.x = 1;\n\t\t\ttextField.x = config.width;\n\t\t}\n\t\t\n\t\tif (debug) {\n\t\t\tvar lGraph:Graphics = new Graphics();\n\t\t\tlGraph.beginFill(0x00FFFF);\n\t\t\tlGraph.drawRect(0,0, config.width, config.height);\n\t\t\tlGraph.endFill();\n\t\t\tlGraph.alpha = 0.5;\n\t\t\taddChild(lGraph);\n\t\t}\n\t\t\n\t\t//TODO: Input text ?\n\t\t//restrict=config.restrict;\n\t\t//isEditable=config.editable;\n\t\t//isEnabled=isEditable || config.selectable;// editable text must be selectable anyway\n\t\t//displayAsPassword=config.displayAsPassword;\n\t\t//maxChars=config.maxChars;\n\t\t//verticalAlign=TextInput.VERTICAL_ALIGN_TOP;\n\n\t\t//textEditorProperties.textFormat=cloneTextFormat(config.textFormat);\n\t\t//textEditorProperties.embedFonts=GAF.useDeviceFonts ? false:config.embedFonts;\n\t\t//textEditorProperties.multiline=config.multiline;\n\t\t//textEditorProperties.wordWrap=config.wordWrap;\n\t\t//textEditorFactory=function():ITextEditor\n\t\t//{\n\t\t\t//return new GAFTextFieldTextEditor(_scale, _csf);\n\t\t//};\n\n\t\taddChild(textField);\n\t\t\n\t\tinvalidateSize();\n\n\t\t_config = config;\n\n\t}\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PUBLIC METHODS\n\t//\n\t//--------------------------------------------------------------------------\n\n\t/**\n\t * Creates a new instance of GAFTextField.\n\t */\n\tpublic function copy():GAFTextField\n\t{\n\t\tvar clone:GAFTextField=new GAFTextField(_config, _scale, _csf);\n\t\tclone.alpha=alpha;\n\t\tclone.visible=visible;\n\t\tclone.transformationMatrix=transformationMatrix;\n\t\t//TODO\n\t\t//clone.textEditorFactory=textEditorFactory;\n\t\tclone.setFilterConfig(_filterConfig, _filterScale);\n\n\t\treturn clone;\n\t}\n\n\t/**\n\t * @private\n\t * We need to update the textField size after the textInput was transformed\n\t */\n\tpublic function invalidateSize():Void\n\t{\n\t\t//if(textEditor && textEditor is TextFieldTextEditor)\n\t\t//{\n\t\t\t//(textEditor as TextFieldTextEditor).invalidate(INVALIDATION_FLAG_SIZE);\n\t\t//}\n\t\t//invalidate(INVALIDATION_FLAG_SIZE);\n\t}\n\n\tpublic var debugColors(null, set_debugColors):Array<Int>;\n \tprivate function set_debugColors(value:Array<Int>):Array<Int>\n\t{\n\t\t//var t:Texture=Texture.fromColor(1, 1, DebugUtility.RENDERING_NEUTRAL_COLOR, 1, true);\n\t\t//var bgImage:Image=new Image(t);\n\t\t//var alpha0:Float;\n\t\t//var alpha1:Float;\n//\n\t\t//switch(value.length)\n\t\t//{\n\t\t\t//case 1:\n\t\t\t\t//bgImage.color=value[0];\n\t\t\t\t//bgImage.alpha=(value[0]>>>24)/ 255;\n\t\t\t\t//break;\n\t\t\t//case 2:\n\t\t\t\t//bgImage.setVertexColor(0, value[0]);\n\t\t\t\t//bgImage.setVertexColor(1, value[0]);\n\t\t\t\t//bgImage.setVertexColor(2, value[1]);\n\t\t\t\t//bgImage.setVertexColor(3, value[1]);\n//\n\t\t\t\t//alpha0=(value[0]>>>24)/ 255;\n\t\t\t\t//alpha1=(value[1]>>>24)/ 255;\n\t\t\t\t//bgImage.setVertexAlpha(0, alpha0);\n\t\t\t\t//bgImage.setVertexAlpha(1, alpha0);\n\t\t\t\t//bgImage.setVertexAlpha(2, alpha1);\n\t\t\t\t//bgImage.setVertexAlpha(3, alpha1);\n\t\t\t\t//break;\n\t\t\t//case 3:\n\t\t\t\t//bgImage.setVertexColor(0, value[0]);\n\t\t\t\t//bgImage.setVertexColor(1, value[0]);\n\t\t\t\t//bgImage.setVertexColor(2, value[1]);\n\t\t\t\t//bgImage.setVertexColor(3, value[2]);\n//\n\t\t\t\t//alpha0=(value[0]>>>24)/ 255;\n\t\t\t\t//bgImage.setVertexAlpha(0, alpha0);\n\t\t\t\t//bgImage.setVertexAlpha(1, alpha0);\n\t\t\t\t//bgImage.setVertexAlpha(2,(value[1]>>>24)/ 255);\n\t\t\t\t//bgImage.setVertexAlpha(3,(value[2]>>>24)/ 255);\n\t\t\t\t//break;\n\t\t\t//case 4:\n\t\t\t\t//bgImage.setVertexColor(0, value[0]);\n\t\t\t\t//bgImage.setVertexColor(1, value[1]);\n\t\t\t\t//bgImage.setVertexColor(2, value[2]);\n\t\t\t\t//bgImage.setVertexColor(3, value[3]);\n//\n\t\t\t\t//bgImage.setVertexAlpha(0,(value[0]>>>24)/ 255);\n\t\t\t\t//bgImage.setVertexAlpha(1,(value[1]>>>24)/ 255);\n\t\t\t\t//bgImage.setVertexAlpha(2,(value[2]>>>24)/ 255);\n\t\t\t\t//bgImage.setVertexAlpha(3,(value[3]>>>24)/ 255);\n\t\t\t\t//break;\n\t\t//}\n//\n\t\t//return backgroundSkin=bgImage;\n\t\treturn null;\n\t}\n\n\toverride public function setFilterConfig(value:CFilter, scale:Float=1):Void\n\t{\n\t\tif(_filterConfig !=value || _filterScale !=scale)\n\t\t{\n\t\t\tif(value!=null)\n\t\t\t{\n\t\t\t\t_filterConfig=value;\n\t\t\t\t_filterScale=scale;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t_filterConfig=null;\n\t\t\t\t_filterScale=null;\n\t\t\t}\n\n\t\t\tapplyFilter();\n\t\t}\n\t}\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PRIVATE METHODS\n\t//\n\t//--------------------------------------------------------------------------\n\n\tprivate function applyFilter():Void\n\t{\n\t\t//if(textEditor)\n\t\t//{\n\t\t\t//if(textEditor is GAFTextFieldTextEditor)\n\t\t\t//{\n\t\t\t\t//(textEditor as GAFTextFieldTextEditor).setFilterConfig(_filterConfig, _filterScale);\n\t\t\t//}\n\t\t\t//else if(_filterConfig && !Math.isNaN(_filterScale))\n\t\t\t//{\n\t\t\t\t//if(_filterChain)\n\t\t\t\t//{\n\t\t\t\t\t//_filterChain.dispose();\n\t\t\t\t//}\n\t\t\t\t//else\n\t\t\t\t//{\n\t\t\t\t\t//_filterChain=new GAFFilterChain();\n\t\t\t\t//}\n//\n\t\t\t\t//_filterChain.setFilterData(_filterConfig);\n\t\t\t\t//filter=_filterChain;\n\t\t\t//}\n\t\t\t//else if(filter)\n\t\t\t//{\n\t\t\t\t//filter.dispose();\n\t\t\t\t//filter=null;\n//\n\t\t\t\t//_filterChain=null;\n\t\t\t//}\n\t\t//}\n\t}\n\n\tprivate function __debugHighlight():Void\n\t{\n\t\tif(Math.isNaN(__debugOriginalAlpha))\n\t\t{\n\t\t\t__debugOriginalAlpha=alpha;\n\t\t}\n\t\talpha=1;\n\t}\n\n\tprivate function __debugLowlight():Void\n\t{\n\t\tif(Math.isNaN(__debugOriginalAlpha))\n\t\t{\n\t\t\t__debugOriginalAlpha=alpha;\n\t\t}\n\t\talpha=.05;\n\t}\n\n\tprivate function __debugResetLight():Void\n\t{\n\t\tif(!Math.isNaN(__debugOriginalAlpha))\n\t\t{\n\t\t\talpha=__debugOriginalAlpha;\n\t\t\t__debugOriginalAlpha=null;\n\t\t}\n\t}\n\n\t//--------------------------------------------------------------------------\n\t//\n\t// OVERRIDDEN METHODS\n\t//\n\t//--------------------------------------------------------------------------\n\n\t//override private function createTextEditor():Void\n\t//{\n\t\t//super.createTextEditor();\n//\n\t\t//applyFilter();\n\t//}\n\n\toverride public function destroy(?options:EitherType<Bool, DestroyOptions>):Void\n\t{\n\t\tsuper.destroy(options);\n\t\t_config=null;\n\t}\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  EVENT HANDLERS\n\t//\n\t//--------------------------------------------------------------------------\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  GETTERS AND SETTERS\n\t//\n\t//--------------------------------------------------------------------------\n\n\t/**\n\t * The width of the text in pixels.\n\t * @return {Number}\n\t */\n\tpublic var textWidth(get_textWidth, null):Float;\n \tprivate function get_textWidth():Float\n\t{\n\t\t//validate();\n\t\t//textEditor.measureText(HELPER_POINT);\n\n\t\treturn HELPER_POINT.x;\n\t}\n\n\t/**\n\t * The height of the text in pixels.\n\t * @return {Number}\n\t */\n\tpublic var textHeight(get_textHeight, null):Float;\n \tprivate function get_textHeight():Float\n\t{\n\t\t//validate();\n\t\t//textEditor.measureText(HELPER_POINT);\n\n\t\treturn HELPER_POINT.y;\n\t}\n\t\n\tpublic var text (get, set):String;\n\t\n\tprivate function get_text ():String {\n\t\treturn textField.text;\n\t}\n\t\n\tprivate function set_text (pText:String):String {\n\t\treturn textField.text = pText;\n\t}\n\t\n\tpublic var style (get_style, null):TextStyle;\n\t\n\tprivate function get_style ():TextStyle {\n\t\treturn cast(textField.style,TextStyle);\n\t}\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  STATIC METHODS\n\t//\n\t//--------------------------------------------------------------------------\n\n\t/** @private */\n\tprivate function cloneTextFormat(textFormat:TextStyle):TextStyle\n\t{\n\t\tif (textFormat==null) throw \"Argument \\\"textFormat\\\" must be not null.\";\n\n\t\tvar result:TextStyle = new TextStyle();\n\t\tresult.fontFamily=textFormat.fontFamily;\n\t\tresult.fontSize=textFormat.fontSize;\n\t\tresult.fill = textFormat.fill;\n\t\tresult.fontWeight=textFormat.fontWeight;\n\t\tresult.fontStyle=textFormat.fontStyle;\n\t\t//textFormat. = underline;\n\t\t//textFormat. = url;\n\t\t//textFormat. = target;\n\t\tresult.align=textFormat.align;\n\t\t//textFormat. = leftMargin;\n\t\t//textFormat. = rightMargin;\n\t\t//textFormat. = blockIndent;\n\t\t//textFormat. = leading;\n\n\t\treturn result;\n\t}\n\t\n\n}","package com.github.haxePixiGAF.display;\n\nimport com.github.haxePixiGAF.data.textures.TextureWrapper;\nimport pixi.core.math.Matrix;\n\nusing com.github.haxePixiGAF.utils.MatrixUtility;\n\n/**\n * AS3 Conversion\n * @author Mathieu Anthoine\n * \n */\nclass GAFTexture implements IGAFTexture\n{\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PUBLIC VARIABLES\n\t//\n\t//--------------------------------------------------------------------------\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PRIVATE VARIABLES\n\t//\n\t//--------------------------------------------------------------------------\n\n\tprivate var _id:String;\n\tprivate var _texture:TextureWrapper;\n\tprivate var _pivotMatrix:Matrix;\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  CONSTRUCTOR\n\t//\n\t//--------------------------------------------------------------------------\n\n\tpublic function new(id:String, texture:TextureWrapper, pivotMatrix:Matrix)\n\t{\n\t\t_id=id;\n\t\t_texture=texture;\n\t\t_pivotMatrix = pivotMatrix;\n\t}\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PUBLIC METHODS\n\t//\n\t//--------------------------------------------------------------------------\n\tpublic function copyFrom(newTexture:IGAFTexture):Void\n\t{\n\t\tif(Std.is(newTexture, GAFTexture))\n\t\t{\n\t\t\t_id=newTexture.id;\n\t\t\t_texture=newTexture.texture;\n\t\t\t_pivotMatrix.copyFrom(newTexture.pivotMatrix);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthrow \"Incompatiable types GAFexture and \"+Type.getClassName(Type.getClass(newTexture));\n\t\t}\n\t}\n\t//--------------------------------------------------------------------------\n\t//\n\t//  PRIVATE METHODS\n\t//\n\t//--------------------------------------------------------------------------\n\n\t//--------------------------------------------------------------------------\n\t//\n\t// OVERRIDDEN METHODS\n\t//\n\t//--------------------------------------------------------------------------\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  EVENT HANDLERS\n\t//\n\t//--------------------------------------------------------------------------\n\n\t//--------------------------------------------------------------------------\n\t//\n\t//  GETTERS AND SETTERS\n\t//\n\t//--------------------------------------------------------------------------\n\n\tpublic var texture(get_texture, null):TextureWrapper;\n \tprivate function get_texture():TextureWrapper\n\t{\n\t\treturn _texture;\n\t}\n\n\tpublic var pivotMatrix(get_pivotMatrix, null):Matrix;\n \tprivate function get_pivotMatrix():Matrix\n\t{\n\t\treturn _pivotMatrix;\n\t}\n\n\tpublic var id(get_id, null):String;\n \tprivate function get_id():String\n\t{\n\t\treturn _id;\n\t}\n\n\tpublic function clone():IGAFTexture\n\t{\n\t\treturn new GAFTexture(_id, _texture, _pivotMatrix.clone());\n\t}\n}","package com.github.haxePixiGAF.sound;\n\nimport com.github.haxePixiGAF.data.config.CSound;\nimport com.github.haxePixiGAF.utils.GAFBytesInput;\n\n\n/**\n * TODO\n * @author Mathieu Anthoine\n *\n * \n */\nclass GAFSoundData\n{\n\tprivate var onFail:Void->Void;\n\tprivate var onSuccess:Void->Void;\n\tprivate var _sounds:Dynamic;\n\tprivate var _soundQueue:Array<CSound>;\n\n\t//public function getSoundByLinkage(linkage:String):Sound\n\t//{\n\t\t//if(_sounds)\n\t\t//{\n\t\t\t//return _sounds[linkage];\n\t\t//}\n\t\t//return null;\n\t//}\n\n\t/*gaf_private*/ public function addSound(soundData:CSound, swfName:String, soundBytes:GAFBytesInput):Void\n\t{\n\t\t//var sound:Sound=new Sound();\n\t\t//if(soundBytes)\n\t\t//{\n\t\t\t//if(soundBytes.position>0)\n\t\t\t//{\n\t\t\t\t//soundData.sound=_sounds[soundData.linkageName];\n\t\t\t\t//return;\n\t\t\t//}\n\t\t\t//else\n\t\t\t//{\n\t\t\t\t//sound.loadCompressedDataFromByteArray(soundBytes, soundBytes.length);\n\t\t\t//}\n\t\t//}\n\t\t//else\n\t\t//{\n\t\t\t//_soundQueue ||=new Array<CSound>();\n\t\t\t//_soundQueue.push(soundData);\n\t\t//}\n//\n\t\t//soundData.sound=sound;\n//\n\t\t//_sounds ||={};\n\t\t//if(soundData.linkageName.length>0)\n\t\t//{\n\t\t\t//_sounds[soundData.linkageName]=sound;\n\t\t//}\n\t\t//else\n\t\t//{\n\t\t\t//_sounds[swfName] ||={};\n\t\t\t//_sounds[swfName][soundData.soundID]=sound;\n\t\t//}\n\t}\n//\n\t//gaf_private function getSound(soundID:Int, swfName:String):Sound\n\t//{\n\t\t//if(_sounds)\n\t\t//{\n\t\t\t//return _sounds[swfName][soundID];\n\t\t//}\n\t\t//return null;\n\t//}\n//\n\t//gaf_private function loadSounds(onSuccess:Function, onFail:Function):Void\n\t//{\n\t\t//onSuccess=onSuccess;\n\t\t//onFail=onFail;\n\t\t//loadSound();\n\t//}\n//\n\t//function dispose():Void\n\t//{\n\t\t//for(var sound:Sound in _sounds)\n\t\t//{\n\t\t\t//sound.close();\n\t\t//}\n\t//}\n//\n\t//private function loadSound():Void\n\t//{\n\t\t//var soundDataConfig:CSound=_soundQueue.pop();\n\t\t//with(soundDataConfig.sound)\n\t\t//{\n\t\t\t//addEventListener(Event.COMPLETE, onSoundLoaded);\n\t\t\t//addEventListener(IOErrorEvent.IO_ERROR, onError);\n\t\t\t//load(new URLRequest(soundDataConfig.source));\n\t\t//}\n\t//}\n//\n\t//private function onSoundLoaded(event:Event):Void\n\t//{\n\t\t//removeListeners(event);\n//\n\t\t//if(_soundQueue.length>0)\n\t\t//{\n\t\t\t//loadSound();\n\t\t//}\n\t\t//else\n\t\t//{\n\t\t\t//onSuccess();\n\t\t\t//onSuccess=null;\n\t\t\t//onFail=null;\n\t\t//}\n\t//}\n//\n\t//private function onError(event:IOErrorEvent):Void\n\t//{\n\t\t//removeListeners(event);\n\t\t//onFail(event);\n\t\t//onFail=null;\n\t\t//onSuccess=null;\n\t//}\n//\n\t//private function removeListeners(event:Event):Void\n\t//{\n\t\t//var sound:Sound=event.target as Sound;\n\t\t//sound.removeEventListener(Event.COMPLETE, onSoundLoaded);\n\t\t//sound.removeEventListener(IOErrorEvent.IO_ERROR, onError);\n\t//}\n//\n\t//gaf_private function get hasSoundsToLoad():Bool\n\t//{\n\t\t//return _soundQueue && _soundQueue.length>0;\n\t//}\n}","package com.github.haxePixiGAF.utils;\nimport com.github.haxePixiGAF.data.GAF;\nimport com.github.haxePixiGAF.data.config.CAnimationFrameInstance;\n\n/**\n * AS3 Conversion\n * @author Mathieu Anthoine\n * \n */\nclass DebugUtility\n{\n\tpublic static var RENDERING_DEBUG:Bool=false;\n\n\tpublic static inline var RENDERING_NEUTRAL_COLOR:Int=0xCCCCCCCC;\n\tpublic static inline var RENDERING_FILTER_COLOR:Int=0xFF00FFFF;\n\tpublic static inline var RENDERING_MASK_COLOR:Int=0xFFFF0000;\n\tpublic static inline var RENDERING_ALPHA_COLOR:Int=0xFFFFFF00;\n\n\tprivate static var cHR:Array<Int>=[255, 255, 0, 0, 0, 255, 255];\n\tprivate static var cHG:Array<Int>=[0, 255, 255, 255, 0, 0, 0];\n\tprivate static var cHB:Array<Int>=[0, 0, 0, 255, 255, 255, 0];\n\n\tprivate static var aryRGB:Array<Array<Int>>=[cHR, cHG, cHB];\n\n\tpublic static function getRenderingDifficultyColor(instance:CAnimationFrameInstance,\n\t\t\t\t\t\t\t\t\t\t\t\t\t   alphaLess1:Bool=false, masked:Bool=false,\n\t\t\t\t\t\t\t\t\t\t\t\t\t   hasFilter:Bool=false):Array<Int>\n\t{\n\t\tvar colors:Array<Int>=[];\n\t\tif(instance.maskID!=null || masked)\n\t\t{\n\t\t\tcolors.push(RENDERING_MASK_COLOR);\n\t\t}\n\t\tif(instance.filter!=null || hasFilter)\n\t\t{\n\t\t\tcolors.push(RENDERING_FILTER_COLOR);\n\t\t}\n\t\tif(instance.alpha<GAF.maxAlpha || alphaLess1)\n\t\t{\n\t\t\tcolors.push(RENDERING_ALPHA_COLOR);\n\t\t}\n\t\tif(colors.length==0)\n\t\t{\n\t\t\tcolors.push(RENDERING_NEUTRAL_COLOR);\n\t\t}\n\n\t\treturn colors;\n\t}\n\n\t/**\n\t * Returns color that objects would be painted\n\t * @param difficulty value from 0 to 255\n\t * @return color in ARGB format(from green to red)\n\t */\n\tprivate static function getColor(difficulty:Int):Int\n\t{\n\t\tif(difficulty>255)\n\t\t{\n\t\t\tdifficulty=255;\n\t\t}\n\n\t\tvar colorArr:Array<Int>=getRGB(Math.floor(120 - 120 /(255 / difficulty)));\n\n\t\tvar color:Int=(((difficulty>>1)+ 0x7F)<<24)| colorArr[0]<<16 | colorArr[1]<<8;\n\n\t\treturn color;\n\t}\n\n\t// return RGB color from hue circle rotation\n\t// [0]=R, [1]=G, [2]=B\n\tprivate static function getRGB(rot:Int):Array<Int>\n\t{\n\t\tvar retVal:Array<Int>=[];\n\t\tvar aryNum:Int=0;\n\t\t// 0 ~ 360\n\t\twhile(rot<0 || rot>360)\n\t\t{\n\t\t\trot +=(rot<0)? 360:-360;\n\t\t}\n\t\taryNum=Math.floor(rot / 60);\n\t\t// get color\n\t\tretVal=getH(rot, aryNum);\n\t\treturn retVal;\n\t}\n\n\t// rotation　=>hue\n\tprivate static function getH(rot:Int, aryNum:Int):Array<Int>\n\t{\n\t\tvar retVal:Array<Int>=[0, 0, 0];\n\t\tvar nextNum:Int=aryNum + 1;\n\t\tfor(i in 0...3)\n\t\t{\n\t\t\tretVal[i]=getHP(aryRGB[i], rot, aryNum, nextNum);\n\t\t}\n\t\treturn retVal;\n\t}\n\n\tprivate static function getHP(_P:Array<Int>, rot:Int, aryNum:Int, nextNum:Int):Int\n\t{\n\t\tvar retVal:Int=0;\n\t\tvar aryC:Int=0;\n\t\tvar nextC:Int=0;\n\t\tvar rH:Int=0;\n\t\tvar rotR:Float;\n\t\taryC=_P[aryNum];\n\t\tnextC=_P[nextNum];\n\t\trotR=(aryC + nextC)/ 60 *(rot - 60 * aryNum);\n\t\trH=Math.floor((_P[nextNum]==0)? aryC - rotR:aryC + rotR);\n\t\tretVal=Math.round(Math.min(255, Math.abs(rH)));\n\t\treturn retVal;\n\t}\n\n\tpublic static function getObjectMemoryHash(obj:Dynamic):String\n\t{\n\t\tvar memoryHash:String=null;\n\n\t\ttry\n\t\t{\n\t\t\t//TODO FakeClass\n\t\t\ttrace (\"TODO: FakeClass\");\n\t\t\t//FakeClass(obj);\n\t\t}\n\t\tcatch(e:Dynamic)\n\t\t{\n\t\t\t//TODO memoryHash\n\t\t\ttrace (\"TODO: memoryHash\");\n\t\t\tmemoryHash = \"TODO: memoryHash\";// Std.string(e).replace(/.*([@|\\$].*?)to .*$/gi, '$1');\n\t\t}\n\n\t\treturn memoryHash;\n\t}\n}\n\n/*\nclass FakeClass\n{\n}\n*/\n","package com.github.haxePixiGAF.utils;\nimport pixi.interaction.EventEmitter;\n\n/**\n * Class that adds equivalents to AS3 methods\n * @author Mathieu Anthoine\n */\nclass EventEmitterUtility\n{\n\n\tpublic static function hasEventListener(pEmitter:EventEmitter,pEvent:String):Bool {\n\t\tif (pEmitter.listeners==null) return false;\n\t\treturn pEmitter.listeners(pEvent).length > 0;\n\t}\n\t\n}","/*\n * Copyright (C)2005-2017 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\npackage haxe.io;\n\n/**\n\tAn Input is an abstract reader. See other classes in the `haxe.io` package\n\tfor several possible implementations.\n\n\tAll functions which read data throw `Eof` when the end of the stream\n\tis reached.\n**/\nclass Input {\n\n\t/**\n\t\tEndianness (word byte order) used when reading numbers.\n\n\t\tIf `true`, big-endian is used, otherwise `little-endian` is used.\n\t**/\n\tpublic var bigEndian(default,set) : Bool;\n\n\t#if cs\n\tprivate var helper:BytesData;\n\t#elseif java\n\tprivate var helper:java.nio.ByteBuffer;\n\t#end\n\n\t/**\n\t\tRead and return one byte.\n\t**/\n\tpublic function readByte() : Int {\n\t#if cpp\n\t\tthrow \"Not implemented\";\n\t#else\n\t\treturn throw \"Not implemented\";\n\t#end\n\t}\n\n\t/**\n\t\tRead `len` bytes and write them into `s` to the position specified by `pos`.\n\n\t\tReturns the actual length of read data that can be smaller than `len`.\n\n\t\tSee `readFullBytes` that tries to read the exact amount of specified bytes.\n\t**/\n\tpublic function readBytes( s : Bytes, pos : Int, len : Int ) : Int {\n\t\tvar k = len;\n\t\tvar b = #if (js || hl) @:privateAccess s.b #else s.getData() #end;\n\t\tif( pos < 0 || len < 0 || pos + len > s.length )\n\t\t\tthrow Error.OutsideBounds;\n\t\ttry {\n\t\t\twhile( k > 0 ) {\n\t\t\t\t#if neko\n\t\t\t\t\tuntyped __dollar__sset(b,pos,readByte());\n\t\t\t\t#elseif php\n\t\t\t\t\tb.set(pos, readByte());\n\t\t\t\t#elseif cpp\n\t\t\t\t\tb[pos] = untyped readByte();\n\t\t\t\t#else\n\t\t\t\t\tb[pos] = cast readByte();\n\t\t\t\t#end\n\t\t\t\tpos++;\n\t\t\t\tk--;\n\t\t\t}\n\t\t} catch (eof: haxe.io.Eof){}\n\t\treturn len-k;\n\t}\n\n\t/**\n\t\tClose the input source.\n\n\t\tBehaviour while reading after calling this method is unspecified.\n\t**/\n\tpublic function close() : Void {\n\t}\n\n\tfunction set_bigEndian( b : Bool ) : Bool {\n\t\tbigEndian = b;\n\t\treturn b;\n\t}\n\n\t/* ------------------ API ------------------ */\n\n\t/**\n\t\tRead and return all available data.\n\n\t\tThe `bufsize` optional argument specifies the size of chunks by\n\t\twhich data is read. Its default value is target-specific.\n\t**/\n\tpublic function readAll( ?bufsize : Int ) : Bytes {\n\t\tif( bufsize == null )\n\t\t#if php\n\t\t\tbufsize = 8192; // default value for PHP and max under certain circumstances\n\t\t#else\n\t\t\tbufsize = (1 << 14); // 16 Ko\n\t\t#end\n\n\t\tvar buf = Bytes.alloc(bufsize);\n\t\tvar total = new haxe.io.BytesBuffer();\n\t\ttry {\n\t\t\twhile( true ) {\n\t\t\t\tvar len = readBytes(buf,0,bufsize);\n\t\t\t\tif( len == 0 )\n\t\t\t\t\tthrow Error.Blocked;\n\t\t\t\ttotal.addBytes(buf,0,len);\n\t\t\t}\n\t\t} catch( e : Eof ) { }\n\t\treturn total.getBytes();\n\t}\n\n\t/**\n\t\tRead `len` bytes and write them into `s` to the position specified by `pos`.\n\n\t\tUnlike `readBytes`, this method tries to read the exact `len` amount of bytes.\n\t**/\n\tpublic function readFullBytes( s : Bytes, pos : Int, len : Int ) : Void {\n\t\twhile( len > 0 ) {\n\t\t\tvar k = readBytes(s,pos,len);\n\t\t\tif (k == 0)\n\t\t\t\tthrow Error.Blocked;\n\t\t\tpos += k;\n\t\t\tlen -= k;\n\t\t}\n\t}\n\n\t/**\n\t\tRead and return `nbytes` bytes.\n\t**/\n\tpublic function read( nbytes : Int ) : Bytes {\n\t\tvar s = Bytes.alloc(nbytes);\n\t\tvar p = 0;\n\t\twhile( nbytes > 0 ) {\n\t\t\tvar k = readBytes(s,p,nbytes);\n\t\t\tif( k == 0 ) throw Error.Blocked;\n\t\t\tp += k;\n\t\t\tnbytes -= k;\n\t\t}\n\t\treturn s;\n\t}\n\n\t/**\n\t\tRead a string until a character code specified by `end` is occurred.\n\n\t\tThe final character is not included in the resulting string.\n\t**/\n\tpublic function readUntil( end : Int ) : String {\n\t\tvar buf = new BytesBuffer();\n\t\tvar last : Int;\n\t\twhile( (last = readByte()) != end )\n\t\t\tbuf.addByte( last );\n\t\treturn buf.getBytes().toString();\n\t}\n\n\t/**\n\t\tRead a line of text separated by CR and/or LF bytes.\n\n\t\tThe CR/LF characters are not included in the resulting string.\n\t**/\n\tpublic function readLine() : String {\n\t\tvar buf = new BytesBuffer();\n\t\tvar last : Int;\n\t\tvar s;\n\t\ttry {\n\t\t\twhile( (last = readByte()) != 10 )\n\t\t\t\tbuf.addByte( last );\n\t\t\ts = buf.getBytes().toString();\n\t\t\tif( s.charCodeAt(s.length-1) == 13 ) s = s.substr(0,-1);\n\t\t} catch( e : Eof ) {\n\t\t\ts = buf.getBytes().toString();\n\t\t\tif( s.length == 0 )\n\t\t\t\t#if neko neko.Lib.rethrow #else throw #end (e);\n\t\t}\n\t\treturn s;\n\t}\n\n\t/**\n\t\tRead a 32-bit floating point number.\n\n\t\tEndianness is specified by the `bigEndian` property.\n\t**/\n\tpublic function readFloat() : Float {\n\t\treturn FPHelper.i32ToFloat(readInt32());\n\t}\n\n\t/**\n\t\tRead a 64-bit double-precision floating point number.\n\n\t\tEndianness is specified by the `bigEndian` property.\n\t**/\n\tpublic function readDouble() : Float {\n\t\tvar i1 = readInt32();\n\t\tvar i2 = readInt32();\n\t\treturn bigEndian ? FPHelper.i64ToDouble(i2,i1) : FPHelper.i64ToDouble(i1,i2);\n\t}\n\n\t/**\n\t\tRead a 8-bit signed integer.\n\t**/\n\tpublic function readInt8() : Int {\n\t\tvar n = readByte();\n\t\tif( n >= 128 )\n\t\t\treturn n - 256;\n\t\treturn n;\n\t}\n\n\t/**\n\t\tRead a 16-bit signed integer.\n\n\t\tEndianness is specified by the `bigEndian` property.\n\t**/\n\tpublic function readInt16() : Int {\n\t\tvar ch1 = readByte();\n\t\tvar ch2 = readByte();\n\t\tvar n = bigEndian ? ch2 | (ch1 << 8) : ch1 | (ch2 << 8);\n\t\tif( n & 0x8000 != 0 )\n\t\t\treturn n - 0x10000;\n\t\treturn n;\n\t}\n\n\t/**\n\t\tRead a 16-bit unsigned integer.\n\n\t\tEndianness is specified by the `bigEndian` property.\n\t**/\n\tpublic function readUInt16() : Int {\n\t\tvar ch1 = readByte();\n\t\tvar ch2 = readByte();\n\t\treturn bigEndian ? ch2 | (ch1 << 8) : ch1 | (ch2 << 8);\n\t}\n\n\t/**\n\t\tRead a 24-bit signed integer.\n\n\t\tEndianness is specified by the `bigEndian` property.\n\t**/\n\tpublic function readInt24() : Int {\n\t\tvar ch1 = readByte();\n\t\tvar ch2 = readByte();\n\t\tvar ch3 = readByte();\n\t\tvar n = bigEndian ? ch3 | (ch2 << 8) | (ch1 << 16) : ch1 | (ch2 << 8) | (ch3 << 16);\n\t\tif( n & 0x800000 != 0 )\n\t\t\treturn n - 0x1000000;\n\t\treturn n;\n\t}\n\n\t/**\n\t\tRead a 24-bit unsigned integer.\n\n\t\tEndianness is specified by the `bigEndian` property.\n\t**/\n\tpublic function readUInt24() : Int {\n\t\tvar ch1 = readByte();\n\t\tvar ch2 = readByte();\n\t\tvar ch3 = readByte();\n\t\treturn bigEndian ? ch3 | (ch2 << 8) | (ch1 << 16) : ch1 | (ch2 << 8) | (ch3 << 16);\n\t}\n\n\t/**\n\t\tRead a 32-bit signed integer.\n\n\t\tEndianness is specified by the `bigEndian` property.\n\t**/\n\tpublic function readInt32() : Int {\n\t\tvar ch1 = readByte();\n\t\tvar ch2 = readByte();\n\t\tvar ch3 = readByte();\n\t\tvar ch4 = readByte();\n#if (php || python)\n\t\t// php will overflow integers.  Convert them back to signed 32-bit ints.\n\t\tvar n = bigEndian ? ch4 | (ch3 << 8) | (ch2 << 16) | (ch1 << 24) : ch1 | (ch2 << 8) | (ch3 << 16) | (ch4 << 24);\n\t\tif (n & 0x80000000 != 0)\n\t\t\treturn ( n | 0x80000000);\n\t\telse return n;\n#elseif lua\n\t\tvar n = bigEndian ? ch4 | (ch3 << 8) | (ch2 << 16) | (ch1 << 24) : ch1 | (ch2 << 8) | (ch3 << 16) | (ch4 << 24);\n\t\treturn lua.Boot.clamp(n);\n#else\n\t\treturn bigEndian ? ch4 | (ch3 << 8) | (ch2 << 16) | (ch1 << 24) : ch1 | (ch2 << 8) | (ch3 << 16) | (ch4 << 24);\n#end\n\t}\n\n\t/**\n\t\tRead and `len` bytes as a string.\n\t**/\n\tpublic function readString( len : Int ) : String {\n\t\tvar b = Bytes.alloc(len);\n\t\treadFullBytes(b,0,len);\n\t\t#if neko\n\t\treturn neko.Lib.stringReference(b);\n\t\t#else\n\t\treturn b.toString();\n\t\t#end\n\t}\n\n#if neko\n\tstatic var _float_of_bytes = neko.Lib.load(\"std\",\"float_of_bytes\",2);\n\tstatic var _double_of_bytes = neko.Lib.load(\"std\",\"double_of_bytes\",2);\n\tstatic function __init__() untyped {\n\t\tInput.prototype.bigEndian = false;\n\t}\n#end\n\n#if (flash || js || python)\n\tfunction getDoubleSig(bytes:Array<Int>)\n\t{\n\t\treturn (((bytes[1]&0xF) << 16) | (bytes[2] << 8) | bytes[3] ) * 4294967296. +\n\t\t\t(bytes[4] >> 7) * 2147483648 +\n\t\t\t(((bytes[4]&0x7F) << 24) | (bytes[5] << 16) | (bytes[6] << 8) | bytes[7]);\n\t}\n#end\n\n}\n","/*\n * Copyright (C)2005-2017 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\npackage haxe.io;\n\nclass BytesInput extends Input {\n\tvar b : #if js js.html.Uint8Array #elseif hl hl.Bytes #else BytesData #end;\n\t#if !flash\n\tvar pos : Int;\n\tvar len : Int;\n\tvar totlen : Int;\n\t#end\n\n\t/** The current position in the stream in bytes. */\n\tpublic var position(get,set) : Int;\n\n\t/** The length of the stream in bytes. */\n\tpublic var length(get,never) : Int;\n\n\tpublic function new( b : Bytes, ?pos : Int, ?len : Int ) {\n\t\tif( pos == null ) pos = 0;\n\t\tif( len == null ) len = b.length - pos;\n\t\tif( pos < 0 || len < 0 || pos + len > b.length ) throw Error.OutsideBounds;\n\t\t#if flash\n\t\tvar ba = b.getData();\n\t\tba.position = pos;\n\t\tif( len != ba.bytesAvailable ) {\n\t\t\t// truncate\n\t\t\tthis.b = new flash.utils.ByteArray();\n\t\t\tba.readBytes(this.b,0,len);\n\t\t} else\n\t\t\tthis.b = ba;\n\t\tthis.b.endian = flash.utils.Endian.LITTLE_ENDIAN;\n\t\t#else\n\t\tthis.b = #if (js || hl) @:privateAccess b.b #else b.getData() #end;\n\t\tthis.pos = pos;\n\t\tthis.len = len;\n\t\tthis.totlen = len;\n\t\t#end\n\t\t#if python\n\t\tbigEndian = false;\n\t\t#end\n\t}\n\n\tinline function get_position() : Int {\n\t\t#if flash\n\t\treturn b.position;\n\t\t#else\n\t\treturn pos;\n\t\t#end\n\t}\n\n\tinline function get_length() : Int {\n\t\t#if flash\n\t\treturn b.length;\n\t\t#else\n\t\treturn totlen;\n\t\t#end\n\t}\n\n\tfunction set_position( p : Int ) : Int {\n\t\tif( p < 0 ) p = 0;\n\t\telse if( p > length ) p = length;\n\t\t#if flash\n\t\treturn b.position = p;\n\t\t#else\n\t\tlen = totlen - p;\n\t\treturn pos = p;\n\t\t#end\n\t}\n\n\tpublic override function readByte() : Int {\n\t\t#if flash\n\t\t\treturn try b.readUnsignedByte() catch( e : Dynamic ) throw new Eof();\n\t\t#else\n\t\t\tif( this.len == 0 )\n\t\t\t\tthrow new Eof();\n\t\t\tlen--;\n\t\t\t#if neko\n\t\t\treturn untyped __dollar__sget(b,pos++);\n\t\t\t#elseif php\n\t\t\treturn b.get(pos++);\n\t\t\t#elseif cpp\n\t\t\treturn untyped b[pos++];\n\t\t\t#elseif java\n\t\t\treturn untyped b[pos++] & 0xFF;\n\t\t\t#else\n\t\t\treturn b[pos++];\n\t\t\t#end\n\t\t#end\n\t}\n\n\tpublic override function readBytes( buf : Bytes, pos, len ) : Int {\n\t\t#if !neko\n\t\t\tif( pos < 0 || len < 0 || pos + len > buf.length )\n\t\t\t\tthrow Error.OutsideBounds;\n\t\t#end\n\t\t#if flash\n\t\t\tvar avail : Int = b.bytesAvailable;\n\t\t\tif( len > avail && avail > 0 ) len = avail;\n\t\t\ttry b.readBytes(buf.getData(),pos,len) catch( e : Dynamic ) throw new Eof();\n\t\t#elseif java\n\t\t\tvar avail : Int = this.len;\n\t\t\tif ( len > avail ) len = avail;\n\t\t\tif (len == 0)\n\t\t\t\tthrow new Eof();\n\t\t\tjava.lang.System.arraycopy(this.b, this.pos, buf.getData(), pos, len);\n\t\t\tthis.pos += len;\n\t\t\tthis.len -= len;\n\t\t#elseif cs\n\t\t\tvar avail : Int = this.len;\n\t\t\tif ( len > avail ) len = avail;\n\t\t\tif (len == 0)\n\t\t\t\tthrow new Eof();\n\t\t\tcs.system.Array.Copy(this.b,this.pos, buf.getData(), pos, len);\n\t\t\tthis.pos += len;\n\t\t\tthis.len -= len;\n\t\t#else\n\t\t\tif( this.len == 0 && len > 0 )\n\t\t\t\tthrow new Eof();\n\t\t\tif( this.len < len )\n\t\t\t\tlen = this.len;\n\t\t\t#if neko\n\t\t\ttry untyped __dollar__sblit(buf.getData(),pos,b,this.pos,len) catch( e : Dynamic ) throw Error.OutsideBounds;\n\t\t\t#elseif php\n\t\t\tbuf.getData().blit(pos, b, this.pos, len);\n\t\t\t#elseif hl\n\t\t\t@:privateAccess buf.b.blit(pos, b, this.pos, len);\n\t\t\t#else\n\t\t\tvar b1 = b;\n\t\t\tvar b2 = #if js @:privateAccess buf.b #else buf.getData() #end;\n\t\t\tfor( i in 0...len )\n\t\t\t\tb2[pos+i] = b1[this.pos+i];\n\t\t\t#end\n\t\t\tthis.pos += len;\n\t\t\tthis.len -= len;\n\t\t#end\n\t\treturn len;\n\t}\n\n\t#if flash\n\t@:dox(hide)\n\toverride function set_bigEndian(e) {\n\t\tbigEndian = e;\n\t\tb.endian = e ? flash.utils.Endian.BIG_ENDIAN : flash.utils.Endian.LITTLE_ENDIAN;\n\t\treturn e;\n\t}\n\n\t@:dox(hide)\n\toverride function readFloat() {\n\t\treturn try b.readFloat() catch( e : Dynamic ) throw new Eof();\n\t}\n\n\t@:dox(hide)\n\toverride function readDouble() {\n\t\treturn try b.readDouble() catch( e : Dynamic ) throw new Eof();\n\t}\n\n\t@:dox(hide)\n\toverride function readInt8() {\n\t\treturn try b.readByte() catch( e : Dynamic ) throw new Eof();\n\t}\n\n\t@:dox(hide)\n\toverride function readInt16() {\n\t\treturn try b.readShort() catch( e : Dynamic ) throw new Eof();\n\t}\n\n\t@:dox(hide)\n\toverride function readUInt16() : Int {\n\t\treturn try b.readUnsignedShort() catch( e : Dynamic ) throw new Eof();\n\t}\n\n\t@:dox(hide)\n\toverride function readInt32() : Int {\n\t\treturn try b.readInt() catch( e : Dynamic ) throw new Eof();\n\t}\n\n\t@:dox(hide)\n\toverride function readString( len : Int ) {\n\t\treturn try b.readUTFBytes(len) catch( e : Dynamic ) throw new Eof();\n\t}\n\n\t#end\n\n}\n","package com.github.haxePixiGAF.utils;\n\nimport haxe.io.Bytes;\nimport haxe.io.BytesInput;\n\n/**\n * AS3 ByteArray \"Wrapper\"\n * @author Mathieu Anthoine\n */\nclass GAFBytesInput extends BytesInput {\n\n\tpublic function new(b:Bytes, ?pos:Int, ?len:Int) \n\t{\n\t\tsuper(b, pos, len);\t\n\t}\t\n\t\n\t// AS3 readByte\n\tpublic function readSByte():Int {\n\t\tvar lByte:Int = readByte();\n\t\treturn lByte > 128 ? lByte-256 : lByte;\n\t}\n\t\n\tpublic function readUnsignedByte ():UInt {\n\t\treturn readByte();\n\t}\n\t\n\tpublic function readShort():Int {\n\t\tvar lByte:Int = readUInt16();\n\t\treturn lByte > 128 ? lByte-256 : lByte;\n\t}\t\n\t\n\tpublic function readUnsignedShort ():UInt {\n\t\treturn readUInt16();\n\t}\n\t\n\tpublic function readInt ():Int {\n\t\treturn readUInt32();\n\t\t//var lInt:Float = readUInt32();\n\t\t//lInt = lInt > 2147483648 ? lInt - 4294967296 : lInt;\n\t\t//return cast(lInt, Int);\n\t}\n\t\n\tpublic function readUnsignedInt():UInt {\n\t\treturn untyped readUInt32();\n\t}\n\n\t/**\n\t * may return an Unsigned Int32 but UInt32 are converted to Int32 if they are above 2147483648\n\t * @return signed Int32\n\t */\n\tprivate function readUInt32 ():UInt {\n\t\tvar lA:UInt = readUInt16();\n\t\tvar lB:UInt = readUInt16();\n\t\treturn (lB << 16) + lA;\n\t}\n\t\n\tpublic function readBoolean ():Bool {\n\t\treturn readSByte() != 0;\n\t}\n\t\n\tpublic function readUTF ():String {\n\t\treturn readString(readUnsignedShort());\n\t}\n\t\n\t\n}","package com.github.haxePixiGAF.utils;\n\n/**\n * AS3 Conversion\n * @author Mathieu Anthoine\n * \n */\nclass MathUtility\n{\n\tpublic static inline var epsilon:Float=0.00001;\n\n\tpublic static var PI_Q:Float=Math.PI / 4.0;\n\n\tpublic static inline function equals(a:Float, b:Float):Bool\n\t{\n\t\tif(Math.isNaN(a)|| Math.isNaN(b))\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\treturn Math.abs(a - b)<epsilon;\n\t}\n\n\tpublic static function getItemIndex(source:Array<Float>, target:Float):Int\n\t{\n\t\tfor(i in 0...source.length)\n\t\t{\n\t\t\tif(equals(source[i], target))\n\t\t\t{\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n}","package com.github.haxePixiGAF.utils;\nimport pixi.core.math.Matrix;\n\n/**\n * Class that adds equivalents to AS3 methods\n * @author Mathieu Anthoine\n */\nclass MatrixUtility\n{\n\t\n\tpublic static function concat (pA:Matrix,pB:Matrix):Void {\n\t\tvar lMatrix:Matrix = new Matrix();\n\t\t\n\t\tlMatrix.a = pB.a * pA.a + pB.c * pA.b;\n\t\tlMatrix.b = (pB.b*pA.a+pB.d*pA.b);\n\t\tlMatrix.c = (pB.a*pA.c+pB.c*pA.d);\n\t\tlMatrix.d = pB.b * pA.c + pB.d * pA.d;\n\t\tlMatrix.tx = pB.a*pA.tx+pB.c*pA.ty+pB.tx;\n\t\tlMatrix.ty = pB.b*pA.tx+pB.d*pA.ty+pB.ty;\n\t\t\n\t\tlMatrix.copy(pA);\n\n\t}\n\t\n\tpublic static function copyFrom(pA:Matrix, pB:Matrix):Void {\n\t\tpB.copy(pA);\n\t}\n\t\n}","package com.github.haxePixiGAF.utils;\nimport pixi.core.math.shapes.Rectangle;\n\n/**\n * Class that adds equivalents to AS3 methods\n * @author Mathieu Anthoine\n */\nclass RectangleUtility\n{\n\tpublic static function copyFrom(pA:Rectangle, pB:Rectangle):Void {\n\t\tpA.x = pB.x;\n\t\tpA.y = pB.y;\n\t\tpA.width = pB.width;\n\t\tpA.height = pB.height;\n\t}\n\t\n\tpublic static function union(pA:Rectangle, pB:Rectangle):Rectangle {\n\t\tvar lX:Float = Math.min(pA.x, pB.x);\n\t\tvar lY:Float = Math.min(pA.y, pB.y);\n\t\tvar lRight:Float = Math.max(pA.x + pA.width, pB.x + pB.width);\n\t\tvar lBottom:Float = Math.max(pA.y + pA.height, pB.y + pB.height);\n\n\t\treturn new Rectangle(lX, lY, lRight - lX, lBottom - lY);\n\n\t}\n}","package com.github.mathieuanthoine.gaf;\n\nimport com.github.haxePixiGAF.core.GAFLoader;\nimport com.github.haxePixiGAF.core.ZipToGAFAssetConverter;\nimport com.github.haxePixiGAF.data.GAFBundle;\nimport com.github.haxePixiGAF.data.GAFGFXData;\nimport com.github.haxePixiGAF.data.GAFTimeline;\nimport com.github.haxePixiGAF.display.GAFImage;\nimport com.github.haxePixiGAF.display.GAFMovieClip;\nimport com.github.haxePixiGAF.display.GAFTexture;\nimport com.github.haxePixiGAF.display.IGAFTexture;\nimport com.github.haxePixiGAF.events.GAFEvent;\nimport haxe.Timer;\nimport haxe.ds.ObjectMap;\nimport js.Browser;\nimport js.Lib;\nimport js.html.CanvasElement;\nimport js.html.MouseEvent;\nimport pixi.core.display.Container;\nimport pixi.core.math.Matrix;\nimport pixi.core.renderers.Detector;\nimport pixi.core.renderers.webgl.WebGLRenderer;\nimport pixi.core.sprites.Sprite;\nimport pixi.core.textures.Texture;\nimport pixi.interaction.InteractionEvent;\nimport pixi.loaders.LoaderOptions;\n\n/**\n * @author Mathieu Anthoine\n */\n\nclass Main\n{\n\n\tprivate var renderer:WebGLRenderer;\n\tprivate var stage:Container;\n\t\n\tprivate var gafBundle: GAFBundle;\n\tprivate var gafMovieClip: GAFMovieClip;\n\tprivate var currentAsset: String;\n\n\tprivate static function main ():Void\n\t{\n\t\tnew Main();\n\t}\n\n\t/**\n\t * création du jeu\n\t*/\n\tprivate function new ()\n\t{\n\t\trenderer = Detector.autoDetectRenderer(400, 400, {backgroundColor : 0x8F8B83});\n\t\tBrowser.document.body.appendChild(renderer.view);\n\n\t\tstage = new Container();\n\t\t\n\t\tnew Perf(\"TL\");\n\t\t\n\t\tvar converter: ZipToGAFAssetConverter = new ZipToGAFAssetConverter();\n\t\tconverter.once(GAFEvent.COMPLETE, onConverted);\t\t\n\t\tconverter.convert([\"bundle/skeleton.gaf\",\"bundle/ufo-monster.gaf\"]);\n\t\t\n\t}\n\t\n\tprivate function onConverted (pEvent:Dynamic):Void {\n\n\t\tgafBundle = cast(pEvent.target,ZipToGAFAssetConverter).gafBundle;\n\t\tinitGAFMovieClip(\"skeleton\");\n\t\t\n\t\tBrowser.window.addEventListener(\"click\", onClick);\t\t\n\t\tBrowser.window.requestAnimationFrame(gameLoop);\n\t\t\n\t}\n\t\n\tprivate function onClick(pEvent: MouseEvent): Void\n\t{\n\t\tif (!Std.is(pEvent.target,CanvasElement)) return;\n\t\t\n\t\tif (currentAsset == \"skeleton\")\n\t\t{\n\t\t\tinitGAFMovieClip(\"ufo-monster\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tinitGAFMovieClip(\"skeleton\");\n\t\t}\n\t}\n\t\n\tprivate function initGAFMovieClip(swfName: String): Void\n\t{\n\t\tcurrentAsset = swfName;\n\n\t\tgafMovieClip!=null ? gafMovieClip.destroy() : null;\n\n\t\tstage.removeChildren();\n\n\t\tvar timeline: GAFTimeline = gafBundle.getGAFTimeline(swfName, \"rootTimeline\");\n\n\t\tgafMovieClip = new GAFMovieClip(timeline);\n\t\tgafMovieClip.play();\n\t\t\n\t\tstage.addChild(gafMovieClip);\n\t}\n\t\n\tprivate function gameLoop(pIdentifier:Float)\n\t{\n\t\tBrowser.window.requestAnimationFrame(gameLoop);\n\t\trenderer.render(stage);\n\t}\n\n}","/*\n * Copyright (C)2005-2017 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\npackage haxe;\n\n/**\n\tLog primarily provides the `trace()` method, which is invoked upon a call to\n\t`trace()` in Haxe code.\n**/\nclass Log {\n\n\t/**\n\t\tOutputs `v` in a platform-dependent way.\n\n\t\tThe second parameter `infos` is injected by the compiler and contains\n\t\tinformation about the position where the `trace()` call was made.\n\n\t\tThis method can be rebound to a custom function:\n\t\t\tvar oldTrace = haxe.Log.trace; // store old function\n\t\t\thaxe.Log.trace = function(v, ?infos) {\n\t\t\t  // handle trace\n\t\t\t}\n\t\t\t...\n\t\t\thaxe.Log.trace = oldTrace;\n\n\t\tIf it is bound to null, subsequent calls to `trace()` will cause an\n\t\texception.\n\t**/\n\tpublic static dynamic function trace( v : Dynamic, ?infos : PosInfos ) : Void {\n\t\t#if flash\n\t\t\t#if (fdb || native_trace)\n\t\t\t\tvar pstr = infos == null ? \"(null)\" : infos.fileName + \":\" + infos.lineNumber;\n\t\t\t\tvar str = flash.Boot.__string_rec(v, \"\");\n\t\t\t\tif( infos != null && infos.customParams != null ) for( v in infos.customParams ) str += \",\" + flash.Boot.__string_rec(v, \"\");\n\t\t\t\tuntyped __global__[\"trace\"](pstr+\": \"+str);\n\t\t\t#else\n\t\t\t\tuntyped flash.Boot.__trace(v,infos);\n\t\t\t#end\n\t\t#elseif neko\n\t\t\tuntyped {\n\t\t\t\t$print(infos.fileName + \":\" + infos.lineNumber + \": \", v);\n\t\t\t\tif( infos.customParams != null ) for( v in infos.customParams ) $print(\",\", v);\n\t\t\t\t$print(\"\\n\");\n\t\t\t}\n\t\t#elseif js\n\t\t\tuntyped js.Boot.__trace(v,infos);\n\t\t#elseif (php && php7)\n\t\t\tphp.Boot.trace(v, infos);\n\t\t#elseif php\n\t\t\tif (infos!=null && infos.customParams!=null) {\n\t\t\t\tvar extra:String = \"\";\n\t\t\t\tfor( v in infos.customParams )\n\t\t\t\t\textra += \",\" + v;\n\t\t\t\tuntyped __call__('_hx_trace', v + extra, infos);\n\t\t\t}\n\t\t\telse\n\t\t\t\tuntyped __call__('_hx_trace', v, infos);\n\t\t#elseif cpp\n\t\t\tif (infos!=null && infos.customParams!=null) {\n\t\t\t\tvar extra:String = \"\";\n\t\t\t\tfor( v in infos.customParams )\n\t\t\t\t\textra += \",\" + v;\n\t\t\t\tuntyped __trace(v + extra,infos);\n\t\t\t}\n\t\t\telse\n\t\t\t\tuntyped __trace(v,infos);\n\t\t#elseif (cs || java || lua)\n\t\t\tvar str:String = null;\n\t\t\tif (infos != null) {\n\t\t\t\tstr = infos.fileName + \":\" + infos.lineNumber + \": \" + v;\n\t\t\t\tif (infos.customParams != null)\n\t\t\t\t{\n\t\t\t\t\tstr += \",\" + infos.customParams.join(\",\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tstr = v;\n\t\t\t}\n\t\t\t#if cs\n\t\t\tcs.system.Console.WriteLine(str);\n\t\t\t#elseif java\n\t\t\tuntyped __java__(\"java.lang.System.out.println(str)\");\n\t\t\t#elseif lua\n\t\t\tif (str == null) str = \"null\";\n\t\t\tuntyped __define_feature__(\"use._hx_print\",_hx_print(str));\n\t\t\t#end\n\t\t#elseif (python)\n\t\t\tvar str:String = null;\n\t\t\tif (infos != null) {\n\t\t\t\tstr = infos.fileName + \":\" + Std.string(infos.lineNumber) + \": \" + v;\n\t\t\t\tif (infos.customParams != null) {\n\t\t\t\t\tstr += \",\" + infos.customParams.join(\",\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tstr = v;\n\t\t\t}\n\t\t\tpython.Lib.println(str);\n\t\t#elseif hl\n\t\t\tvar pstr = infos == null ? \"(null)\" : infos.fileName + \":\" + infos.lineNumber;\n\t\t\tvar str = Std.string(v);\n\t\t\tif( infos != null && infos.customParams != null ) for( v in infos.customParams ) str += \",\" + Std.string(v);\n\t\t\tSys.println(pstr+\": \"+str);\n\t\t#end\n\t}\n\n\t#if (flash || js)\n\t/**\n\t\tClears the trace output.\n\t**/\n\tpublic static dynamic function clear() : Void {\n\t\t#if flash\n\t\tuntyped flash.Boot.__clear_trace();\n\t\t#elseif js\n\t\tuntyped js.Boot.__clear_trace();\n\t\t#end\n\t}\n\t#end\n\n\t#if flash\n\t/**\n\t\tSets the color of the trace output to `rgb`.\n\t**/\n\tpublic static dynamic function setColor( rgb : Int ) {\n\t\tuntyped flash.Boot.__set_trace_color(rgb);\n\t}\n\t#end\n\n}\n","/*\n * Copyright (C)2005-2017 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of h software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and h permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\npackage haxe.ds;\n\n@:coreApi\nclass ObjectMap<K:{ }, V> implements haxe.Constraints.IMap<K,V> {\n\n\tstatic var count = 0;\n\n\tstatic inline function assignId(obj: { } ):Int {\n\t\treturn untyped obj.__id__ = ++count;\n\t}\n\n\tstatic inline function getId(obj: { } ):Int {\n\t\treturn untyped obj.__id__;\n\t}\n\n\tvar h : { };\n\n\tpublic function new() : Void {\n\t\th = { __keys__: {} };\n\t}\n\n\tpublic function set(key:K, value:V):Void untyped {\n\t\tvar id : Int = getId(key) || assignId(key);\n\t\th[id] = value;\n\t\th.__keys__[id] = key;\n\t}\n\n\tpublic inline function get(key:K):Null<V> {\n\t\treturn untyped h[getId(key)];\n\t}\n\n\tpublic inline function exists(key:K):Bool {\n\t\treturn untyped h.__keys__[getId(key)] != null;\n\t}\n\n\tpublic function remove( key : K ) : Bool {\n\t\tvar id = getId(key);\n\t\tif ( untyped h.__keys__[id] == null ) return false;\n\t\tuntyped  __js__(\"delete\")(h[id]);\n\t\tuntyped  __js__(\"delete\")(h.__keys__[id]);\n\t\treturn true;\n\t}\n\n\tpublic function keys() : Iterator<K> {\n\t\tvar a = [];\n\t\tuntyped {\n\t\t\t__js__(\"for( var key in this.h.__keys__ ) {\");\n\t\t\t\tif( h.hasOwnProperty(key) )\n\t\t\t\t\ta.push(h.__keys__[key]);\n\t\t\t__js__(\"}\");\n\t\t}\n\t\treturn a.iterator();\n\t}\n\n\tpublic function iterator() : Iterator<V> {\n\t\treturn untyped {\n\t\t\tref : h,\n\t\t\tit : keys(),\n\t\t\thasNext : function() { return __this__.it.hasNext(); },\n\t\t\tnext : function() { var i = __this__.it.next(); return __this__.ref[getId(i)]; }\n\t\t};\n\t}\n\n\tpublic function toString() : String {\n\t\tvar s = new StringBuf();\n\t\ts.add(\"{\");\n\t\tvar it = keys();\n\t\tfor( i in it ) {\n\t\t\ts.add(Std.string(i));\n\t\t\ts.add(\" => \");\n\t\t\ts.add(Std.string(get(i)));\n\t\t\tif( it.hasNext() )\n\t\t\t\ts.add(\", \");\n\t\t}\n\t\ts.add(\"}\");\n\t\treturn s.toString();\n\t}\n}","/*\n * Copyright (C)2005-2017 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\npackage haxe.ds;\n\nprivate class StringMapIterator<T> {\n\tvar map : StringMap<T>;\n\tvar keys : Array<String>;\n\tvar index : Int;\n\tvar count : Int;\n\tpublic inline function new(map:StringMap<T>, keys:Array<String>) {\n\t\tthis.map = map;\n\t\tthis.keys = keys;\n\t\tthis.index = 0;\n\t\tthis.count = keys.length;\n\t}\n\tpublic inline function hasNext() {\n\t\treturn index < count;\n\t}\n\tpublic inline function next() {\n\t\treturn map.get(keys[index++]);\n\t}\n}\n\n@:coreApi class StringMap<T> implements haxe.Constraints.IMap<String,T> {\n\n\tprivate var h : Dynamic;\n\tprivate var rh : Dynamic;\n\n\tpublic inline function new() : Void {\n\t\th = {};\n\t}\n\n\tinline function isReserved(key:String) : Bool {\n\t\treturn untyped __js__(\"__map_reserved\")[key] != null;\n\t}\n\n\tpublic inline function set( key : String, value : T ) : Void {\n\t\tif( isReserved(key) )\n\t\t\tsetReserved(key, value);\n\t\telse\n\t\t\th[cast key] = value;\n\t}\n\n\tpublic inline function get( key : String ) : Null<T> {\n\t\tif( isReserved(key) )\n\t\t\treturn getReserved(key);\n\t\treturn h[cast key];\n\t}\n\n\tpublic inline function exists( key : String ) : Bool {\n\t\tif( isReserved(key) )\n\t\t\treturn existsReserved(key);\n\t\treturn h.hasOwnProperty(key);\n\t}\n\n\tfunction setReserved( key : String, value : T ) : Void {\n\t\tif( rh == null ) rh = {};\n\t\trh[cast \"$\"+key] = value;\n\t}\n\n\tfunction getReserved( key : String ) : Null<T> {\n\t\treturn rh == null ? null : rh[cast \"$\"+key];\n\t}\n\n\tfunction existsReserved( key : String ) : Bool {\n\t\tif( rh == null ) return false;\n\t\treturn untyped rh.hasOwnProperty(\"$\"+key);\n\t}\n\n\tpublic function remove( key : String ) : Bool {\n\t\tif( isReserved(key) ) {\n\t\t\tkey = \"$\" + key;\n\t\t\tif( rh == null || !rh.hasOwnProperty(key) ) return false;\n\t\t\tuntyped __js__(\"delete\")(rh[key]);\n\t\t\treturn true;\n\t\t} else {\n\t\t\tif( !h.hasOwnProperty(key) )\n\t\t\t\treturn false;\n\t\t\tuntyped __js__(\"delete\")(h[key]);\n\t\t\treturn true;\n\t\t}\n\t}\n\n\tpublic function keys() : Iterator<String> {\n\t\treturn arrayKeys().iterator();\n\t}\n\t\n\tfunction arrayKeys() : Array<String> {\n\t\tvar out = [];\n\t\tuntyped {\n\t\t\t__js__(\"for( var key in this.h ) {\");\n\t\t\t\tif( h.hasOwnProperty(key) )\n\t\t\t\t\tout.push(key);\n\t\t\t__js__(\"}\");\n\t\t}\n\t\tif( rh != null ) untyped {\n\t\t\t__js__(\"for( var key in this.rh ) {\");\n\t\t\t\tif( key.charCodeAt(0) == \"$\".code )\n\t\t\t\t\tout.push(key.substr(1));\n\t\t\t__js__(\"}\");\n\t\t}\n\t\treturn out;\n\t}\n\n\tpublic inline function iterator() : Iterator<T> {\n\t\treturn new StringMapIterator(this, arrayKeys());\n\t}\n\n\tpublic function toString() : String {\n\t\tvar s = new StringBuf();\n\t\ts.add(\"{\");\n\t\tvar keys = arrayKeys();\n\t\tfor( i in 0...keys.length ) {\n\t\t\tvar k = keys[i];\n\t\t\ts.add(k);\n\t\t\ts.add(\" => \");\n\t\t\ts.add(Std.string(get(k)));\n\t\t\tif( i < keys.length-1 )\n\t\t\t\ts.add(\", \");\n\t\t}\n\t\ts.add(\"}\");\n\t\treturn s.toString();\n\t}\n\n\tstatic function __init__() : Void {\n\t\tuntyped __js__(\"var __map_reserved = {}\");\n\t}\n\n}\n","/*\n * Copyright (C)2005-2017 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\npackage haxe.io;\n\n#if !nodejs\nimport js.html.compat.Uint8Array;\nimport js.html.compat.DataView;\n#end\n\n@:coreApi\nclass Bytes {\n\n\tpublic var length(default,null) : Int;\n\tvar b : js.html.Uint8Array;\n\tvar data : js.html.DataView;\n\n\tfunction new(data:BytesData) {\n\t\tthis.length = data.byteLength;\n\t\tthis.b = new js.html.Uint8Array(data);\n\t\tuntyped {\n\t\t\tb.bufferValue = data; // some impl does not return the same instance in .buffer\n\t\t\tdata.hxBytes = this;\n\t\t\tdata.bytes = this.b;\n\t\t}\n\t}\n\n\tpublic inline function get( pos : Int ) : Int {\n\t\treturn b[pos];\n\t}\n\n\tpublic inline function set( pos : Int, v : Int ) : Void {\n\t\tb[pos] = v & 0xFF; // the &0xFF is necessary for js.html.compat support\n\t}\n\n\tpublic function blit( pos : Int, src : Bytes, srcpos : Int, len : Int ) : Void {\n\t\tif( pos < 0 || srcpos < 0 || len < 0 || pos + len > length || srcpos + len > src.length ) throw Error.OutsideBounds;\n\t\tif( srcpos == 0 && len == src.b.byteLength )\n\t\t\tb.set(src.b,pos);\n\t\telse\n\t\t\tb.set(src.b.subarray(srcpos,srcpos+len),pos);\n\t}\n\n\tpublic function fill( pos : Int, len : Int, value : Int ) : Void {\n\t\tfor( i in 0...len )\n\t\t\tset(pos++, value);\n\t}\n\n\tpublic function sub( pos : Int, len : Int ) : Bytes {\n\t\tif( pos < 0 || len < 0 || pos + len > length ) throw Error.OutsideBounds;\n\t\treturn new Bytes(b.buffer.slice(pos+b.byteOffset,pos+b.byteOffset+len));\n\t}\n\n\tpublic function compare( other : Bytes ) : Int {\n\t\tvar b1 = b;\n\t\tvar b2 = other.b;\n\t\tvar len = (length < other.length) ? length : other.length;\n\t\tfor( i in 0...len )\n\t\t\tif( b1[i] != b2[i] )\n\t\t\t\treturn b1[i] - b2[i];\n\t\treturn length - other.length;\n\t}\n\n\tinline function initData() : Void {\n\t\tif( data == null ) data = new js.html.DataView(b.buffer, b.byteOffset, b.byteLength);\n\t}\n\n\tpublic function getDouble( pos : Int ) : Float {\n\t\tinitData();\n\t\treturn data.getFloat64(pos, true);\n\t}\n\n\tpublic function getFloat( pos : Int ) : Float {\n\t\tinitData();\n\t\treturn data.getFloat32(pos, true);\n\t}\n\n\tpublic function setDouble( pos : Int, v : Float ) : Void {\n\t\tinitData();\n\t\tdata.setFloat64(pos, v, true);\n\t}\n\n\tpublic function setFloat( pos : Int, v : Float ) : Void {\n\t\tinitData();\n\t\tdata.setFloat32(pos, v, true);\n\t}\n\n\tpublic function getUInt16( pos : Int ) : Int {\n\t\tinitData();\n\t\treturn data.getUint16(pos, true);\n\t}\n\n\tpublic function setUInt16( pos : Int, v : Int ) : Void {\n\t\tinitData();\n\t\tdata.setUint16(pos, v, true);\n\t}\n\n\tpublic function getInt32( pos : Int ) : Int {\n\t\tinitData();\n\t\treturn data.getInt32(pos, true);\n\t}\n\n\tpublic function setInt32( pos : Int, v : Int ) : Void {\n\t\tinitData();\n\t\tdata.setInt32(pos, v, true);\n\t}\n\n\tpublic function getInt64( pos : Int ) : haxe.Int64 {\n\t\treturn Int64.make(getInt32(pos + 4),getInt32(pos));\n\t}\n\n\tpublic function setInt64( pos : Int, v : haxe.Int64 ) : Void {\n\t\tsetInt32(pos, v.low);\n\t\tsetInt32(pos + 4, v.high);\n\t}\n\n\tpublic function getString( pos : Int, len : Int ) : String {\n\t\tif( pos < 0 || len < 0 || pos + len > length ) throw Error.OutsideBounds;\n\t\tvar s = \"\";\n\t\tvar b = b;\n\t\tvar fcc = String.fromCharCode;\n\t\tvar i = pos;\n\t\tvar max = pos+len;\n\t\t// utf8-decode and utf16-encode\n\t\twhile( i < max ) {\n\t\t\tvar c = b[i++];\n\t\t\tif( c < 0x80 ) {\n\t\t\t\tif( c == 0 ) break;\n\t\t\t\ts += fcc(c);\n\t\t\t} else if( c < 0xE0 )\n\t\t\t\ts += fcc( ((c & 0x3F) << 6) | (b[i++] & 0x7F) );\n\t\t\telse if( c < 0xF0 ) {\n\t\t\t\tvar c2 = b[i++];\n\t\t\t\ts += fcc( ((c & 0x1F) << 12) | ((c2 & 0x7F) << 6) | (b[i++] & 0x7F) );\n\t\t\t} else {\n\t\t\t\tvar c2 = b[i++];\n\t\t\t\tvar c3 = b[i++];\n\t\t\t\tvar u = ((c & 0x0F) << 18) | ((c2 & 0x7F) << 12) | ((c3 & 0x7F) << 6) | (b[i++] & 0x7F);\n\t\t\t\t// surrogate pair\n\t\t\t\ts += fcc( (u >> 10) + 0xD7C0 );\n\t\t\t\ts += fcc( (u & 0x3FF) | 0xDC00 );\n\t\t\t}\n\t\t}\n\t\treturn s;\n\t}\n\n\t@:deprecated(\"readString is deprecated, use getString instead\")\n\t@:noCompletion\n\tpublic inline function readString(pos:Int, len:Int):String {\n\t\treturn getString(pos, len);\n\t}\n\n\tpublic function toString() : String {\n\t\treturn getString(0,length);\n\t}\n\n\tpublic function toHex() : String {\n\t\tvar s = new StringBuf();\n\t\tvar chars = [];\n\t\tvar str = \"0123456789abcdef\";\n\t\tfor( i in 0...str.length )\n\t\t\tchars.push(str.charCodeAt(i));\n\t\tfor( i in 0...length ) {\n\t\t\tvar c = get(i);\n\t\t\ts.addChar(chars[c >> 4]);\n\t\t\ts.addChar(chars[c & 15]);\n\t\t}\n\t\treturn s.toString();\n\t}\n\n\tpublic inline function getData() : BytesData {\n\t\treturn untyped b.bufferValue;\n\t}\n\n\tpublic static inline function alloc( length : Int ) : Bytes {\n\t\treturn new Bytes(new BytesData(length));\n\t}\n\n\tpublic static function ofString( s : String ) : Bytes {\n\t\tvar a = new Array();\n\t\t// utf16-decode and utf8-encode\n\t\tvar i = 0;\n\t\twhile( i < s.length ) {\n\t\t\tvar c : Int = StringTools.fastCodeAt(s,i++);\n\t\t\t// surrogate pair\n\t\t\tif( 0xD800 <= c && c <= 0xDBFF )\n\t\t\t    c = (c - 0xD7C0 << 10) | (StringTools.fastCodeAt(s,i++) & 0x3FF);\n\t\t\tif( c <= 0x7F )\n\t\t\t\ta.push(c);\n\t\t\telse if( c <= 0x7FF ) {\n\t\t\t\ta.push( 0xC0 | (c >> 6) );\n\t\t\t\ta.push( 0x80 | (c & 63) );\n\t\t\t} else if( c <= 0xFFFF ) {\n\t\t\t\ta.push( 0xE0 | (c >> 12) );\n\t\t\t\ta.push( 0x80 | ((c >> 6) & 63) );\n\t\t\t\ta.push( 0x80 | (c & 63) );\n\t\t\t} else {\n\t\t\t\ta.push( 0xF0 | (c >> 18) );\n\t\t\t\ta.push( 0x80 | ((c >> 12) & 63) );\n\t\t\t\ta.push( 0x80 | ((c >> 6) & 63) );\n\t\t\t\ta.push( 0x80 | (c & 63) );\n\t\t\t}\n\t\t}\n\t\treturn new Bytes(new js.html.Uint8Array(a).buffer);\n\t}\n\n\tpublic static function ofData( b : BytesData ) : Bytes {\n\t\tvar hb = untyped b.hxBytes;\n\t\tif( hb != null ) return hb;\n\t\treturn new Bytes(b);\n\t}\n\n\tpublic inline static function fastGet( b : BytesData, pos : Int ) : Int {\n\t\t// this requires that we have wrapped it with haxe.io.Bytes beforehand\n\t\treturn untyped b.bytes[pos];\n\t}\n\n}\n","/*\n * Copyright (C)2005-2017 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\npackage haxe.io;\n\n/**\n\tThis exception is raised when reading while data is no longer available in the `haxe.io.Input`.\n**/\nclass Eof {\n\tpublic function new() {\n\t}\n\t@:keep function toString() {\n\t\treturn \"Eof\";\n\t}\n}\n","/*\n * Copyright (C)2005-2017 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\npackage haxe.io;\n\n/**\n\tHelper that converts between floating point and binary representation.\n\tAlways works in low-endian encoding.\n**/\nclass FPHelper {\n\n\t#if neko_v21\n\t// stored in helper\n\t#elseif neko\n\tstatic var i64tmp = new neko.vm.Tls<Int64>();\n\t#elseif !(java || cs)\n\tstatic var i64tmp = Int64.ofInt(0);\n\t#end\n\n\t#if neko\n\t\t#if neko_v21\n\t\tstatic var helpers = new neko.vm.Tls<neko.NativeArray<Dynamic>>();\n\t\t#else\n\t\tstatic var helperf = new neko.vm.Tls<neko.NativeString>();\n\t\tstatic var helperd = new neko.vm.Tls<neko.NativeString>();\n\t\tstatic var _float_of_bytes = neko.Lib.load(\"std\",\"float_of_bytes\",2);\n\t\tstatic var _double_of_bytes = neko.Lib.load(\"std\",\"double_of_bytes\",2);\n\t\tstatic var _float_bytes = neko.Lib.load(\"std\",\"float_bytes\",2);\n\t\tstatic var _double_bytes = neko.Lib.load(\"std\",\"double_bytes\",2);\n\t\t#end\n\t#elseif flash\n\t\tstatic var helper = {\n\t\t\tvar b = new flash.utils.ByteArray();\n\t\t\tb.endian = flash.utils.Endian.LITTLE_ENDIAN;\n\t\t\tb;\n\t\t}\n\t#elseif php\n\t\tstatic var isLittleEndian : Bool = untyped __call__('unpack','S','\\x01\\x00')[1] == 1;\n\t#else\n\t\tstatic inline var LN2 = 0.6931471805599453; // Math.log(2)\n\t#end\n\n\t#if neko_v21 inline #end\n\tpublic static function i32ToFloat( i : Int ) : Float {\n\t\t#if neko\n\t\t\t#if neko_v21\n\t\t\treturn untyped $itof(i,false);\n\t\t\t#else\n\t\t\tvar helper = helperf.value;\n\t\t\tif( helper == null )\n\t\t\t\thelperf.value = helper = neko.NativeString.alloc(4);\n\t\t\tuntyped $sset(helper,0,i&0xFF);\n\t\t\tuntyped $sset(helper,1,(i>>8)&0xFF);\n\t\t\tuntyped $sset(helper,2,(i>>16)&0xFF);\n\t\t\tuntyped $sset(helper,3,i>>>24);\n\t\t\treturn _float_of_bytes(helper,false);\n\t\t\t#end\n\t\t#elseif cpp\n\t\t\treturn untyped __global__.__hxcpp_reinterpret_le_int32_as_float32(i);\n\t\t#elseif cs\n\t\t\tvar helper = new SingleHelper(0);\n\t\t\tif( cs.system.BitConverter.IsLittleEndian )\n\t\t\t{\n\t\t\t\thelper.i = i;\n\t\t\t} else {\n\t\t\t\thelper.i = ((i >>> 24) & 0xFF) | (((i >> 16) & 0xFF) << 8) | (((i >> 8) & 0xFF) << 16) | ((i & 0xFF) << 24);\n\t\t\t}\n\n\t\t\treturn helper.f;\n\t\t#elseif java\n\t\t\treturn java.lang.Float.FloatClass.intBitsToFloat(i);\n\t\t#elseif php\n\t\t\treturn untyped  __call__('unpack', 'f', __call__('pack', 'l', i))[1];\n\t\t#elseif flash\n\t\t\tvar helper = helper;\n\t\t\thelper.position = 0;\n\t\t\thelper.writeUnsignedInt(i);\n\t\t\thelper.position = 0;\n\t\t\treturn helper.readFloat();\n\t\t#else\n\t\t\tvar sign = 1 - ((i >>> 31) << 1);\n\t\t\tvar exp = (i >>> 23) & 0xFF;\n\t\t\tvar sig = i & 0x7FFFFF;\n\t\t\tif( sig == 0 && exp == 0 )\n\t\t\t\treturn 0.0;\n\t\t\treturn sign*(1 + Math.pow(2, -23)*sig) * Math.pow(2, exp-127);\n\t\t#end\n\t}\n\n\t#if neko_v21 inline #end\n\tpublic static function floatToI32( f : Float ) : Int {\n\t\t#if neko\n\t\t\t#if neko_v21\n\t\t\treturn untyped $ftoi(f,false);\n\t\t\t#else\n\t\t\tvar r = _float_bytes(f,false);\n\t\t\treturn untyped $sget(r,0) | ($sget(r,1)<<8) | ($sget(r,2)<<16) | ($sget(r,3)<<24);\n\t\t\t#end\n\t\t#elseif cpp\n\t\t\treturn untyped __global__.__hxcpp_reinterpret_float32_as_le_int32(f);\n\t\t#elseif cs\n\t\t\tvar helper = new SingleHelper(f);\n\t\t\tif( cs.system.BitConverter.IsLittleEndian )\n\t\t\t{\n\t\t\t\treturn helper.i;\n\t\t\t} else {\n\t\t\t\tvar i = helper.i;\n\t\t\t\treturn ((i >>> 24) & 0xFF) | (((i >> 16) & 0xFF) << 8) | (((i >> 8) & 0xFF) << 16) | ((i & 0xFF) << 24);\n\t\t\t}\n\t\t#elseif java\n\t\t\treturn java.lang.Float.FloatClass.floatToRawIntBits(f);\n\t\t#elseif flash\n\t\t\tvar helper = helper;\n\t\t\thelper.position = 0;\n\t\t\thelper.writeFloat(f);\n\t\t\thelper.position = 0;\n\t\t\treturn helper.readUnsignedInt();\n\t\t#elseif php\n\t\t\treturn untyped __call__('unpack','l',__call__('pack', 'f', f))[1];\n\t\t#else\n\t\t\tif( f == 0 ) return 0;\n\t\t\tvar af = f < 0 ? -f : f;\n\t\t\tvar exp = Math.floor(Math.log(af) / LN2);\n\t\t\tif( exp < -127 ) exp = -127 else if( exp > 128 ) exp = 128;\n\t\t\tvar sig = Math.round((af / Math.pow(2, exp) - 1) * 0x800000);\n\t\t\tif( sig == 0x800000 && exp < 128 ){\n\t\t\t\tsig = 0;\n\t\t\t\texp++;\n\t\t\t}\n\t\t\treturn (f < 0 ? 0x80000000 : 0) | ((exp + 127) << 23) | sig;\n\t\t#end\n\t}\n\n\t#if neko_v21 inline #end\n\tpublic static function i64ToDouble( low : Int, high : Int ) : Float {\n\t\t#if neko\n\t\t\t#if neko_v21\n\t\t\treturn untyped $itod(low,high,false);\n\t\t\t#else\n\t\t\tvar helper = helperd.value;\n\t\t\tif( helper == null )\n\t\t\t\thelperd.value = helper = neko.NativeString.alloc(8);\n\t\t\tuntyped $sset(helper,0,low&0xFF);\n\t\t\tuntyped $sset(helper,1,(low>>8)&0xFF);\n\t\t\tuntyped $sset(helper,2,(low>>16)&0xFF);\n\t\t\tuntyped $sset(helper,3,low>>>24);\n\t\t\tuntyped $sset(helper,4,high&0xFF);\n\t\t\tuntyped $sset(helper,5,(high>>8)&0xFF);\n\t\t\tuntyped $sset(helper,6,(high>>16)&0xFF);\n\t\t\tuntyped $sset(helper,7,high>>>24);\n\t\t\treturn _double_of_bytes(helper,false);\n\t\t\t#end\n\t\t#elseif cpp\n\t\t\treturn untyped __global__.__hxcpp_reinterpret_le_int32s_as_float64(low,high);\n\t\t#elseif cs\n\t\t\tvar helper = new FloatHelper(0);\n\t\t\tif( cs.system.BitConverter.IsLittleEndian )\n\t\t\t{\n\t\t\t\thelper.i = haxe.Int64.make(high,low);\n\t\t\t} else {\n\t\t\t\tvar i1 = high,\n\t\t\t\t    i2 = low;\n\t\t\t\tvar j2 = ((i1 >>> 24) & 0xFF) | (((i1 >> 16) & 0xFF) << 8) | (((i1 >> 8) & 0xFF) << 16) | ((i1 & 0xFF) << 24);\n\t\t\t\tvar j1 = ((i2 >>> 24) & 0xFF) | (((i2 >> 16) & 0xFF) << 8) | (((i2 >> 8) & 0xFF) << 16) | ((i2 & 0xFF) << 24);\n\t\t\t\thelper.i = haxe.Int64.make(j1,j2);\n\t\t\t}\n\t\t\treturn helper.f;\n\t\t#elseif java\n\t\t\treturn java.lang.Double.DoubleClass.longBitsToDouble( Int64.make(high,low) );\n\t\t#elseif flash\n\t\t\tvar helper = helper;\n\t\t\thelper.position = 0;\n\t\t\thelper.writeUnsignedInt(low);\n\t\t\thelper.writeUnsignedInt(high);\n\t\t\thelper.position = 0;\n\t\t\treturn helper.readDouble();\n\t\t#elseif php\n\t\t\treturn untyped  __call__('unpack', 'd', __call__('pack', 'ii', isLittleEndian ? low : high, isLittleEndian ? high : low))[1];\n\t\t#else\n\t\t\t#if python\n\t\t\tif (low == 0 && high == 2146435072) {\n\t\t\t\treturn Math.POSITIVE_INFINITY;\n\t\t\t} else if (low == 0 && high == -1048576 ) {\n\t\t\t\treturn Math.NEGATIVE_INFINITY;\n\t\t\t}\n\t\t\t#end\n\t\t\tvar sign = 1 - ((high >>> 31) << 1);\n\t\t\tvar exp = ((high >> 20) & 0x7FF) - 1023;\n\t\t\tvar sig = (high&0xFFFFF) * 4294967296. + (low>>>31) * 2147483648. + (low&0x7FFFFFFF);\n\t\t\tif( sig == 0 && exp == -1023 )\n\t\t\t\treturn 0.0;\n\t\t\treturn sign*(1.0 + Math.pow(2, -52)*sig) * Math.pow(2, exp);\n\t\t#end\n\t}\n\n\t/**\n\t\tReturns an Int64 representing the bytes representation of the double precision IEEE float value.\n\t\tWARNING : for performance reason, the same Int64 value might be reused every time. Copy its low/high values before calling again.\n\t\tWe still ensure that this is safe to use in a multithread environment\n\t**/\n\tpublic static function doubleToI64( v : Float ) : Int64 {\n\t\t#if neko\n\t\t\t#if neko_v21\n\t\t\tvar helper = helpers.value;\n\t\t\tif( helper == null ) {\n\t\t\t\thelpers.value = helper = neko.NativeArray.alloc(2);\n\t\t\t\thelper[0] = neko.NativeArray.alloc(2);\n\t\t\t\thelper[1] = haxe.Int64.ofInt(0);\n\t\t\t}\n\t\t\tvar i64 : haxe.Int64 = helper[1], int2 = helper[0];\n\t\t\tuntyped $dtoi(v,int2,false);\n\t\t\t@:privateAccess {\n\t\t\t\ti64.set_low(int2[0]);\n\t\t\t\ti64.set_high(int2[1]);\n\t\t\t}\n\t\t\treturn i64;\n\t\t\t#else\n\t\t\tvar r = _double_bytes(v,false), i64 = i64tmp.value;\n\t\t\tif( i64 == null )\n\t\t\t\ti64 = i64tmp.value = haxe.Int64.ofInt(0);\n\t\t\t@:privateAccess {\n\t\t\t\ti64.set_low(untyped $sget(r,0) | ($sget(r,1)<<8) | ($sget(r,2)<<16) | ($sget(r,3)<<24));\n\t\t\t\ti64.set_high(untyped $sget(r,4) | ($sget(r,5)<<8) | ($sget(r,6)<<16) | ($sget(r,7)<<24));\n\t\t\t}\n\t\t\treturn i64;\n\t\t\t#end\n\t\t#elseif cpp\n\t\t\treturn Int64.make(untyped __global__.__hxcpp_reinterpret_float64_as_le_int32_high(v),\n\t\t\t\t               untyped __global__.__hxcpp_reinterpret_float64_as_le_int32_low(v) );\n\t\t#elseif java\n\t\t\treturn java.lang.Double.DoubleClass.doubleToRawLongBits(v);\n\t\t#elseif cs\n\t\t\tvar helper = new FloatHelper(v);\n\t\t\tif( cs.system.BitConverter.IsLittleEndian )\n\t\t\t{\n\t\t\t\treturn helper.i;\n\t\t\t} else {\n\t\t\t\tvar i = helper.i;\n\t\t\t\tvar i1 = haxe.Int64.getHigh(i),\n\t\t\t\t    i2 = haxe.Int64.getLow(i);\n\t\t\t\tvar j2 = ((i1 >>> 24) & 0xFF) | (((i1 >> 16) & 0xFF) << 8) | (((i1 >> 8) & 0xFF) << 16) | ((i1 & 0xFF) << 24);\n\t\t\t\tvar j1 = ((i2 >>> 24) & 0xFF) | (((i2 >> 16) & 0xFF) << 8) | (((i2 >> 8) & 0xFF) << 16) | ((i2 & 0xFF) << 24);\n\n\t\t\t\treturn haxe.Int64.make(j1,j2);\n\t\t\t}\n\t\t#elseif flash\n\t\t\tvar helper = helper;\n\t\t\thelper.position = 0;\n\t\t\thelper.writeDouble(v);\n\t\t\thelper.position = 0;\n\t\t\tvar i64 = i64tmp;\n\t\t\t@:privateAccess {\n\t\t\t\ti64.set_low(cast helper.readUnsignedInt());\n\t\t\t\ti64.set_high(cast helper.readUnsignedInt());\n\t\t\t}\n\t\t\treturn i64;\n\t\t#elseif php\n\t\t\tvar a = untyped __call__('unpack',isLittleEndian ? 'V2' : 'N2',__call__('pack', 'd', v));\n\t\t\tvar i64 = i64tmp;\n\t\t\t@:privateAccess {\n\t\t\t\ti64.set_low(a[isLittleEndian ? 1 : 2]);\n\t\t\t\ti64.set_high(a[isLittleEndian ? 2 : 1]);\n\t\t\t}\n\t\t\treturn i64;\n\t\t#else\n\t\t\tvar i64 = i64tmp;\n\t\t\tif( v == 0 ) {\n\t\t\t\t@:privateAccess {\n\t\t\t\t\ti64.set_low(0);\n\t\t\t\t\ti64.set_high(0);\n\t\t\t\t}\n\t\t\t} else if (!Math.isFinite(v)) @:privateAccess {\n\t\t\t\tif (v > 0) {\n\t\t\t\t\ti64.set_low(0);\n\t\t\t\t\ti64.set_high(2146435072);\n\t\t\t\t} else {\n\t\t\t\t\ti64.set_low(0);\n\t\t\t\t\ti64.set_high(-1048576);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvar av = v < 0 ? -v : v;\n\t\t\t\tvar exp = Math.floor(Math.log(av) / LN2);\n\t\t\t\tvar sig = Math.fround(((av / Math.pow(2, exp)) - 1) * 4503599627370496.); // 2^52\n\t\t\t\tvar sig_l = Std.int(sig);\n\t\t\t\tvar sig_h = Std.int(sig / 4294967296.0);\n\t\t\t\t@:privateAccess {\n\t\t\t\t\ti64.set_low(sig_l);\n\t\t\t\t\ti64.set_high((v < 0 ? 0x80000000 : 0) | ((exp + 1023) << 20) | sig_h);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn i64;\n\t\t#end\n\t}\n\n}\n\n#if cs\n@:meta(System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Explicit))\n@:nativeGen @:struct private class SingleHelper\n{\n\t@:meta(System.Runtime.InteropServices.FieldOffset(0))\n\tpublic var i:Int;\n\t@:meta(System.Runtime.InteropServices.FieldOffset(0))\n\tpublic var f:Single;\n\n\tpublic function new(f:Single)\n\t{\n\t\tthis.i = 0;\n\t\tthis.f = f;\n\t}\n}\n\n@:meta(System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Explicit))\n@:nativeGen @:struct private class FloatHelper\n{\n\t@:meta(System.Runtime.InteropServices.FieldOffset(0))\n\tpublic var i:haxe.Int64;\n\t@:meta(System.Runtime.InteropServices.FieldOffset(0))\n\tpublic var f:Float;\n\n\tpublic function new(f:Float)\n\t{\n\t\tthis.i = haxe.Int64.ofInt(0);\n\t\tthis.f = f;\n\t}\n}\n\n#end\n","/*\n * Copyright (C)2005-2017 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\npackage js;\n\nprivate class HaxeError extends js.Error {\n\n\tvar val:Dynamic;\n\n\tpublic function new(val:Dynamic) untyped {\n\t\tsuper();\n\t\tthis.val = __define_feature__(\"js.Boot.HaxeError\", val);\n\t\tthis.message = String(val);\n\t\tif (js.Error.captureStackTrace) js.Error.captureStackTrace(this, HaxeError);\n\t}\n\n\tpublic static function wrap(val:Dynamic):Dynamic untyped {\n\t\treturn if (__instanceof__(val, js.Error)) val else new HaxeError(val);\n\t}\n}\n\n@:dox(hide)\nclass Boot {\n\n\tprivate static function __unhtml(s : String) {\n\t\treturn s.split(\"&\").join(\"&amp;\").split(\"<\").join(\"&lt;\").split(\">\").join(\"&gt;\");\n\t}\n\n\tprivate static function __trace(v,i : haxe.PosInfos) {\n\t\tuntyped {\n\t\t\tvar msg = if( i != null ) i.fileName+\":\"+i.lineNumber+\": \" else \"\";\n\t\t\t#if jsfl\n\t\t\tmsg += __string_rec(v,\"\");\n\t\t\tfl.trace(msg);\n\t\t\t#else\n\t\t\tmsg += __string_rec(v, \"\");\n\t\t\tif( i != null && i.customParams != null )\n\t\t\t\tfor( v in i.customParams )\n\t\t\t\t\tmsg += \",\" + __string_rec(v, \"\");\n\t\t\tvar d;\n\t\t\tif( __js__(\"typeof\")(document) != \"undefined\" && (d = document.getElementById(\"haxe:trace\")) != null )\n\t\t\t\td.innerHTML += __unhtml(msg)+\"<br/>\";\n\t\t\telse if( __js__(\"typeof console\") != \"undefined\" && __js__(\"console\").log != null )\n\t\t\t\t__js__(\"console\").log(msg);\n\t\t\t#end\n\t\t}\n\t}\n\n\tprivate static function __clear_trace() {\n\t\tuntyped {\n\t\t\t#if jsfl\n\t\t\tfl.outputPanel.clear();\n\t\t\t#else\n\t\t\tvar d = document.getElementById(\"haxe:trace\");\n\t\t\tif( d != null )\n\t\t\t\td.innerHTML = \"\";\n\t\t\t#end\n\t\t}\n\t}\n\n\tstatic inline function isClass(o:Dynamic) : Bool {\n\t\treturn untyped __define_feature__(\"js.Boot.isClass\", o.__name__);\n\t}\n\n\tstatic inline function isEnum(e:Dynamic) : Bool {\n\t\treturn untyped __define_feature__(\"js.Boot.isEnum\", e.__ename__);\n\t}\n\n\tstatic function getClass(o:Dynamic) : Dynamic {\n\t\tif (Std.is(o, Array))\n\t\t\treturn Array;\n\t\telse {\n\t\t\tvar cl = untyped __define_feature__(\"js.Boot.getClass\", o.__class__);\n\t\t\tif (cl != null)\n\t\t\t\treturn cl;\n\t\t\tvar name = __nativeClassName(o);\n\t\t\tif (name != null)\n\t\t\t\treturn __resolveNativeClass(name);\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t@:ifFeature(\"has_enum\")\n\tprivate static function __string_rec(o,s:String) {\n\t\tuntyped {\n\t\t\tif( o == null )\n\t\t\t    return \"null\";\n\t\t\tif( s.length >= 5 )\n\t\t\t\treturn \"<...>\"; // too much deep recursion\n\t\t\tvar t = __js__(\"typeof(o)\");\n\t\t\tif( t == \"function\" && (isClass(o) || isEnum(o)) )\n\t\t\t\tt = \"object\";\n\t\t\tswitch( t ) {\n\t\t\tcase \"object\":\n\t\t\t\tif( __js__(\"o instanceof Array\") ) {\n\t\t\t\t\tif( o.__enum__ ) {\n\t\t\t\t\t\tif( o.length == 2 )\n\t\t\t\t\t\t\treturn o[0];\n\t\t\t\t\t\tvar str = o[0]+\"(\";\n\t\t\t\t\t\ts += \"\\t\";\n\t\t\t\t\t\tfor( i in 2...o.length ) {\n\t\t\t\t\t\t\tif( i != 2 )\n\t\t\t\t\t\t\t\tstr += \",\" + __string_rec(o[i],s);\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tstr += __string_rec(o[i],s);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn str + \")\";\n\t\t\t\t\t}\n\t\t\t\t\tvar l = o.length;\n\t\t\t\t\tvar i;\n\t\t\t\t\tvar str = \"[\";\n\t\t\t\t\ts += \"\\t\";\n\t\t\t\t\tfor( i in 0...l )\n\t\t\t\t\t\tstr += (if (i > 0) \",\" else \"\")+__string_rec(o[i],s);\n\t\t\t\t\tstr += \"]\";\n\t\t\t\t\treturn str;\n\t\t\t\t}\n\t\t\t\tvar tostr;\n\t\t\t\ttry {\n\t\t\t\t\ttostr = untyped o.toString;\n\t\t\t\t} catch( e : Dynamic ) {\n\t\t\t\t\t// strange error on IE\n\t\t\t\t\treturn \"???\";\n\t\t\t\t}\n\t\t\t\tif( tostr != null && tostr != __js__(\"Object.toString\") && __typeof__(tostr) == \"function\" ) {\n\t\t\t\t\tvar s2 = o.toString();\n\t\t\t\t\tif( s2 != \"[object Object]\")\n\t\t\t\t\t\treturn s2;\n\t\t\t\t}\n\t\t\t\tvar k : String = null;\n\t\t\t\tvar str = \"{\\n\";\n\t\t\t\ts += \"\\t\";\n\t\t\t\tvar hasp = (o.hasOwnProperty != null);\n\t\t\t\t__js__(\"for( var k in o ) {\");\n\t\t\t\t\tif( hasp && !o.hasOwnProperty(k) )\n\t\t\t\t\t\t__js__(\"continue\");\n\t\t\t\t\tif( k == \"prototype\" || k == \"__class__\" || k == \"__super__\" || k == \"__interfaces__\" || k == \"__properties__\" )\n\t\t\t\t\t\t__js__(\"continue\");\n\t\t\t\t\tif( str.length != 2 )\n\t\t\t\t\t\tstr += \", \\n\";\n\t\t\t\t\tstr += s + k + \" : \"+__string_rec(o[k],s);\n\t\t\t\t__js__(\"}\");\n\t\t\t\ts = s.substring(1);\n\t\t\t\tstr += \"\\n\" + s + \"}\";\n\t\t\t\treturn str;\n\t\t\tcase \"function\":\n\t\t\t\treturn \"<function>\";\n\t\t\tcase \"string\":\n\t\t\t\treturn o;\n\t\t\tdefault:\n\t\t\t\treturn String(o);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate static function __interfLoop(cc : Dynamic,cl : Dynamic) {\n\t\tif( cc == null )\n\t\t\treturn false;\n\t\tif( cc == cl )\n\t\t\treturn true;\n\t\tvar intf : Dynamic = cc.__interfaces__;\n\t\tif( intf != null )\n\t\t\tfor( i in 0...intf.length ) {\n\t\t\t\tvar i : Dynamic = intf[i];\n\t\t\t\tif( i == cl || __interfLoop(i,cl) )\n\t\t\t\t\treturn true;\n\t\t\t}\n\t\treturn __interfLoop(cc.__super__,cl);\n\t}\n\n\t@:ifFeature(\"typed_catch\") private static function __instanceof(o : Dynamic,cl : Dynamic) {\n\t\tif( cl == null )\n\t\t\treturn false;\n\t\tswitch( cl ) {\n\t\tcase Int:\n\t\t\treturn (untyped __js__(\"typeof\"))(o) == \"number\" && untyped __js__(\"(o|0) === o\");\n\t\tcase Float:\n\t\t\treturn (untyped __js__(\"typeof\"))(o) == \"number\";\n\t\tcase Bool:\n\t\t\treturn (untyped __js__(\"typeof\"))(o) == \"boolean\";\n\t\tcase String:\n\t\t\treturn (untyped __js__(\"typeof\"))(o) == \"string\";\n\t\tcase Array:\n\t\t\treturn (untyped __js__(\"(o instanceof Array)\")) && o.__enum__ == null;\n\t\tcase Dynamic:\n\t\t\treturn true;\n\t\tdefault:\n\t\t\tif( o != null ) {\n\t\t\t\t// Check if o is an instance of a Haxe class or a native JS object\n\t\t\t\tif( (untyped __js__(\"typeof\"))(cl) == \"function\" ) {\n\t\t\t\t\tif( untyped __js__(\"o instanceof cl\") )\n\t\t\t\t\t\treturn true;\n\t\t\t\t\tif( __interfLoop(getClass(o),cl) )\n\t\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\telse if ( (untyped __js__(\"typeof\"))(cl) == \"object\" && __isNativeObj(cl) ) {\n\t\t\t\t\tif( untyped __js__(\"o instanceof cl\") )\n\t\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t// do not use isClass/isEnum here\n\t\t\tuntyped __feature__(\"Class.*\",if( cl == Class && o.__name__ != null ) return true);\n\t\t\tuntyped __feature__(\"Enum.*\",if( cl == Enum && o.__ename__ != null ) return true);\n\t\t\treturn o.__enum__ == cl;\n\t\t}\n\t}\n\n\t@:ifFeature(\"typed_cast\") private static function __cast(o : Dynamic, t : Dynamic) {\n\t\tif (__instanceof(o, t)) return o;\n\t\telse throw \"Cannot cast \" +Std.string(o) + \" to \" +Std.string(t);\n\t}\n\n\tstatic var __toStr = untyped ({}).toString;\n\t// get native JS [[Class]]\n\tstatic function __nativeClassName(o:Dynamic):String {\n\t\tvar name = untyped __toStr.call(o).slice(8, -1);\n\t\t// exclude general Object and Function\n\t\t// also exclude Math and JSON, because instanceof cannot be called on them\n\t\tif (name == \"Object\" || name == \"Function\" || name == \"Math\" || name == \"JSON\")\n\t\t\treturn null;\n\t\treturn name;\n\t}\n\n\t// check for usable native JS object\n\tstatic function __isNativeObj(o:Dynamic):Bool {\n\t\treturn __nativeClassName(o) != null;\n\t}\n\n\t// resolve native JS class in the global scope:\n\tstatic function __resolveNativeClass(name:String) {\n\t\treturn untyped js.Lib.global[name];\n\t}\n\n}\n","/*\n * Copyright (C)2005-2017 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\npackage js.html.compat;\n\n#if !nodejs\n@:ifFeature(\"js.html.ArrayBuffer.*\")\nclass ArrayBuffer {\n\n\tpublic var byteLength : Int;\n\tvar a : Array<Int>;\n\n\tpublic function new( ?a : Dynamic ) {\n\t\tif( Std.is(a,Array) ) {\n\t\t\tthis.a = a;\n\t\t\tbyteLength = a.length;\n\t\t} else {\n\t\t\tvar len : Int = a;\n\t\t\tthis.a = [];\n\t\t\tfor( i in 0...len )\n\t\t\t\tthis.a[i] = 0;\n\t\t\tbyteLength = len;\n\t\t}\n\t}\n\n\tpublic function slice(begin,?end) {\n\t\treturn new ArrayBuffer(a.slice(begin,end));\n\t}\n\n\tstatic function sliceImpl(begin,?end) {\n\t\tvar u = new js.html.Uint8Array(js.Lib.nativeThis, begin, end == null ? null : end - begin);\n\t\tvar result = new js.html.ArrayBuffer(u.byteLength);\n\t\tvar resultArray = new js.html.Uint8Array(result);\n\t\tresultArray.set(u);\n\t\treturn result;\n\t}\n\n\tstatic function __init__() untyped {\n\t\tvar ArrayBuffer = js.Lib.global.ArrayBuffer || js.html.compat.ArrayBuffer;\n\t\tif( ArrayBuffer.prototype.slice == null ) ArrayBuffer.prototype.slice = sliceImpl; // IE10\n\t}\n}\n#end","/*\n * Copyright (C)2005-2017 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\npackage js.html.compat;\n\n#if !nodejs\nimport js.Lib.nativeThis;\n\n@:ifFeature(\"js.html.Uint8Array.*\")\nclass Uint8Array {\n\n\tstatic var BYTES_PER_ELEMENT = 1;\n\n\tstatic function _new( ?arg1 : Dynamic, ?offset : Int, ?length : Int ) : Dynamic {\n\t\tvar arr;\n\t\tif( untyped __typeof__(arg1) == 'number' ) {\n\t\t\tarr = new Array();\n\t\t\tfor( i in 0...arg1 )\n\t\t\t\tarr[i] = 0;\n\t\t\tuntyped {\n\t\t\t\tarr.byteLength = arr.length;\n\t\t\t\tarr.byteOffset = 0;\n\t\t\t\tarr.buffer = new ArrayBuffer(arr);\n\t\t\t}\n\t\t} else if( Std.is(arg1,ArrayBuffer) ) {\n\t\t\tvar buffer : ArrayBuffer = arg1;\n\t\t\tif( offset == null ) offset = 0;\n\t\t\tif( length == null ) length = buffer.byteLength - offset;\n\t\t\tif( offset == 0 )\n\t\t\t\tarr = cast @:privateAccess buffer.a;\n\t\t\telse\n\t\t\t\t// here we are losing the fact that we should reference the same data,\n\t\t\t\t// but I don't see another way to have this behaviour while keeping [] access\n\t\t\t\tarr = cast @:privateAccess buffer.a.slice(offset, offset+length);\n\t\t\tuntyped {\n\t\t\t\tarr.byteLength = arr.length;\n\t\t\t\tarr.byteOffset = offset;\n\t\t\t\tarr.buffer = buffer;\n\t\t\t}\n\t\t} else if( Std.is(arg1, Array) ) {\n\t\t\tarr = (arg1 : Array<Int>).copy();\n\t\t\tuntyped {\n\t\t\t\tarr.byteLength = arr.length;\n\t\t\t\tarr.byteOffset = 0;\n\t\t\t\tarr.buffer = new ArrayBuffer(arr);\n\t\t\t}\n\t\t} else\n\t\t\tthrow \"TODO \"+arg1;\n\t\tuntyped {\n\t\t\tarr.subarray = _subarray;\n\t\t\tarr.set = _set;\n\t\t}\n\t\treturn arr;\n\t}\n\n\tstatic function _set( ?arg : Dynamic, ?offset : Int ) {\n\t\tif( Std.is(arg.buffer,ArrayBuffer) ) {\n\t\t\tvar a : Array<Int> = arg;\n\t\t\tif( arg.byteLength + offset > nativeThis.byteLength )\n\t\t\t\tthrow \"set() outside of range\";\n\t\t\tfor( i in 0...arg.byteLength )\n\t\t\t\tnativeThis[i + offset] = a[i];\n\t\t} else if( Std.is(arg,Array) ) {\n\t\t\tvar a : Array<Int> = arg;\n\t\t\tif( a.length + offset > nativeThis.byteLength )\n\t\t\t\tthrow \"set() outside of range\";\n\t\t\tfor( i in 0...a.length )\n\t\t\t\tnativeThis[i + offset] = a[i];\n\t\t} else\n\t\t\tthrow \"TODO\";\n\t}\n\n\tstatic function _subarray( start : Int, ?end : Int ) {\n\t\tvar a = _new(nativeThis.slice(start,end));\n\t\ta.byteOffset = start;\n\t\treturn a;\n\t}\n\n\tstatic function __init__() {\n\t\tvar Uint8Array = untyped js.Lib.global.Uint8Array || _new;\n\t}\n\n}\n#end","package com.github.haxePixiGAF.data.converters;\n\n/**\n * AS3 Conversion\n * @author Mathieu Anthoine\n * \n */\nclass ErrorConstants\n{\n\tpublic static inline var SCALE_NOT_FOUND:String=\" scale was not found in GAF config\";\n\tpublic static inline var ATLAS_NOT_FOUND:String=\"There is no texture atlas file '\";\n\tpublic static inline var FILE_NOT_FOUND:String=\"File or directory not found:'\";\n\tpublic static inline var GAF_NOT_FOUND:String=\"No GAF animation files found\";\n\tpublic static inline var CSF_NOT_FOUND:String=\" CSF was not found in GAF config\";\n\tpublic static inline var TIMELINES_NOT_FOUND:String=\"No animations found.\";\n\tpublic static inline var EMPTY_ZIP:String=\"zero file count in zip\";\n\tpublic static inline var ERROR_LOADING:String=\"Error occured while loading \";\n\tpublic static inline var ERROR_PARSING:String=\"GAF parse error\";\n\tpublic static inline var UNSUPPORTED_JSON:String=\"JSON format is no longer supported\";\n\tpublic static inline var UNKNOWN_FORMAT:String=\"Unknown data format.\";\n}","package com.github.haxePixiGAF.data.converters;\n\n/**\n * AS3 Conversion\n * @author Mathieu Anthoine\n * \n */\nclass WarningConstants\n{\n\tpublic static inline var UNSUPPORTED_FILTERS:String=\"Unsupported filter in animation\";\n\tpublic static inline var UNSUPPORTED_FILE:String=\"You are using an old version of GAF library\";\n\tpublic static inline var UNSUPPORTED_TAG:String=\"Unsupported tag found, check for playback library updates\";\n\tpublic static inline var FILTERS_UNDER_MASK:String=\"Warning! Animation contains objects with filters under mask! Online preview is not able to display filters applied under masks(flash player technical limitation). All other runtimes will display this correctly.\";\n\tpublic static inline var REGION_NOT_FOUND:String=\"In the texture atlas element is missing. This is conversion bug. Please report issue<font color='#0000ff'><u><a href='http://gafmedia.com/contact'>here</a></u></font>and we will fix it(use the Request type - Report Issue).\";\n}","package com.github.haxePixiGAF.events;\n\n/**\n * Equivalent to AS3 Event class constants\n * @author Mathieu Anthoine\n */\n@:expose(\"GAF.GAFEvent\")\nclass GAFEvent\n{\n\tpublic static inline var COMPLETE:String = \"complete\";\n\tpublic static inline var ERROR:String = \"error\";\n\t\n}","package com.github.haxePixiGAF.text;\n\n/**\n * Equivalent to flash.text.TextFormatAlign class\n * @author Mathieu Anthoine\n */\nclass TextFormatAlign\n{\n\tpublic static inline var CENTER:String = \"center\";\n\tpublic static inline var END:String = \"end\";\n\tpublic static inline var JUSTIFY:String = \"justify\";\n\tpublic static inline var LEFT:String = \"left\";\n\tpublic static inline var RIGHT:String = \"right\";\n\tpublic static inline var START:String = \"start\";\n\t\n}"],
"names":[],
"mappings":"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"
}